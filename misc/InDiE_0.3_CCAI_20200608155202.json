{
  "py/object": "indie.indie.indie.InDiE",
  "_distinct_slot_ids": [
    "InDiE.slot.dim_product.name.eq0001",
    "InDiE.slot.dim_product.product_category.eq0001",
    "InDiE.slot.dim_store.city.eq0001",
    "InDiE.slot.dim_promotion.promotion_name.eq0001",
    "InDiE.slot.generic0001",
    "InDiE.slot.dim_customer.name.eq0001",
    "InDiE.slot.generic0002",
    "InDiE.slot.dim_customer.email_address.eq0001",
    "InDiE.slot.fact_product_sales.order_id.eq0001"
  ],
  "dataset": [
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "family plan"
                }
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                {
                  "literal": "voice plans"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                "InDiE.slot.dim_product.product_category.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_product.product_category = InDiE.slot.dim_product.product_category.eq0001",
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "family plan",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "product_category",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.product_category.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.product_category.eq",
          "_value": "voice plans",
          "entity_id": null
        }
      ],
      "utterance": "C - I am looking to purchase a new family plan.\nCS - Sounds great, what kind of plan are you looking for? \nC - I need a voice plan only.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "am",
            null,
            null,
            "am"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "new",
            null,
            null,
            "new"
          ]
        },
        {
          "py/tuple": [
            "family plan",
            "InDiE.slot.dim_product.name.eq0001",
            "family plan",
            "family plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sounds",
            null,
            null,
            "Sounds"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plan"
          ]
        },
        {
          "py/tuple": [
            "only",
            null,
            null,
            "only"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "py/id": 3
        },
        "where": {
          "and": {
            "py/id": 4
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                "InDiE.slot.dim_product.product_category.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_product.product_category = InDiE.slot.dim_product.product_category.eq0001",
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "family plan",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "product_category",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.product_category.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.product_category.eq",
          "_value": "voice plans",
          "entity_id": null
        }
      ],
      "utterance": "C - I would like to purchase a new voice plan.\nCS - I can help you find the right plan, is this just for you?\nC - No, do you have family voice plans available?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "new",
            null,
            null,
            "new"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "this",
            null,
            null,
            "this"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "No",
            null,
            null,
            "No"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "family",
            null,
            null,
            "family"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plans"
          ]
        },
        {
          "py/tuple": [
            "available",
            null,
            null,
            "available"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "py/id": 3
        },
        "where": {
          "and": {
            "py/id": 4
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                "InDiE.slot.dim_product.product_category.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_product.product_category = InDiE.slot.dim_product.product_category.eq0001",
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "family plan",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "product_category",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.product_category.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.product_category.eq",
          "_value": "voice plans",
          "entity_id": null
        }
      ],
      "utterance": "C - I need a new family plan. Do you guys sell family plans?\nCS - Sure, what kind of service are you looking to buy?\nC - I need a voice plan.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "new",
            null,
            null,
            "new"
          ]
        },
        {
          "py/tuple": [
            "family plan",
            "InDiE.slot.dim_product.name.eq0001",
            "family plan",
            "family plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "sell",
            null,
            null,
            "sell"
          ]
        },
        {
          "py/tuple": [
            "family plan",
            "InDiE.slot.dim_product.name.eq0001",
            "family plan",
            "family plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "service",
            null,
            null,
            "service"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "buy",
            null,
            null,
            "buy"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "py/id": 3
        },
        "where": {
          "and": {
            "py/id": 4
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                "InDiE.slot.dim_product.product_category.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_product.product_category = InDiE.slot.dim_product.product_category.eq0001",
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "family plan",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "product_category",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.product_category.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.product_category.eq",
          "_value": "voice plans",
          "entity_id": null
        }
      ],
      "utterance": "C - I am looking to switch to your service.\nCS - That's great we would love to bring you on board. What service are you interested in?\nC - I would like a voice plan.\nCS - Ok great, we have many voice plans. How many people do you need on the plan?\nC - My whole family needs to be on it, do you have plans that cover entire families?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "am",
            null,
            null,
            "am"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "switch",
            null,
            null,
            "switch"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "service",
            null,
            null,
            "service"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "That",
            null,
            null,
            "That"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "love",
            null,
            null,
            "love"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "bring",
            null,
            null,
            "bring"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "board",
            null,
            null,
            "board"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "service",
            null,
            null,
            "service"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "interested",
            null,
            null,
            "interested"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plans"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "people",
            null,
            null,
            "people"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "whole",
            null,
            null,
            "whole"
          ]
        },
        {
          "py/tuple": [
            "family",
            null,
            null,
            "family"
          ]
        },
        {
          "py/tuple": [
            "needs",
            null,
            null,
            "needs"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "be",
            null,
            null,
            "be"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "cover",
            null,
            null,
            "cover"
          ]
        },
        {
          "py/tuple": [
            "entire",
            null,
            null,
            "entire"
          ]
        },
        {
          "py/tuple": [
            "families",
            null,
            null,
            "families"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "py/id": 3
        },
        "where": {
          "and": {
            "py/id": 4
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.product_key"
          },
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          },
          {
            "value": "dim_product.product_type"
          },
          {
            "value": "dim_product.product_category"
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.product_category",
                "InDiE.slot.dim_product.product_category.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_product.product_category = InDiE.slot.dim_product.product_category.eq0001",
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "family plan",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "product_category",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.product_category.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.product_category.eq",
          "_value": "voice plans",
          "entity_id": null
        }
      ],
      "utterance": "C - I want to get a family voice plan. Do you guys sell plans in that category?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "get",
            null,
            null,
            "get"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "family",
            null,
            null,
            "family"
          ]
        },
        {
          "py/tuple": [
            "voice plans",
            "InDiE.slot.dim_product.product_category.eq0001",
            "voice plans",
            "voice plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "sell",
            null,
            null,
            "sell"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "category",
            null,
            null,
            "category"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            {
              "literal": "San Francisco"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to go to a store for help immediately. Which store is in my area?\nCS - I can search for the one closest to you. Where are you located?\nC - I'm located in San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "go",
            null,
            null,
            "go"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "area",
            null,
            null,
            "area"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "search",
            null,
            null,
            "search"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "closest",
            null,
            null,
            "closest"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Where",
            null,
            null,
            "Where"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "located",
            null,
            null,
            "located"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'m",
            null,
            null,
            "'m"
          ]
        },
        {
          "py/tuple": [
            "located",
            null,
            null,
            "located"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "py/id": 47
        },
        "where": {
          "eq": {
            "py/id": 48
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to go into one of the retail locations. Can you tell me of any San Francisco stores?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "go",
            null,
            null,
            "go"
          ]
        },
        {
          "py/tuple": [
            "into",
            null,
            null,
            "into"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "retail",
            null,
            null,
            "retail"
          ]
        },
        {
          "py/tuple": [
            "locations",
            null,
            null,
            "locations"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "tell",
            null,
            null,
            "tell"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "any",
            null,
            null,
            "any"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            "stores",
            null,
            null,
            "stores"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "py/id": 47
        },
        "where": {
          "eq": {
            "py/id": 48
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to find the store closest to me\nCS - Sure, what city or town are you located in? I can find stores in that area.\nC - I'm in San Francisco\nCS - You said San Francisco right?\nC - Yes, San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "closest",
            null,
            null,
            "closest"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "town",
            null,
            null,
            "town"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "located",
            null,
            null,
            "located"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "stores",
            null,
            null,
            "stores"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "area",
            null,
            null,
            "area"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'m",
            null,
            null,
            "'m"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "You",
            null,
            null,
            "You"
          ]
        },
        {
          "py/tuple": [
            "said",
            null,
            null,
            "said"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "San",
            null,
            null,
            "San"
          ]
        },
        {
          "py/tuple": [
            "Francisco",
            null,
            null,
            "Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "py/id": 47
        },
        "where": {
          "eq": {
            "py/id": 48
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - Which stores are there near me?\nCS - Let me find that for you. Where are you located?\nC - In San Francisco.\nCS - Sorry, I missed that, which city are you located in?\nC - San Francisco.\nCS - Ah okay, San Francisco. Let me look.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "stores",
            null,
            null,
            "stores"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "near",
            null,
            null,
            "near"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Where",
            null,
            null,
            "Where"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "located",
            null,
            null,
            "located"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "In",
            null,
            null,
            "In"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sorry",
            null,
            null,
            "Sorry"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "missed",
            null,
            null,
            "missed"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "located",
            null,
            null,
            "located"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ah",
            null,
            null,
            "Ah"
          ]
        },
        {
          "py/tuple": [
            "okay",
            null,
            null,
            "okay"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "San",
            null,
            null,
            "San"
          ]
        },
        {
          "py/tuple": [
            "Francisco",
            null,
            null,
            "Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "py/id": 47
        },
        "where": {
          "eq": {
            "py/id": 48
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": [
          {
            "value": "dim_store.store_name"
          },
          {
            "value": "dim_store.city"
          }
        ],
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT dim_store.store_name, dim_store.city FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to visit a store tomorrow. Which one can I go to?\nCS - Let me look that up for you. What city do you live in?\nC - I live in San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "visit",
            null,
            null,
            "visit"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "go",
            null,
            null,
            "go"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "live",
            null,
            null,
            "live"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "live",
            null,
            null,
            "live"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            {
              "literal": "San Francisco"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - How many retail locations do you guys have?\nCS - Which city are you referring to?\nC - In San Francisco?\nCS - I'd just like to confirm, you said San Francisco, correct?\nC - Yeah, San Francisco, California.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "retail",
            null,
            null,
            "retail"
          ]
        },
        {
          "py/tuple": [
            "locations",
            null,
            null,
            "locations"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "referring",
            null,
            null,
            "referring"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "In",
            null,
            null,
            "In"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'d",
            null,
            null,
            "'d"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "confirm",
            null,
            null,
            "confirm"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "said",
            null,
            null,
            "said"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "correct",
            null,
            null,
            "correct"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yeah",
            null,
            null,
            "Yeah"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "San",
            null,
            null,
            "San"
          ]
        },
        {
          "py/tuple": [
            "Francisco",
            null,
            null,
            "Francisco"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "California",
            null,
            null,
            "California"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": {
            "py/id": 74
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I want to know you retail location count.\nCS - Sure are you looking for a particular area?\nC - How many are there in San Francisco?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "retail",
            null,
            null,
            "retail"
          ]
        },
        {
          "py/tuple": [
            "location",
            null,
            null,
            "location"
          ]
        },
        {
          "py/tuple": [
            "count",
            null,
            null,
            "count"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "particular",
            null,
            null,
            "particular"
          ]
        },
        {
          "py/tuple": [
            "area",
            null,
            null,
            "area"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": {
            "py/id": 74
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - How many stores are there in my area?\nCS - Which area are you in?\nC - I'm in San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "stores",
            null,
            null,
            "stores"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "area",
            null,
            null,
            "area"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "area",
            null,
            null,
            "area"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'m",
            null,
            null,
            "'m"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": {
            "py/id": 74
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - I'd like to know the number of stores that are nearby.\nCS - I can find that, just let me know where you live.\nC - I live in San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'d",
            null,
            null,
            "'d"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "stores",
            null,
            null,
            "stores"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "nearby",
            null,
            null,
            "nearby"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "let",
            null,
            null,
            "let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "where",
            null,
            null,
            "where"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "live",
            null,
            null,
            "live"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "live",
            null,
            null,
            "live"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": {
            "py/id": 74
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_store",
        "select": {
          "value": {
            "count": {
              "distinct": "dim_store.store_number"
            }
          }
        },
        "where": {
          "eq": [
            "dim_store.city",
            "InDiE.slot.dim_store.city.eq0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = InDiE.slot.dim_store.city.eq0001",
      "query": "SELECT COUNT(DISTINCT(dim_store.store_number)) FROM dim_store WHERE dim_store.city = 'San Francisco'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "city",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.city.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.city.eq",
          "_value": "San Francisco",
          "entity_id": null
        }
      ],
      "utterance": "C - How many store locations are there in my city?\nCS - Which city are you in?\nC - San Francisco.\nCS - I think we got cut off. Which city is it?\nC - San Francisco.\nCS - Okay, looking in San Francisco.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "locations",
            null,
            null,
            "locations"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "think",
            null,
            null,
            "think"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "got",
            null,
            null,
            "got"
          ]
        },
        {
          "py/tuple": [
            "cut",
            null,
            null,
            "cut"
          ]
        },
        {
          "py/tuple": [
            "off",
            null,
            null,
            "off"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "city",
            null,
            null,
            "city"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "San Francisco",
            "InDiE.slot.dim_store.city.eq0001",
            "San Francisco",
            "San Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Okay",
            null,
            null,
            "Okay"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "San",
            null,
            null,
            "San"
          ]
        },
        {
          "py/tuple": [
            "Francisco",
            null,
            null,
            "Francisco"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            {
              "literal": "Semi-annual"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            "InDiE.slot.dim_promotion.promotion_name.eq0001"
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = InDiE.slot.dim_promotion.promotion_name.eq0001",
      "query": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = 'Semi-annual'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "promotion_name",
          "_generic": false,
          "_id": "InDiE.slot.dim_promotion.promotion_name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_promotion",
          "_tbl_col_op": "dim_promotion.promotion_name.eq",
          "_value": "Semi-annual",
          "entity_id": null
        }
      ],
      "utterance": "C - I just saw that you guys are kicking off a promotion. It was advertised on a billboard I passed by. What type of promotion is it?\nCS - We have a semi-annual promotion starting soon. Is this the promotion you are referring to?\nC - Yes, what offers are you giving for the semi-annual promotion?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "saw",
            null,
            null,
            "saw"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "kicking",
            null,
            null,
            "kicking"
          ]
        },
        {
          "py/tuple": [
            "off",
            null,
            null,
            "off"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "advertised",
            null,
            null,
            "advertised"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "billboard",
            null,
            null,
            "billboard"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "passed",
            null,
            null,
            "passed"
          ]
        },
        {
          "py/tuple": [
            "by",
            null,
            null,
            "by"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "type",
            null,
            null,
            "type"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "We",
            null,
            null,
            "We"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "starting",
            null,
            null,
            "starting"
          ]
        },
        {
          "py/tuple": [
            "soon",
            null,
            null,
            "soon"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Is",
            null,
            null,
            "Is"
          ]
        },
        {
          "py/tuple": [
            "this",
            null,
            null,
            "this"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "referring",
            null,
            null,
            "referring"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "offers",
            null,
            null,
            "offers"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "giving",
            null,
            null,
            "giving"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": {
            "py/id": 95
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            "InDiE.slot.dim_promotion.promotion_name.eq0001"
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = InDiE.slot.dim_promotion.promotion_name.eq0001",
      "query": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = 'Semi-annual'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "promotion_name",
          "_generic": false,
          "_id": "InDiE.slot.dim_promotion.promotion_name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_promotion",
          "_tbl_col_op": "dim_promotion.promotion_name.eq",
          "_value": "Semi-annual",
          "entity_id": null
        }
      ],
      "utterance": "C - Can you give me details of the semi-annual promotion going on?\nCS - Sure, what would you like to know about it?\nC - What kind of discount is being offered?\nCS - You want to know what type of discount we are offering?\nC - Yes.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "give",
            null,
            null,
            "give"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "details",
            null,
            null,
            "details"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "going",
            null,
            null,
            "going"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "about",
            null,
            null,
            "about"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "discount",
            null,
            null,
            "discount"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "being",
            null,
            null,
            "being"
          ]
        },
        {
          "py/tuple": [
            "offered",
            null,
            null,
            "offered"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "You",
            null,
            null,
            "You"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "type",
            null,
            null,
            "type"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "discount",
            null,
            null,
            "discount"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "offering",
            null,
            null,
            "offering"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": {
            "py/id": 95
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            "InDiE.slot.dim_promotion.promotion_name.eq0001"
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = InDiE.slot.dim_promotion.promotion_name.eq0001",
      "query": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = 'Semi-annual'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "promotion_name",
          "_generic": false,
          "_id": "InDiE.slot.dim_promotion.promotion_name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_promotion",
          "_tbl_col_op": "dim_promotion.promotion_name.eq",
          "_value": "Semi-annual",
          "entity_id": null
        }
      ],
      "utterance": "C - I drove by a billboard advertising a promotion. Do you know what kind of discount it is for?\nCS - Let me look into that for you. Do you know what kind of promotion it was advertising?\nC - I think I recall it was a semi - annual sale.\nCS - Okay so I'm looking for the type of discount on our semi-annual promotion, right?\nC - Yes, exactly.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "drove",
            null,
            null,
            "drove"
          ]
        },
        {
          "py/tuple": [
            "by",
            null,
            null,
            "by"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "billboard",
            null,
            null,
            "billboard"
          ]
        },
        {
          "py/tuple": [
            "advertising",
            null,
            null,
            "advertising"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "discount",
            null,
            null,
            "discount"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "into",
            null,
            null,
            "into"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "advertising",
            null,
            null,
            "advertising"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "think",
            null,
            null,
            "think"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "recall",
            null,
            null,
            "recall"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "semi",
            null,
            null,
            "semi"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "annual",
            null,
            null,
            "annual"
          ]
        },
        {
          "py/tuple": [
            "sale",
            null,
            null,
            "sale"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Okay",
            null,
            null,
            "Okay"
          ]
        },
        {
          "py/tuple": [
            "so",
            null,
            null,
            "so"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'m",
            null,
            null,
            "'m"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "type",
            null,
            null,
            "type"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "discount",
            null,
            null,
            "discount"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "our",
            null,
            null,
            "our"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "exactly",
            null,
            null,
            "exactly"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": {
            "py/id": 95
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            "InDiE.slot.dim_promotion.promotion_name.eq0001"
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = InDiE.slot.dim_promotion.promotion_name.eq0001",
      "query": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = 'Semi-annual'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "promotion_name",
          "_generic": false,
          "_id": "InDiE.slot.dim_promotion.promotion_name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_promotion",
          "_tbl_col_op": "dim_promotion.promotion_name.eq",
          "_value": "Semi-annual",
          "entity_id": null
        }
      ],
      "utterance": "C - Is there a semi-annual promotion going on?\nCS - There is one coming up, but hasn't started yet.\nC - What kind of promotion is being offered?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Is",
            null,
            null,
            "Is"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "going",
            null,
            null,
            "going"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "There",
            null,
            null,
            "There"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "coming",
            null,
            null,
            "coming"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "but",
            null,
            null,
            "but"
          ]
        },
        {
          "py/tuple": [
            "has",
            null,
            null,
            "has"
          ]
        },
        {
          "py/tuple": [
            "n't",
            null,
            null,
            "n't"
          ]
        },
        {
          "py/tuple": [
            "started",
            null,
            null,
            "started"
          ]
        },
        {
          "py/tuple": [
            "yet",
            null,
            null,
            "yet"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "being",
            null,
            null,
            "being"
          ]
        },
        {
          "py/tuple": [
            "offered",
            null,
            null,
            "offered"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": {
            "py/id": 95
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_promotion",
        "select": {
          "value": "dim_promotion.promotion_type"
        },
        "where": {
          "eq": [
            "dim_promotion.promotion_name",
            "InDiE.slot.dim_promotion.promotion_name.eq0001"
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = InDiE.slot.dim_promotion.promotion_name.eq0001",
      "query": "SELECT dim_promotion.promotion_type FROM dim_promotion WHERE dim_promotion.promotion_name = 'Semi-annual'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "promotion_name",
          "_generic": false,
          "_id": "InDiE.slot.dim_promotion.promotion_name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_promotion",
          "_tbl_col_op": "dim_promotion.promotion_name.eq",
          "_value": "Semi-annual",
          "entity_id": null
        }
      ],
      "utterance": "C - Do you guys have a promotion going on? I saw one on a billboard.\nCS - We have a semi-annual sale starting soon.\nC - What discount can I get from the promotion?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "going",
            null,
            null,
            "going"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "saw",
            null,
            null,
            "saw"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "billboard",
            null,
            null,
            "billboard"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "We",
            null,
            null,
            "We"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "Semi-annual",
            "InDiE.slot.dim_promotion.promotion_name.eq0001",
            "Semi-annual",
            "semi-annual"
          ]
        },
        {
          "py/tuple": [
            "sale",
            null,
            null,
            "sale"
          ]
        },
        {
          "py/tuple": [
            "starting",
            null,
            null,
            "starting"
          ]
        },
        {
          "py/tuple": [
            "soon",
            null,
            null,
            "soon"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "discount",
            null,
            null,
            "discount"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "get",
            null,
            null,
            "get"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "promotion",
            null,
            null,
            "promotion"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                2
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                {
                  "literal": "John Smith"
                }
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          30,
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                "InDiE.slot.generic0001"
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                "InDiE.slot.dim_customer.name.eq0001"
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          "InDiE.slot.generic0002",
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost), InDiE.slot.generic0001) FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE dim_customer.name = InDiE.slot.dim_customer.name.eq0001 AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(('InDiE.slot.generic0002', 'DAY'))) GROUP BY fact_product_sales.order_id",
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0001",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 2,
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.name.eq",
          "_value": "John Smith",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0002",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 30,
          "entity_id": null
        }
      ],
      "utterance": "C - Hi there, can you send me all the orders for John Smith?\nCS - Sure, is it okay if I just pull the orders for the past 30 days?\nC - Sure that's fine.\nCS - You said the name is John Smith right?\nC - Yes, John Smith.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Hi",
            null,
            null,
            "Hi"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "send",
            null,
            null,
            "send"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "John Smith",
            "InDiE.slot.dim_customer.name.eq0001",
            "John Smith",
            "John Smith"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "okay",
            null,
            null,
            "okay"
          ]
        },
        {
          "py/tuple": [
            "if",
            null,
            null,
            "if"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "past",
            null,
            null,
            "past"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.generic0002",
            30,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "days",
            null,
            null,
            "days"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "fine",
            null,
            null,
            "fine"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "You",
            null,
            null,
            "You"
          ]
        },
        {
          "py/tuple": [
            "said",
            null,
            null,
            "said"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "John",
            null,
            null,
            "John"
          ]
        },
        {
          "py/tuple": [
            "Smith",
            null,
            null,
            "Smith"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "John",
            null,
            null,
            "John"
          ]
        },
        {
          "py/tuple": [
            "Smith",
            null,
            null,
            "Smith"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                2
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                {
                  "literal": "John Smith"
                }
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          30,
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                "InDiE.slot.generic0001"
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                "InDiE.slot.dim_customer.name.eq0001"
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          "InDiE.slot.generic0002",
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost), InDiE.slot.generic0001) FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE dim_customer.name = InDiE.slot.dim_customer.name.eq0001 AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(('InDiE.slot.generic0002', 'DAY'))) GROUP BY fact_product_sales.order_id",
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0001",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 2,
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.name.eq",
          "_value": "John Smith",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0002",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 30,
          "entity_id": null
        }
      ],
      "utterance": "C - I need all of my orders for the last 30 days.\nCS - Coming right up. What is your name?\nC - My name is John Smith.\nCS - Is that Smith spelled S-M-I-T-H?\nC - Yes, that is correct.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.generic0002",
            30,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "days",
            null,
            null,
            "days"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Coming",
            null,
            null,
            "Coming"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "John Smith",
            "InDiE.slot.dim_customer.name.eq0001",
            "John Smith",
            "John Smith"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Is",
            null,
            null,
            "Is"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "Smith",
            null,
            null,
            "Smith"
          ]
        },
        {
          "py/tuple": [
            "spelled",
            null,
            null,
            "spelled"
          ]
        },
        {
          "py/tuple": [
            "S-M-I-T-H",
            null,
            null,
            "S-M-I-T-H"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "correct",
            null,
            null,
            "correct"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 141
        },
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": {
          "py/id": 144
        },
        "where": {
          "and": {
            "py/id": 146
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                "InDiE.slot.generic0001"
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                "InDiE.slot.dim_customer.name.eq0001"
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          "InDiE.slot.generic0002",
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost), InDiE.slot.generic0001) FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE dim_customer.name = InDiE.slot.dim_customer.name.eq0001 AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(('InDiE.slot.generic0002', 'DAY'))) GROUP BY fact_product_sales.order_id",
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0001",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 2,
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.name.eq",
          "_value": "John Smith",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0002",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 30,
          "entity_id": null
        }
      ],
      "utterance": "C - Get me my last few orders.\nCS - Sure, I can pull up your orders from the past 30 days, is that okay?\nC - Yeah, that's fine.\nCS - What is your full name, so I can pull up the orders?\nC - My name is John Smith.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.generic0002",
            30,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "past",
            null,
            null,
            "past"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "days",
            null,
            null,
            "days"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "okay",
            null,
            null,
            "okay"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yeah",
            null,
            null,
            "Yeah"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "fine",
            null,
            null,
            "fine"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "full",
            null,
            null,
            "full"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "so",
            null,
            null,
            "so"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "John Smith",
            "InDiE.slot.dim_customer.name.eq0001",
            "John Smith",
            "John Smith"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 141
        },
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": {
          "py/id": 144
        },
        "where": {
          "and": {
            "py/id": 146
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                "InDiE.slot.generic0001"
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                "InDiE.slot.dim_customer.name.eq0001"
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          "InDiE.slot.generic0002",
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost), InDiE.slot.generic0001) FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE dim_customer.name = InDiE.slot.dim_customer.name.eq0001 AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(('InDiE.slot.generic0002', 'DAY'))) GROUP BY fact_product_sales.order_id",
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0001",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 2,
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.name.eq",
          "_value": "John Smith",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0002",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 30,
          "entity_id": null
        }
      ],
      "utterance": "C - I need to pull up all of my recent orders.\nCS - I can help you with that. What is your first and last name?\nC - Name is John Smith.\nCS - Ok great, I can pull the past 30 days, does that work?\nC - Yep that's perfect.\nCS - How do you spell Smith?\nC - S-M-I-T-H.\nCS - Got it, thank you.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "recent",
            null,
            null,
            "recent"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "first",
            null,
            null,
            "first"
          ]
        },
        {
          "py/tuple": [
            "and",
            null,
            null,
            "and"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Name",
            null,
            null,
            "Name"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "John Smith",
            "InDiE.slot.dim_customer.name.eq0001",
            "John Smith",
            "John Smith"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "past",
            null,
            null,
            "past"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.generic0002",
            30,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "days",
            null,
            null,
            "days"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "work",
            null,
            null,
            "work"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yep",
            null,
            null,
            "Yep"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "perfect",
            null,
            null,
            "perfect"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "spell",
            null,
            null,
            "spell"
          ]
        },
        {
          "py/tuple": [
            "Smith",
            null,
            null,
            "Smith"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "S-M-I-T-H.",
            null,
            null,
            "S-M-I-T-H."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Got",
            null,
            null,
            "Got"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "thank",
            null,
            null,
            "thank"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 141
        },
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": {
          "py/id": 144
        },
        "where": {
          "and": {
            "py/id": 146
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "groupby": {
          "value": "fact_product_sales.order_id"
        },
        "select": [
          {
            "value": "fact_product_sales.order_id"
          },
          {
            "value": {
              "sum": "fact_product_sales.quantity"
            }
          },
          {
            "value": {
              "round": [
                {
                  "sum": "fact_product_sales.sales_cost"
                },
                "InDiE.slot.generic0001"
              ]
            }
          }
        ],
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.name",
                "InDiE.slot.dim_customer.name.eq0001"
              ]
            },
            {
              "gt": [
                "dim_date.date",
                {
                  "date_sub": [
                    {
                      "current_date": {}
                    },
                    {
                      "interval": {
                        "literal": [
                          "InDiE.slot.generic0002",
                          "DAY"
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost), InDiE.slot.generic0001) FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE dim_customer.name = InDiE.slot.dim_customer.name.eq0001 AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(('InDiE.slot.generic0002', 'DAY'))) GROUP BY fact_product_sales.order_id",
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0001",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 2,
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.name.eq",
          "_value": "John Smith",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": null,
          "_generic": true,
          "_id": "InDiE.slot.generic0002",
          "_operator": null,
          "_required": true,
          "_table": null,
          "_tbl_col_op": "generic",
          "_value": 30,
          "entity_id": null
        }
      ],
      "utterance": "C - I need to see my last orders. Can you lookup my account?\nCS - Sure, what is your full name? I can search your account this way.\nC - My name is John Smith.\nCS - Ok great, I can pull your orders from the past 30 days, is that okay?\nC - Sounds great.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "see",
            null,
            null,
            "see"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "lookup",
            null,
            null,
            "lookup"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "full",
            null,
            null,
            "full"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "search",
            null,
            null,
            "search"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "this",
            null,
            null,
            "this"
          ]
        },
        {
          "py/tuple": [
            "way",
            null,
            null,
            "way"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "name",
            null,
            null,
            "name"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "John Smith",
            "InDiE.slot.dim_customer.name.eq0001",
            "John Smith",
            "John Smith"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "past",
            null,
            null,
            "past"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.generic0002",
            30,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "days",
            null,
            null,
            "days"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "okay",
            null,
            null,
            "okay"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sounds",
            null,
            null,
            "Sounds"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            {
              "literal": "ipad pro"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = 'ipad pro'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        }
      ],
      "utterance": "C - I want to purchase an iPad Pro.\nCS - Great, I can help you with that. Which color do you want to purchase?\nC - What colors does it come in?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Great",
            null,
            null,
            "Great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "color",
            null,
            null,
            "color"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": {
            "py/id": 211
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = 'ipad pro'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        }
      ],
      "utterance": "C - Can you give me details about the iPad Pro.\nCS - Sure what would you like to know about it? \nC - I guess to start, which colors are available?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "give",
            null,
            null,
            "give"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "details",
            null,
            null,
            "details"
          ]
        },
        {
          "py/tuple": [
            "about",
            null,
            null,
            "about"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "about",
            null,
            null,
            "about"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "guess",
            null,
            null,
            "guess"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "start",
            null,
            null,
            "start"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "available",
            null,
            null,
            "available"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": {
            "py/id": 211
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = 'ipad pro'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        }
      ],
      "utterance": "C - I want to buy an Apple product. Which colors does it come in?\nCS - Different products come in different colors. Which product are you interested in?\nC - Possibly the iPad Pro.\nCS - I can find the colors, you said the Pro right? The iPad Pro?\nC - Yeah, the iPad Pro please.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "buy",
            null,
            null,
            "buy"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "Apple",
            null,
            null,
            "Apple"
          ]
        },
        {
          "py/tuple": [
            "product",
            null,
            null,
            "product"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Different",
            null,
            null,
            "Different"
          ]
        },
        {
          "py/tuple": [
            "products",
            null,
            null,
            "products"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "different",
            null,
            null,
            "different"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "product",
            null,
            null,
            "product"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "interested",
            null,
            null,
            "interested"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Possibly",
            null,
            null,
            "Possibly"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "said",
            null,
            null,
            "said"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "Pro",
            null,
            null,
            "Pro"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "The",
            null,
            null,
            "The"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yeah",
            null,
            null,
            "Yeah"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "iPad",
            null,
            null,
            "iPad"
          ]
        },
        {
          "py/tuple": [
            "Pro",
            null,
            null,
            "Pro"
          ]
        },
        {
          "py/tuple": [
            "please",
            null,
            null,
            "please"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": {
            "py/id": 211
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = 'ipad pro'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        }
      ],
      "utterance": "C - I'm thinking about purchasing an iPad Pro. What colors does it come in?\nCS - Let me look for you - you are inquiring about the iPad Pro right?\nC - Yes, the iPad Pro.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'m",
            null,
            null,
            "'m"
          ]
        },
        {
          "py/tuple": [
            "thinking",
            null,
            null,
            "thinking"
          ]
        },
        {
          "py/tuple": [
            "about",
            null,
            null,
            "about"
          ]
        },
        {
          "py/tuple": [
            "purchasing",
            null,
            null,
            "purchasing"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "inquiring",
            null,
            null,
            "inquiring"
          ]
        },
        {
          "py/tuple": [
            "about",
            null,
            null,
            "about"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "iPad",
            null,
            null,
            "iPad"
          ]
        },
        {
          "py/tuple": [
            "Pro",
            null,
            null,
            "Pro"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": {
            "py/id": 211
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.color"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.color FROM dim_product WHERE dim_product.name = 'ipad pro'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        }
      ],
      "utterance": "C - I want to buy an iPad, does it come in any other colors than silver?\nCS - Which type of iPad are you looking at? We have iPad Pros, iPad minis, etc.\nC - What colors does the iPad Pro come in?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "buy",
            null,
            null,
            "buy"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "iPad",
            null,
            null,
            "iPad"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "any",
            null,
            null,
            "any"
          ]
        },
        {
          "py/tuple": [
            "other",
            null,
            null,
            "other"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "silver",
            null,
            null,
            "silver"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "type",
            null,
            null,
            "type"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "iPad",
            null,
            null,
            "iPad"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "at",
            null,
            null,
            "at"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "We",
            null,
            null,
            "We"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pros"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "iPad",
            null,
            null,
            "iPad"
          ]
        },
        {
          "py/tuple": [
            "minis",
            null,
            null,
            "minis"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "etc",
            null,
            null,
            "etc"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "colors",
            null,
            null,
            "colors"
          ]
        },
        {
          "py/tuple": [
            "does",
            null,
            null,
            "does"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "iPad Pro"
          ]
        },
        {
          "py/tuple": [
            "come",
            null,
            null,
            "come"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            {
              "literal": "abc@gmail.com"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            "InDiE.slot.dim_customer.email_address.eq0001"
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = InDiE.slot.dim_customer.email_address.eq0001",
      "query": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = 'abc@gmail.com'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "email_address",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.email_address.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.email_address.eq",
          "_value": "abc@gmail.com",
          "entity_id": null
        }
      ],
      "utterance": "C - Can someone help me find the number you have on file for me?\nCS - I can help you with that. What is the email associated with your account?\nC - The email is abc@gmail.com",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "someone",
            null,
            null,
            "someone"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "file",
            null,
            null,
            "file"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "associated",
            null,
            null,
            "associated"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "The",
            null,
            null,
            "The"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "abc@gmail.com",
            "InDiE.slot.dim_customer.email_address.eq0001",
            "abc@gmail.com",
            "abc@gmail.com"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": {
            "py/id": 232
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            "InDiE.slot.dim_customer.email_address.eq0001"
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = InDiE.slot.dim_customer.email_address.eq0001",
      "query": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = 'abc@gmail.com'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "email_address",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.email_address.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.email_address.eq",
          "_value": "abc@gmail.com",
          "entity_id": null
        }
      ],
      "utterance": "C - What phone number do you guys have for my account?\nCS - Let me pull up your account. What is the email associated with the account?\nC - abc@gmail.com\nCS - Ok, is that acb@gmail.com?\nC - No, it is a b c @gmail.com.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "associated",
            null,
            null,
            "associated"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "abc@gmail.com",
            "InDiE.slot.dim_customer.email_address.eq0001",
            "abc@gmail.com",
            "abc@gmail.com"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "acb",
            null,
            null,
            "acb"
          ]
        },
        {
          "py/tuple": [
            "@",
            null,
            null,
            "@"
          ]
        },
        {
          "py/tuple": [
            "gmail.com",
            null,
            null,
            "gmail.com"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "No",
            null,
            null,
            "No"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "b",
            null,
            null,
            "b"
          ]
        },
        {
          "py/tuple": [
            "c",
            null,
            null,
            "c"
          ]
        },
        {
          "py/tuple": [
            "@",
            null,
            null,
            "@"
          ]
        },
        {
          "py/tuple": [
            "gmail.com",
            null,
            null,
            "gmail.com"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": {
            "py/id": 232
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            "InDiE.slot.dim_customer.email_address.eq0001"
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = InDiE.slot.dim_customer.email_address.eq0001",
      "query": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = 'abc@gmail.com'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "email_address",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.email_address.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.email_address.eq",
          "_value": "abc@gmail.com",
          "entity_id": null
        }
      ],
      "utterance": "C - Can you lookup up the phone number for my account? My email is abc@gmail.com\nCS - Let me look that up for you. What did you say your email was once more?\nC - It's a b c @gmail.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "lookup",
            null,
            null,
            "lookup"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "abc@gmail.com",
            "InDiE.slot.dim_customer.email_address.eq0001",
            "abc@gmail.com",
            "abc@gmail.com"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "did",
            null,
            null,
            "did"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "say",
            null,
            null,
            "say"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "once",
            null,
            null,
            "once"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "b",
            null,
            null,
            "b"
          ]
        },
        {
          "py/tuple": [
            "c",
            null,
            null,
            "c"
          ]
        },
        {
          "py/tuple": [
            "@",
            null,
            null,
            "@"
          ]
        },
        {
          "py/tuple": [
            "gmail",
            null,
            null,
            "gmail"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": {
            "py/id": 232
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            "InDiE.slot.dim_customer.email_address.eq0001"
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = InDiE.slot.dim_customer.email_address.eq0001",
      "query": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = 'abc@gmail.com'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "email_address",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.email_address.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.email_address.eq",
          "_value": "abc@gmail.com",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to know which phone number is on file for my account. I think you guys have the wrong number.\nCS - I can find that for you. Which email did you use to sign up?\nC - My email is abc@gmail.com\nCS - Can you please spell out your email?\nC - Yeah, that's A as in apple, B as in bear, C as in Charlie, @gmail.com.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "file",
            null,
            null,
            "file"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "think",
            null,
            null,
            "think"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "wrong",
            null,
            null,
            "wrong"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "did",
            null,
            null,
            "did"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "use",
            null,
            null,
            "use"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "sign",
            null,
            null,
            "sign"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "abc@gmail.com",
            "InDiE.slot.dim_customer.email_address.eq0001",
            "abc@gmail.com",
            "abc@gmail.com"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "please",
            null,
            null,
            "please"
          ]
        },
        {
          "py/tuple": [
            "spell",
            null,
            null,
            "spell"
          ]
        },
        {
          "py/tuple": [
            "out",
            null,
            null,
            "out"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yeah",
            null,
            null,
            "Yeah"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "A",
            null,
            null,
            "A"
          ]
        },
        {
          "py/tuple": [
            "as",
            null,
            null,
            "as"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "apple",
            null,
            null,
            "apple"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "B",
            null,
            null,
            "B"
          ]
        },
        {
          "py/tuple": [
            "as",
            null,
            null,
            "as"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "bear",
            null,
            null,
            "bear"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "as",
            null,
            null,
            "as"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "Charlie",
            null,
            null,
            "Charlie"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "@",
            null,
            null,
            "@"
          ]
        },
        {
          "py/tuple": [
            "gmail.com",
            null,
            null,
            "gmail.com"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": {
            "py/id": 232
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_customer",
        "select": {
          "value": "dim_customer.phone_number"
        },
        "where": {
          "eq": [
            "dim_customer.email_address",
            "InDiE.slot.dim_customer.email_address.eq0001"
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = InDiE.slot.dim_customer.email_address.eq0001",
      "query": "SELECT dim_customer.phone_number FROM dim_customer WHERE dim_customer.email_address = 'abc@gmail.com'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "email_address",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.email_address.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.email_address.eq",
          "_value": "abc@gmail.com",
          "entity_id": null
        }
      ],
      "utterance": "C - I need to know which phone number you have stored.\nCS - Sure, I just need to pull up your account. What is email did you sign up with?\nC - I think I used abc@gmail.com\nCS - Can you spell out your email for me?\nC - A b c @gmail.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "stored",
            null,
            null,
            "stored"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "account",
            null,
            null,
            "account"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "did",
            null,
            null,
            "did"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "sign",
            null,
            null,
            "sign"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "think",
            null,
            null,
            "think"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "used",
            null,
            null,
            "used"
          ]
        },
        {
          "py/tuple": [
            "abc@gmail.com",
            "InDiE.slot.dim_customer.email_address.eq0001",
            "abc@gmail.com",
            "abc@gmail.com"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "spell",
            null,
            null,
            "spell"
          ]
        },
        {
          "py/tuple": [
            "out",
            null,
            null,
            "out"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "A",
            null,
            null,
            "A"
          ]
        },
        {
          "py/tuple": [
            "b",
            null,
            null,
            "b"
          ]
        },
        {
          "py/tuple": [
            "c",
            null,
            null,
            "c"
          ]
        },
        {
          "py/tuple": [
            "@",
            null,
            null,
            "@"
          ]
        },
        {
          "py/tuple": [
            "gmail",
            null,
            null,
            "gmail"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            {
              "literal": "10GB plan"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = '10GB plan'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "10GB plan",
          "entity_id": null
        }
      ],
      "utterance": "C - I am looking to purchase a phone plan.\nCS - That's awesome! I can help you find the one that is right for you. Are there any features you are looking for?\nC - I would like 10GB of service monthly, how much are the 10GB plans?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "am",
            null,
            null,
            "am"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "phunused0",
            null,
            null,
            "phunused0"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "That",
            null,
            null,
            "That"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "awesome",
            null,
            null,
            "awesome"
          ]
        },
        {
          "py/tuple": [
            "!",
            null,
            null,
            "!"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "one",
            null,
            null,
            "one"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Are",
            null,
            null,
            "Are"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "any",
            null,
            null,
            "any"
          ]
        },
        {
          "py/tuple": [
            "features",
            null,
            null,
            "features"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "service",
            null,
            null,
            "service"
          ]
        },
        {
          "py/tuple": [
            "monthly",
            null,
            null,
            "monthly"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "how",
            null,
            null,
            "how"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": {
            "py/id": 253
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = '10GB plan'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "10GB plan",
          "entity_id": null
        }
      ],
      "utterance": "C - I want a new phone plan but need to know how much it will be first.\nCS - I can give you a quote. What kind of phone plan are you looking for?\nC - I would like to have 10GB. How much are 10GB plans?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "new",
            null,
            null,
            "new"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "but",
            null,
            null,
            "but"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "how",
            null,
            null,
            "how"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "will",
            null,
            null,
            "will"
          ]
        },
        {
          "py/tuple": [
            "be",
            null,
            null,
            "be"
          ]
        },
        {
          "py/tuple": [
            "first",
            null,
            null,
            "first"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "give",
            null,
            null,
            "give"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "quote",
            null,
            null,
            "quote"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "kind",
            null,
            null,
            "kind"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": {
            "py/id": 253
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = '10GB plan'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "10GB plan",
          "entity_id": null
        }
      ],
      "utterance": "C - How much are your phone plans?\nCS - We have many types of plans, is there a specific one that you are interested in?\nC - Yes, the 10GB plan?\nCS - 10 gigabits? Let me look for you.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "phunused0",
            null,
            null,
            "phunused0"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "We",
            null,
            null,
            "We"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "types",
            null,
            null,
            "types"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "specific",
            null,
            null,
            "specific"
          ]
        },
        {
          "py/tuple": [
            "one",
            null,
            null,
            "one"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "interested",
            null,
            null,
            "interested"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            null,
            null,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "gigabits",
            null,
            null,
            "gigabits"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": {
            "py/id": 253
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = '10GB plan'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "10GB plan",
          "entity_id": null
        }
      ],
      "utterance": "C - How much are new phone plans?\nCS - It depends on the plan you purchase. What kinds of features are you looking for? I can find prices for plans that include the features.\nC - I want a plan that includes 10GB.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "new",
            null,
            null,
            "new"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "depends",
            null,
            null,
            "depends"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "kinds",
            null,
            null,
            "kinds"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "features",
            null,
            null,
            "features"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "looking",
            null,
            null,
            "looking"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "prices",
            null,
            null,
            "prices"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "include",
            null,
            null,
            "include"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "features",
            null,
            null,
            "features"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "includes",
            null,
            null,
            "includes"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": {
            "py/id": 253
          }
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": {
          "value": "dim_product.unit_price"
        },
        "where": {
          "eq": [
            "dim_product.name",
            "InDiE.slot.dim_product.name.eq0001"
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = InDiE.slot.dim_product.name.eq0001",
      "query": "SELECT dim_product.unit_price FROM dim_product WHERE dim_product.name = '10GB plan'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "10GB plan",
          "entity_id": null
        }
      ],
      "utterance": "C - I would like to purchase a phone plan.\nCS - Great, I can help you with that! Which plan are you interested in?\nC - Hmm, how much are your 10GB plans?\nCS - You are inquiring about the 10 gigabit plans?\nC - Yes please.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "would",
            null,
            null,
            "would"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "phone",
            null,
            null,
            "phone"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Great",
            null,
            null,
            "Great"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "!",
            null,
            null,
            "!"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "plan",
            null,
            null,
            "plan"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "interested",
            null,
            null,
            "interested"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Hmm",
            null,
            null,
            "Hmm"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "how",
            null,
            null,
            "how"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "10GB plan",
            "InDiE.slot.dim_product.name.eq0001",
            "10GB plan",
            "10GB"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "You",
            null,
            null,
            "You"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "inquiring",
            null,
            null,
            "inquiring"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            "gigabit",
            null,
            null,
            "gigabit"
          ]
        },
        {
          "py/tuple": [
            "plans",
            null,
            null,
            "plans"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            "please",
            null,
            null,
            "please"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            1234
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I can't remember which address my order is shipping to.\nCS - I can help you with that. Do you know your order id?\nC - Yes it is 1234.\nCS - 1-2-3-5?\nC - No, 1-2-3-4.\nCS - Oh 1-2-3-4. Ok, I got it.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "ca",
            null,
            null,
            "ca"
          ]
        },
        {
          "py/tuple": [
            "n't",
            null,
            null,
            "n't"
          ]
        },
        {
          "py/tuple": [
            "remember",
            null,
            null,
            "remember"
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "shipping",
            null,
            null,
            "shipping"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "help",
            null,
            null,
            "help"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "with",
            null,
            null,
            "with"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "id",
            null,
            null,
            "id"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "No",
            null,
            null,
            "No"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Oh",
            null,
            null,
            "Oh"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "got",
            null,
            null,
            "got"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 274
        },
        "select": {
          "py/id": 276
        },
        "where": {
          "eq": {
            "py/id": 277
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I need to know where you are shipping my order to.\nCS - I can look that up for you. What is your order number?\nC - My order number is 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "know",
            null,
            null,
            "know"
          ]
        },
        {
          "py/tuple": [
            "where",
            null,
            null,
            "where"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "shipping",
            null,
            null,
            "shipping"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 274
        },
        "select": {
          "py/id": 276
        },
        "where": {
          "eq": {
            "py/id": 277
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - Which shipping address do you have on file for order?\nCS - Let me pull up the order. Do you have an order number?\nC - Yest the number is 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "shipping",
            null,
            null,
            "shipping"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "file",
            null,
            null,
            "file"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "pull",
            null,
            null,
            "pull"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yest",
            null,
            null,
            "Yest"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 274
        },
        "select": {
          "py/id": 276
        },
        "where": {
          "eq": {
            "py/id": 277
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I think I might have given the wrong address on my order. Can I check on my order's address?\nCS - Sure is this for a billing or shipping address?\nC - It's for shipping.\nCS - Ok great. I'll just need your order number. Do you have that accessible?\nC - Yes, my order number is 1234.\nCS - You said 1-2-3-4 right?\nC - Yes, that's correct.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "think",
            null,
            null,
            "think"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "might",
            null,
            null,
            "might"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "given",
            null,
            null,
            "given"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "wrong",
            null,
            null,
            "wrong"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "check",
            null,
            null,
            "check"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "this",
            null,
            null,
            "this"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "billing",
            null,
            null,
            "billing"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "shipping",
            null,
            null,
            "shipping"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "shipping",
            null,
            null,
            "shipping"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Ok",
            null,
            null,
            "Ok"
          ]
        },
        {
          "py/tuple": [
            "great",
            null,
            null,
            "great"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'ll",
            null,
            null,
            "'ll"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "accessible",
            null,
            null,
            "accessible"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "You",
            null,
            null,
            "You"
          ]
        },
        {
          "py/tuple": [
            "said",
            null,
            null,
            "said"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "correct",
            null,
            null,
            "correct"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 274
        },
        "select": {
          "py/id": 276
        },
        "where": {
          "eq": {
            "py/id": 277
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          }
        ],
        "select": [
          {
            "value": "dim_customer.address1"
          },
          {
            "value": "dim_customer.city"
          },
          {
            "value": "dim_customer.state"
          },
          {
            "value": "dim_customer.zipcode"
          },
          {
            "value": "dim_customer.country"
          }
        ],
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT dim_customer.address1, dim_customer.city, dim_customer.state, dim_customer.zipcode, dim_customer.country FROM fact_product_sales\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I haven't found my package yet. Which address was it shipped to?\nCS - Do you have your order ID so I can lookup your order?\nC - Sure my order id is 1234.\nCS Can you repeat your order number?\nC - Yes, it's 1-2-3-4.\nCS - Thank you I've got it.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "n't",
            null,
            null,
            "n't"
          ]
        },
        {
          "py/tuple": [
            "found",
            null,
            null,
            "found"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "package",
            null,
            null,
            "package"
          ]
        },
        {
          "py/tuple": [
            "yet",
            null,
            null,
            "yet"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "address",
            null,
            null,
            "address"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "shipped",
            null,
            null,
            "shipped"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "ID",
            null,
            null,
            "ID"
          ]
        },
        {
          "py/tuple": [
            "so",
            null,
            null,
            "so"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "lookup",
            null,
            null,
            "lookup"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Sure",
            null,
            null,
            "Sure"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "id",
            null,
            null,
            "id"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "Can",
            null,
            null,
            "Can"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "repeat",
            null,
            null,
            "repeat"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Thank",
            null,
            null,
            "Thank"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'ve",
            null,
            null,
            "'ve"
          ]
        },
        {
          "py/tuple": [
            "got",
            null,
            null,
            "got"
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            1234
          ]
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 9,
      "intent_template": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - How much did you guys bill me on my last order?\nCS - Let me find that for you. Do you have an order id that I can search?\nC - Yes, the number is 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "did",
            null,
            null,
            "did"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "guys",
            null,
            null,
            "guys"
          ]
        },
        {
          "py/tuple": [
            "bill",
            null,
            null,
            "bill"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Let",
            null,
            null,
            "Let"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "an",
            null,
            null,
            "an"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "id",
            null,
            null,
            "id"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "search",
            null,
            null,
            "search"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": {
            "py/id": 313
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 9,
      "intent_template": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I need to check on the total for my last order to compare to my credit card bill.\nCS - I can find that total for you. I'll just need your order number.\nC - My order number is 1234.\nCS - Okay, reading back your confirmation number. It is 1-2-3-4, right?\nC - Yes, that's correct.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "check",
            null,
            null,
            "check"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "compare",
            null,
            null,
            "compare"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "credit",
            null,
            null,
            "credit"
          ]
        },
        {
          "py/tuple": [
            "card",
            null,
            null,
            "card"
          ]
        },
        {
          "py/tuple": [
            "bill",
            null,
            null,
            "bill"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "'ll",
            null,
            null,
            "'ll"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "need",
            null,
            null,
            "need"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "My",
            null,
            null,
            "My"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Okay",
            null,
            null,
            "Okay"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "reading",
            null,
            null,
            "reading"
          ]
        },
        {
          "py/tuple": [
            "back",
            null,
            null,
            "back"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "confirmation",
            null,
            null,
            "confirmation"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            null,
            null,
            "[unused3]"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "right",
            null,
            null,
            "right"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yes",
            null,
            null,
            "Yes"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "correct",
            null,
            null,
            "correct"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": {
            "py/id": 313
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 9,
      "intent_template": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I can't find my confirmation. How much was I billed on my order?\nCS - I can find that for you. Do you have the number for the order?\nC - Yeah the number is 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "ca",
            null,
            null,
            "ca"
          ]
        },
        {
          "py/tuple": [
            "n't",
            null,
            null,
            "n't"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "confirmation",
            null,
            null,
            "confirmation"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "billed",
            null,
            null,
            "billed"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "Do",
            null,
            null,
            "Do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Yeah",
            null,
            null,
            "Yeah"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": {
            "py/id": 313
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 9,
      "intent_template": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - How much did my last order cost? For tax and everything too.\nCS - I can look up that order. What is the order number?\nC - It's order 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "did",
            null,
            null,
            "did"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "cost",
            null,
            null,
            "cost"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "For",
            null,
            null,
            "For"
          ]
        },
        {
          "py/tuple": [
            "tax",
            null,
            null,
            "tax"
          ]
        },
        {
          "py/tuple": [
            "and",
            null,
            null,
            "and"
          ]
        },
        {
          "py/tuple": [
            "everything",
            null,
            null,
            "everything"
          ]
        },
        {
          "py/tuple": [
            "too",
            null,
            null,
            "too"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "look",
            null,
            null,
            "look"
          ]
        },
        {
          "py/tuple": [
            "up",
            null,
            null,
            "up"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "It",
            null,
            null,
            "It"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": {
            "py/id": 313
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "value": {
            "sum": "fact_product_sales.sales_cost"
          }
        },
        "where": {
          "eq": [
            "fact_product_sales.order_id",
            "InDiE.slot.fact_product_sales.order_id.eq0001"
          ]
        }
      },
      "intent_id": 9,
      "intent_template": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = InDiE.slot.fact_product_sales.order_id.eq0001",
      "query": "SELECT SUM(fact_product_sales.sales_cost) FROM fact_product_sales WHERE fact_product_sales.order_id = 1234",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "order_id",
          "_generic": false,
          "_id": "InDiE.slot.fact_product_sales.order_id.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "fact_product_sales",
          "_tbl_col_op": "fact_product_sales.order_id.eq",
          "_value": 1234,
          "entity_id": null
        }
      ],
      "utterance": "C - I just want to check on how much was billed on my last Oder.\nCS - Of course, do you have your order number?\nC - Where can I find that?\nCS - On your order confirmation email, there should be a number at the top of the email.\nC - Oh, it is number 1234.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "just",
            null,
            null,
            "just"
          ]
        },
        {
          "py/tuple": [
            "want",
            null,
            null,
            "want"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "check",
            null,
            null,
            "check"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "how",
            null,
            null,
            "how"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "was",
            null,
            null,
            "was"
          ]
        },
        {
          "py/tuple": [
            "billed",
            null,
            null,
            "billed"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "my",
            null,
            null,
            "my"
          ]
        },
        {
          "py/tuple": [
            "last",
            null,
            null,
            "last"
          ]
        },
        {
          "py/tuple": [
            "Oder",
            null,
            null,
            "Oder"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Of",
            null,
            null,
            "Of"
          ]
        },
        {
          "py/tuple": [
            "course",
            null,
            null,
            "course"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "do",
            null,
            null,
            "do"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Where",
            null,
            null,
            "Where"
          ]
        },
        {
          "py/tuple": [
            "can",
            null,
            null,
            "can"
          ]
        },
        {
          "py/tuple": [
            "I",
            null,
            null,
            "I"
          ]
        },
        {
          "py/tuple": [
            "find",
            null,
            null,
            "find"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "On",
            null,
            null,
            "On"
          ]
        },
        {
          "py/tuple": [
            "your",
            null,
            null,
            "your"
          ]
        },
        {
          "py/tuple": [
            "order",
            null,
            null,
            "order"
          ]
        },
        {
          "py/tuple": [
            "confirmation",
            null,
            null,
            "confirmation"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "there",
            null,
            null,
            "there"
          ]
        },
        {
          "py/tuple": [
            "should",
            null,
            null,
            "should"
          ]
        },
        {
          "py/tuple": [
            "be",
            null,
            null,
            "be"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "at",
            null,
            null,
            "at"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "top",
            null,
            null,
            "top"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "email",
            null,
            null,
            "email"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Oh",
            null,
            null,
            "Oh"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "it",
            null,
            null,
            "it"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.fact_product_sales.order_id.eq0001",
            1234,
            "1234"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    }
  ],
  "dataset_id": "CCAI",
  "dataset_version": "0",
  "example_id_to_leaf_intent_id": {
    "0": 0,
    "1": 0,
    "10": 2,
    "11": 2,
    "12": 2,
    "13": 2,
    "14": 2,
    "15": 3,
    "16": 3,
    "17": 3,
    "18": 3,
    "19": 3,
    "2": 0,
    "20": 4,
    "21": 4,
    "22": 4,
    "23": 4,
    "24": 4,
    "25": 5,
    "26": 5,
    "27": 5,
    "28": 5,
    "29": 5,
    "3": 0,
    "30": 6,
    "31": 6,
    "32": 6,
    "33": 6,
    "34": 6,
    "35": 7,
    "36": 7,
    "37": 7,
    "38": 7,
    "39": 7,
    "4": 0,
    "40": 8,
    "41": 8,
    "42": 8,
    "43": 8,
    "44": 8,
    "45": 9,
    "46": 9,
    "47": 9,
    "48": 9,
    "49": 9,
    "5": 1,
    "6": 1,
    "7": 1,
    "8": 1,
    "9": 1
  },
  "ignored_slot_ids": [],
  "indie_version": "0.3",
  "intent_tree": {
    "py/object": "indie.indie.intent_tree.IntentTree",
    "_indie": {
      "py/id": 0
    },
    "_intents_by_id": {
      "bgpvsnax": {
        "py/object": "indie.indie.intent.Level4Intent",
        "_ast": {
          "from": {
            "py/id": 126
          },
          "groupby": {
            "value": "fact_product_sales.order_id"
          },
          "select": {
            "py/id": 129
          },
          "where": {
            "and": {
              "py/id": 131
            }
          }
        },
        "_children": {},
        "_example_indices": [
          20,
          21,
          22,
          23,
          24
        ],
        "_id": "bgpvsnax",
        "_intent_tree": {
          "py/id": 335
        },
        "_key": "feb4600069e00ead0c35ff52f8d2b0051394df1615364ed8e8f157dda2b324c1",
        "_leaf_intent_permanent_id": 4,
        "_level": 4,
        "_parent": {
          "py/object": "indie.indie.intent.Level3Intent",
          "_ast": {
            "from": {
              "py/id": 126
            },
            "groupby": {
              "value": "fact_product_sales.order_id"
            },
            "select": {
              "py/id": 129
            },
            "where": "placeholder"
          },
          "_children": {
            "feb4600069e00ead0c35ff52f8d2b0051394df1615364ed8e8f157dda2b324c1": {
              "py/id": 336
            }
          },
          "_example_indices": [
            20,
            21,
            22,
            23,
            24
          ],
          "_id": "dzlbcqek",
          "_intent_tree": {
            "py/id": 335
          },
          "_key": "eb21af6c08f5345231bf173adc3f0286f96f77b7c32dcb77c22550bea70302e7",
          "_leaf_intent_permanent_id": null,
          "_level": 3,
          "_parent": {
            "py/object": "indie.indie.intent.Level2Intent",
            "_ast": null,
            "_children": {
              "eb21af6c08f5345231bf173adc3f0286f96f77b7c32dcb77c22550bea70302e7": {
                "py/id": 338
              }
            },
            "_example_indices": [
              20,
              21,
              22,
              23,
              24
            ],
            "_id": "nghwtyxm",
            "_intent_tree": {
              "py/id": 335
            },
            "_key": "00e4ce6ffec41edc52520c195888c7aeea7ba77455f365d7ac613b8ba1905a0d",
            "_leaf_intent_permanent_id": null,
            "_level": 2,
            "_parent": {
              "py/object": "indie.indie.intent.Level1Intent",
              "_ast": null,
              "_children": {
                "00e4ce6ffec41edc52520c195888c7aeea7ba77455f365d7ac613b8ba1905a0d": {
                  "py/id": 340
                }
              },
              "_example_indices": [
                20,
                21,
                22,
                23,
                24
              ],
              "_id": "ksealzvf",
              "_intent_tree": {
                "py/id": 335
              },
              "_key": "728d6641ecc3c7afb5c3fac4b012e16484c8f65d7c161f8e353e221b8615bc50",
              "_leaf_intent_permanent_id": null,
              "_level": 1,
              "_parent": {
                "py/object": "indie.indie.intent.RootIntent",
                "_ast": null,
                "_children": {
                  "3b71cdb82fcbf2dd8f939b9ab1bb993fc6689e11b274a62626bab6ed06d32423": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "2b7dfe5e113a3c00c72e1e1554bbc0c7fdb8017eb3fc7a20dc8046cbf4a097be": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_promotion",
                              "select": {
                                "value": "dim_promotion.promotion_type"
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "5a924f9e5cedd13e2f0aef60f2b25f5b6fa5028574f56f9038fadfe6ed882470": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_promotion",
                                  "select": {
                                    "value": "dim_promotion.promotion_type"
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 96
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  15,
                                  16,
                                  17,
                                  18,
                                  19
                                ],
                                "_id": "oqrwyput",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "5a924f9e5cedd13e2f0aef60f2b25f5b6fa5028574f56f9038fadfe6ed882470",
                                "_leaf_intent_permanent_id": 3,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 347
                                },
                                "_slots": {
                                  "py/id": 113
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              15,
                              16,
                              17,
                              18,
                              19
                            ],
                            "_id": "zlfjkocp",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "2b7dfe5e113a3c00c72e1e1554bbc0c7fdb8017eb3fc7a20dc8046cbf4a097be",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 346
                            },
                            "_select": [
                              {
                                "value": "dim_promotion.promotion_type"
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 114
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_promotion.promotion_name.eq0001": {
                                "py/id": 114
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_promotion.promotion_name.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_promotion.promotion_name.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          15,
                          16,
                          17,
                          18,
                          19
                        ],
                        "_id": "pudlgwsq",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 345
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      15,
                      16,
                      17,
                      18,
                      19
                    ],
                    "_id": "nlphaqko",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "3b71cdb82fcbf2dd8f939b9ab1bb993fc6689e11b274a62626bab6ed06d32423",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": [
                        "dim_promotion"
                      ]
                    }
                  },
                  "448eb627f54b618215548be49d3e94cf26018ad90c65ccacbcc3329da7677d0f": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "7cc6cd439336c2b49ab3be5ffca11f6dafd5ee84ea6be0cc347ccb5af1cfe763": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "fact_product_sales",
                              "select": {
                                "value": {
                                  "sum": "fact_product_sales.sales_cost"
                                }
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "0127c4d6201b17b4d8a6e5d4acf8d615086eb00fec1c77dbda6cb71baf397b35": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "fact_product_sales",
                                  "select": {
                                    "value": {
                                      "sum": "fact_product_sales.sales_cost"
                                    }
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 314
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  45,
                                  46,
                                  47,
                                  48,
                                  49
                                ],
                                "_id": "qryjxiuo",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "0127c4d6201b17b4d8a6e5d4acf8d615086eb00fec1c77dbda6cb71baf397b35",
                                "_leaf_intent_permanent_id": 9,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 362
                                },
                                "_slots": {
                                  "py/id": 331
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              45,
                              46,
                              47,
                              48,
                              49
                            ],
                            "_id": "rvlfqusz",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "7cc6cd439336c2b49ab3be5ffca11f6dafd5ee84ea6be0cc347ccb5af1cfe763",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 361
                            },
                            "_select": [
                              {
                                "value": {
                                  "sum": "fact_product_sales.sales_cost"
                                }
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 332
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.fact_product_sales.order_id.eq0001": {
                                "py/id": 332
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.fact_product_sales.order_id.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.fact_product_sales.order_id.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          45,
                          46,
                          47,
                          48,
                          49
                        ],
                        "_id": "kefjrpuq",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 360
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      45,
                      46,
                      47,
                      48,
                      49
                    ],
                    "_id": "vzbnycku",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "448eb627f54b618215548be49d3e94cf26018ad90c65ccacbcc3329da7677d0f",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": [
                        "fact_product_sales"
                      ]
                    }
                  },
                  "56cbddb982d8e5435e1df8be587125eb2801a83c1fe3a6f5aef1b89f38adca84": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "8a3b04d2ca2ffb8f1abd013fe1a213a67378137c90a5ceb6a1d9d5f1c54ae721": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_customer",
                              "select": {
                                "value": "dim_customer.phone_number"
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "4eb5538fbe0f02f5c362d0e959a06c46f9f0376314e18e947619eca24e420045": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_customer",
                                  "select": {
                                    "value": "dim_customer.phone_number"
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 233
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  30,
                                  31,
                                  32,
                                  33,
                                  34
                                ],
                                "_id": "xnglraiw",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "4eb5538fbe0f02f5c362d0e959a06c46f9f0376314e18e947619eca24e420045",
                                "_leaf_intent_permanent_id": 6,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 377
                                },
                                "_slots": {
                                  "py/id": 250
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              30,
                              31,
                              32,
                              33,
                              34
                            ],
                            "_id": "tureiyga",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "8a3b04d2ca2ffb8f1abd013fe1a213a67378137c90a5ceb6a1d9d5f1c54ae721",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 376
                            },
                            "_select": [
                              {
                                "value": "dim_customer.phone_number"
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 251
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_customer.email_address.eq0001": {
                                "py/id": 251
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_customer.email_address.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_customer.email_address.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          30,
                          31,
                          32,
                          33,
                          34
                        ],
                        "_id": "euslcvgx",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 375
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      30,
                      31,
                      32,
                      33,
                      34
                    ],
                    "_id": "vygspekx",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "56cbddb982d8e5435e1df8be587125eb2801a83c1fe3a6f5aef1b89f38adca84",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": [
                        "dim_customer"
                      ]
                    }
                  },
                  "728d6641ecc3c7afb5c3fac4b012e16484c8f65d7c161f8e353e221b8615bc50": {
                    "py/id": 342
                  },
                  "b6def121de47b707e1919e3f2cd70e2eee07bb33f158147f3157a3cf565ef8aa": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "9a0c61b4fdaceed5c9147a9d2e3fc315f0a8ead4e230075fa8958fc7209c5de9": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_store",
                              "select": {
                                "value": {
                                  "count": {
                                    "distinct": "dim_store.store_number"
                                  }
                                }
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "b5f80cace3821e17915b017c5588166356dd3fc5a834cf5c4a7358671fa9d51a": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_store",
                                  "select": {
                                    "value": {
                                      "count": {
                                        "distinct": "dim_store.store_number"
                                      }
                                    }
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 75
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  10,
                                  11,
                                  12,
                                  13,
                                  14
                                ],
                                "_id": "fmlzacet",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "b5f80cace3821e17915b017c5588166356dd3fc5a834cf5c4a7358671fa9d51a",
                                "_leaf_intent_permanent_id": 2,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 392
                                },
                                "_slots": {
                                  "py/id": 92
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              10,
                              11,
                              12,
                              13,
                              14
                            ],
                            "_id": "yrvqkgmw",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "9a0c61b4fdaceed5c9147a9d2e3fc315f0a8ead4e230075fa8958fc7209c5de9",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 391
                            },
                            "_select": [
                              {
                                "value": {
                                  "count": {
                                    "distinct": "dim_store.store_number"
                                  }
                                }
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 93
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_store.city.eq0001": {
                                "py/id": 93
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_store.city.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_store.city.eq0001"
                              ]
                            }
                          },
                          "eabb3f2cb4519340095fc317fbaabcd51ffa875b64852ea248ab5cf420f4640d": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_store",
                              "select": {
                                "py/id": 49
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "6f7aff6f5f5a63d2aee4b03133ee5a8e30ff49afda3422d034005411b80a38db": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_store",
                                  "select": {
                                    "py/id": 49
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 50
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  5,
                                  6,
                                  7,
                                  8,
                                  9
                                ],
                                "_id": "slkbpgnt",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "6f7aff6f5f5a63d2aee4b03133ee5a8e30ff49afda3422d034005411b80a38db",
                                "_leaf_intent_permanent_id": 1,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 398
                                },
                                "_slots": {
                                  "py/id": 71
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              5,
                              6,
                              7,
                              8,
                              9
                            ],
                            "_id": "hubygliz",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "eabb3f2cb4519340095fc317fbaabcd51ffa875b64852ea248ab5cf420f4640d",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 391
                            },
                            "_select": {
                              "py/id": 49
                            },
                            "_slots": [
                              {
                                "py/id": 72
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_store.city.eq0001": {
                                "py/id": 72
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_store.city.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_store.city.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          5,
                          6,
                          7,
                          8,
                          9,
                          10,
                          11,
                          12,
                          13,
                          14
                        ],
                        "_id": "jvwshbnf",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 390
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      5,
                      6,
                      7,
                      8,
                      9,
                      10,
                      11,
                      12,
                      13,
                      14
                    ],
                    "_id": "hdsjorza",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "b6def121de47b707e1919e3f2cd70e2eee07bb33f158147f3157a3cf565ef8aa",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": [
                        "dim_store"
                      ]
                    }
                  },
                  "d639ae530dd86b1f5da2d550ed349cae0641bf4632352e0d83358f2f80eff72a": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "1cda6ed97f58f5325c5404c04f05c928fcf04db5fd6971dd82964f3417669f84": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_product",
                              "select": {
                                "value": "dim_product.unit_price"
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "2b9af84db973b719b0cb712c0a9b23733f953c09f3243f2f0b4b0653f161d976": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_product",
                                  "select": {
                                    "value": "dim_product.unit_price"
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 254
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  35,
                                  36,
                                  37,
                                  38,
                                  39
                                ],
                                "_id": "yjclftmp",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "2b9af84db973b719b0cb712c0a9b23733f953c09f3243f2f0b4b0653f161d976",
                                "_leaf_intent_permanent_id": 7,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 412
                                },
                                "_slots": {
                                  "py/id": 271
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              35,
                              36,
                              37,
                              38,
                              39
                            ],
                            "_id": "edcuyjqa",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "1cda6ed97f58f5325c5404c04f05c928fcf04db5fd6971dd82964f3417669f84",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 411
                            },
                            "_select": [
                              {
                                "value": "dim_product.unit_price"
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 272
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_product.name.eq0001": {
                                "py/id": 272
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            }
                          },
                          "1daf0fd08067c48be003ed16d7338c99238646a101ccd5ac3d24e8d58d076475": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_product",
                              "select": {
                                "py/id": 7
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "37afa6c07869155b920c727809360530f0325d3fe72767dc50483b58a903742c": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_product",
                                  "select": {
                                    "py/id": 7
                                  },
                                  "where": {
                                    "and": {
                                      "py/id": 8
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  0,
                                  1,
                                  2,
                                  3,
                                  4
                                ],
                                "_id": "myxsdzfj",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "37afa6c07869155b920c727809360530f0325d3fe72767dc50483b58a903742c",
                                "_leaf_intent_permanent_id": 0,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 418
                                },
                                "_slots": {
                                  "py/id": 43
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              0,
                              1,
                              2,
                              3,
                              4
                            ],
                            "_id": "rltvuehd",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "1daf0fd08067c48be003ed16d7338c99238646a101ccd5ac3d24e8d58d076475",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 411
                            },
                            "_select": {
                              "py/id": 7
                            },
                            "_slots": [
                              {
                                "py/id": 44
                              },
                              {
                                "py/id": 45
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_product.name.eq0001": {
                                "py/id": 44
                              },
                              "InDiE.slot.dim_product.product_category.eq0001": {
                                "py/id": 45
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.product_category.eq0001",
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.product_category.eq0001",
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            }
                          },
                          "c844635f1da4ccbb060e0bebd9b6b8a0ec3db82b5beeb45d088d27a0484f28c6": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": "dim_product",
                              "select": {
                                "value": "dim_product.color"
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "cad2eaee4e9b743580d6ed9887328faefeec5d28f80b76f7b65f85c72055fe1a": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": "dim_product",
                                  "select": {
                                    "value": "dim_product.color"
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 212
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  25,
                                  26,
                                  27,
                                  28,
                                  29
                                ],
                                "_id": "oypghbwd",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "cad2eaee4e9b743580d6ed9887328faefeec5d28f80b76f7b65f85c72055fe1a",
                                "_leaf_intent_permanent_id": 5,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 423
                                },
                                "_slots": {
                                  "py/id": 229
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              25,
                              26,
                              27,
                              28,
                              29
                            ],
                            "_id": "wlyokmra",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "c844635f1da4ccbb060e0bebd9b6b8a0ec3db82b5beeb45d088d27a0484f28c6",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 411
                            },
                            "_select": [
                              {
                                "value": "dim_product.color"
                              }
                            ],
                            "_slots": [
                              {
                                "py/id": 230
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.dim_product.name.eq0001": {
                                "py/id": 230
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.dim_product.name.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          0,
                          1,
                          2,
                          3,
                          4,
                          25,
                          26,
                          27,
                          28,
                          29,
                          35,
                          36,
                          37,
                          38,
                          39
                        ],
                        "_id": "jofihqlw",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 410
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      0,
                      1,
                      2,
                      3,
                      4,
                      25,
                      26,
                      27,
                      28,
                      29,
                      35,
                      36,
                      37,
                      38,
                      39
                    ],
                    "_id": "xwpikuyj",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "d639ae530dd86b1f5da2d550ed349cae0641bf4632352e0d83358f2f80eff72a",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": [
                        "dim_product"
                      ]
                    }
                  },
                  "f02859b1200072732c61022804f3b8711cf384549b4324d11ebfa9db8a5aad09": {
                    "py/object": "indie.indie.intent.Level1Intent",
                    "_ast": null,
                    "_children": {
                      "0": {
                        "py/object": "indie.indie.intent.Level2Intent",
                        "_ast": null,
                        "_children": {
                          "4ce6b116af4e83c4f3e708a2d3d246dc9847eeef25696070696e30479963feb0": {
                            "py/object": "indie.indie.intent.Level3Intent",
                            "_ast": {
                              "from": {
                                "py/id": 278
                              },
                              "select": {
                                "py/id": 280
                              },
                              "where": "placeholder"
                            },
                            "_children": {
                              "3bc7be7e0d4c5fd351171e8b4bb7d247356b74921b88cf53bc66d7fa05bb39da": {
                                "py/object": "indie.indie.intent.Level4Intent",
                                "_ast": {
                                  "from": {
                                    "py/id": 278
                                  },
                                  "select": {
                                    "py/id": 280
                                  },
                                  "where": {
                                    "eq": {
                                      "py/id": 281
                                    }
                                  }
                                },
                                "_children": {},
                                "_example_indices": [
                                  40,
                                  41,
                                  42,
                                  43,
                                  44
                                ],
                                "_id": "smjzpygn",
                                "_intent_tree": {
                                  "py/id": 335
                                },
                                "_key": "3bc7be7e0d4c5fd351171e8b4bb7d247356b74921b88cf53bc66d7fa05bb39da",
                                "_leaf_intent_permanent_id": 8,
                                "_level": 4,
                                "_parent": {
                                  "py/id": 438
                                },
                                "_slots": {
                                  "py/id": 310
                                },
                                "_virtual_table": null
                              }
                            },
                            "_example_indices": [
                              40,
                              41,
                              42,
                              43,
                              44
                            ],
                            "_id": "uahznbcl",
                            "_intent_tree": {
                              "py/id": 335
                            },
                            "_key": "4ce6b116af4e83c4f3e708a2d3d246dc9847eeef25696070696e30479963feb0",
                            "_leaf_intent_permanent_id": null,
                            "_level": 3,
                            "_parent": {
                              "py/id": 437
                            },
                            "_select": {
                              "py/id": 280
                            },
                            "_slots": [
                              {
                                "py/id": 311
                              }
                            ],
                            "_slots_by_slot_id": {
                              "InDiE.slot.fact_product_sales.order_id.eq0001": {
                                "py/id": 311
                              }
                            },
                            "_virtual_table": null,
                            "all_slot_ids": {
                              "py/set": [
                                "InDiE.slot.fact_product_sales.order_id.eq0001"
                              ]
                            },
                            "optional_slot_ids": {
                              "py/set": []
                            },
                            "required_slot_ids": {
                              "py/set": [
                                "InDiE.slot.fact_product_sales.order_id.eq0001"
                              ]
                            }
                          }
                        },
                        "_example_indices": [
                          40,
                          41,
                          42,
                          43,
                          44
                        ],
                        "_id": "eoaqstnk",
                        "_intent_tree": {
                          "py/id": 335
                        },
                        "_key": "0",
                        "_leaf_intent_permanent_id": null,
                        "_level": 2,
                        "_parent": {
                          "py/id": 436
                        },
                        "_slots": [],
                        "_virtual_table": {
                          "py/object": "indie.indie.virtual_table.VirtualTable",
                          "groupby": null,
                          "order_by": null,
                          "tables": null
                        }
                      }
                    },
                    "_example_indices": [
                      40,
                      41,
                      42,
                      43,
                      44
                    ],
                    "_id": "qxvcltga",
                    "_intent_tree": {
                      "py/id": 335
                    },
                    "_key": "f02859b1200072732c61022804f3b8711cf384549b4324d11ebfa9db8a5aad09",
                    "_leaf_intent_permanent_id": null,
                    "_level": 1,
                    "_parent": {
                      "py/id": 344
                    },
                    "_slots": [],
                    "_virtual_table": {
                      "py/object": "indie.indie.virtual_table.VirtualTable",
                      "groupby": null,
                      "order_by": null,
                      "tables": {
                        "py/id": 278
                      }
                    }
                  }
                },
                "_example_indices": [
                  0,
                  1,
                  2,
                  3,
                  4,
                  5,
                  6,
                  7,
                  8,
                  9,
                  10,
                  11,
                  12,
                  13,
                  14,
                  15,
                  16,
                  17,
                  18,
                  19,
                  20,
                  21,
                  22,
                  23,
                  24,
                  25,
                  26,
                  27,
                  28,
                  29,
                  30,
                  31,
                  32,
                  33,
                  34,
                  35,
                  36,
                  37,
                  38,
                  39,
                  40,
                  41,
                  42,
                  43,
                  44,
                  45,
                  46,
                  47,
                  48,
                  49
                ],
                "_id": "icywxgsr",
                "_intent_tree": {
                  "py/id": 335
                },
                "_key": 0,
                "_leaf_intent_permanent_id": null,
                "_level": 0,
                "_parent": null,
                "_slots": [],
                "_virtual_table": null
              },
              "_slots": [],
              "_virtual_table": {
                "py/object": "indie.indie.virtual_table.VirtualTable",
                "groupby": null,
                "order_by": null,
                "tables": {
                  "py/id": 126
                }
              }
            },
            "_slots": [],
            "_virtual_table": {
              "py/object": "indie.indie.virtual_table.VirtualTable",
              "groupby": [
                {
                  "value": "fact_product_sales.order_id"
                }
              ],
              "order_by": null,
              "tables": null
            }
          },
          "_select": {
            "py/id": 129
          },
          "_slots": [
            {
              "py/id": 207
            },
            {
              "py/id": 208
            },
            {
              "py/id": 209
            }
          ],
          "_slots_by_slot_id": {
            "InDiE.slot.dim_customer.name.eq0001": {
              "py/id": 208
            },
            "InDiE.slot.generic0001": {
              "py/id": 207
            },
            "InDiE.slot.generic0002": {
              "py/id": 209
            }
          },
          "_virtual_table": null,
          "all_slot_ids": {
            "py/set": [
              "InDiE.slot.generic0001",
              "InDiE.slot.generic0002",
              "InDiE.slot.dim_customer.name.eq0001"
            ]
          },
          "optional_slot_ids": {
            "py/set": []
          },
          "required_slot_ids": {
            "py/set": [
              "InDiE.slot.generic0001",
              "InDiE.slot.generic0002",
              "InDiE.slot.dim_customer.name.eq0001"
            ]
          }
        },
        "_slots": {
          "py/id": 206
        },
        "_virtual_table": null
      },
      "dzlbcqek": {
        "py/id": 338
      },
      "edcuyjqa": {
        "py/id": 412
      },
      "eoaqstnk": {
        "py/id": 437
      },
      "euslcvgx": {
        "py/id": 376
      },
      "fmlzacet": {
        "py/id": 393
      },
      "hdsjorza": {
        "py/id": 390
      },
      "hubygliz": {
        "py/id": 398
      },
      "icywxgsr": {
        "py/id": 344
      },
      "jofihqlw": {
        "py/id": 411
      },
      "jvwshbnf": {
        "py/id": 391
      },
      "kefjrpuq": {
        "py/id": 361
      },
      "ksealzvf": {
        "py/id": 342
      },
      "myxsdzfj": {
        "py/id": 419
      },
      "nghwtyxm": {
        "py/id": 340
      },
      "nlphaqko": {
        "py/id": 345
      },
      "oqrwyput": {
        "py/id": 348
      },
      "oypghbwd": {
        "py/id": 424
      },
      "pudlgwsq": {
        "py/id": 346
      },
      "qryjxiuo": {
        "py/id": 363
      },
      "qxvcltga": {
        "py/id": 436
      },
      "rltvuehd": {
        "py/id": 418
      },
      "rvlfqusz": {
        "py/id": 362
      },
      "slkbpgnt": {
        "py/id": 399
      },
      "smjzpygn": {
        "py/id": 439
      },
      "tureiyga": {
        "py/id": 377
      },
      "uahznbcl": {
        "py/id": 438
      },
      "vygspekx": {
        "py/id": 375
      },
      "vzbnycku": {
        "py/id": 360
      },
      "wlyokmra": {
        "py/id": 423
      },
      "xnglraiw": {
        "py/id": 378
      },
      "xwpikuyj": {
        "py/id": 410
      },
      "yjclftmp": {
        "py/id": 413
      },
      "yrvqkgmw": {
        "py/id": 392
      },
      "zlfjkocp": {
        "py/id": 347
      }
    },
    "_intents_by_level": [
      [
        {
          "py/id": 344
        }
      ],
      [
        {
          "py/id": 360
        },
        {
          "py/id": 436
        },
        {
          "py/id": 375
        },
        {
          "py/id": 342
        },
        {
          "py/id": 345
        },
        {
          "py/id": 390
        },
        {
          "py/id": 410
        }
      ],
      [
        {
          "py/id": 361
        },
        {
          "py/id": 437
        },
        {
          "py/id": 376
        },
        {
          "py/id": 340
        },
        {
          "py/id": 346
        },
        {
          "py/id": 391
        },
        {
          "py/id": 411
        }
      ],
      [
        {
          "py/id": 362
        },
        {
          "py/id": 438
        },
        {
          "py/id": 377
        },
        {
          "py/id": 338
        },
        {
          "py/id": 347
        },
        {
          "py/id": 392
        },
        {
          "py/id": 398
        },
        {
          "py/id": 412
        },
        {
          "py/id": 423
        },
        {
          "py/id": 418
        }
      ],
      [
        {
          "py/id": 363
        },
        {
          "py/id": 439
        },
        {
          "py/id": 378
        },
        {
          "py/id": 336
        },
        {
          "py/id": 348
        },
        {
          "py/id": 393
        },
        {
          "py/id": 399
        },
        {
          "py/id": 413
        },
        {
          "py/id": 424
        },
        {
          "py/id": 419
        }
      ]
    ],
    "_leaf_intents": {
      "0": {
        "py/id": 419
      },
      "1": {
        "py/id": 399
      },
      "2": {
        "py/id": 393
      },
      "3": {
        "py/id": 348
      },
      "4": {
        "py/id": 336
      },
      "5": {
        "py/id": 424
      },
      "6": {
        "py/id": 378
      },
      "7": {
        "py/id": 413
      },
      "8": {
        "py/id": 439
      },
      "9": {
        "py/id": 363
      }
    },
    "_next_leaf_intent_permanent_id": 10,
    "_root": {
      "py/id": 344
    },
    "ignored_slot_ids": [],
    "lexicon": {
      "py/object": "indie.lexicon.lexicon.Lexicon",
      "dictionary": {
        "py/object": "indie.lexicon.dictionary.Dictionary",
        "key_values": {
          "0.1": 0.1,
          "1": 1,
          "100": 100,
          "1000": 1000,
          "10000": 10000,
          "1000000": 1000000,
          "100000000": 100000000,
          "1000000000": 1000000000,
          "10GB": "10GB plan",
          "10GB plan": "10GB plan",
          "12": 12,
          "123 Primrose Rd": "123 Primrose Rd",
          "datetime.datetime(2015, 1, 1, 0, 0)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B98BAQAAAAAAAA=="
              ]
            ]
          },
          "2017": 2017,
          "2019": 2019,
          "datetime.datetime(2019, 12, 31, 0, 0)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B+MMHwAAAAAAAA=="
              ]
            ]
          },
          "datetime.datetime(2019, 12, 31, 23, 59, 59)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B+MMHxc7OwAAAA=="
              ]
            ]
          },
          "23 5th Avenue": "23 5th Avenue",
          "30": 30,
          "3000000000": 3000000000,
          "345 4th Street": "345 4th Street",
          "365": 365,
          "4": 4,
          "5": "5",
          "52": 52,
          "7": 7,
          "9999999999": 9999999999,
          "ABC": "ABC",
          "April": "April",
          "Atlanta": "Atlanta",
          "August": "August",
          "Black Friday": "Black Friday",
          "Boston": "Boston",
          "CA": "CA",
          "CBS": "CBS",
          "Cambridge": "Cambridge",
          "Chante Aceves \u00ca": "Chante Aceves \u00ca",
          "Chicago": "Chicago",
          "Christmas": "Christmas",
          "December": "December",
          "Devon Beckmann \u00ca": "Devon Beckmann \u00ca",
          "Doyle Jury \u00ca": "Doyle Jury \u00ca",
          "Elijah Laudenslager \u00ca": "Elijah Laudenslager \u00ca",
          "Email": "Email",
          "Essie Fetterman \u00ca": "Essie Fetterman \u00ca",
          "FL": "FL",
          "Facebook": "Facebook",
          "February": "February",
          "Frederica Ross \u00ca": "Frederica Ross \u00ca",
          "Friday": "Friday",
          "GA": "GA",
          "Google ads": "Google ads",
          "HBO": "HBO",
          "IL": "IL",
          "January": "January",
          "Jarred Wiers \u00ca": "Jarred Wiers \u00ca",
          "Jerica Schwartzman \u00ca": "Jerica Schwartzman \u00ca",
          "Josephine Riggie \u00ca": "Josephine Riggie \u00ca",
          "Judi Manigo \u00ca": "Judi Manigo \u00ca",
          "July": "July",
          "July 4": "July 4",
          "June": "June",
          "Kansas": "Kansas",
          "Keely Cheatam \u00ca": "Keely Cheatam \u00ca",
          "LA time": "LA time",
          "Las Vegas": "Las Vegas",
          "Lindsey Sullen \u00ca": "Lindsey Sullen \u00ca",
          "Los Angeles": "Los Angeles",
          "Lucila Byrns \u00ca": "Lucila Byrns \u00ca",
          "MA": "MA",
          "MI": "MI",
          "March": "March",
          "May": "May",
          "Miami": "Miami",
          "Midwest": "Midwest",
          "Monday": "Monday",
          "NV": "NV",
          "NY": "NY",
          "NY times": "NY times",
          "New York City": "New York City",
          "Nicholas Devera \u00ca": "Nicholas Devera \u00ca",
          "Northeast": "Northeast",
          "November": "November",
          "October": "October",
          "Osvaldo Winzer \u00ca": "Osvaldo Winzer \u00ca",
          "Radio 92.3": "Radio 92.3",
          "SEM": "SEM",
          "SEO": "SEO",
          "SMS": "SMS",
          "San Francisco": "San Francisco",
          "Saturday": "Saturday",
          "Seattle": "Seattle",
          "Semi-annual": "Semi-annual",
          "September": "September",
          "South": "South",
          "Stewart Foskey \u00ca": "Stewart Foskey \u00ca",
          "Sunday": "Sunday",
          "Susanne Mickles \u00ca": "Susanne Mickles \u00ca",
          "Thursday": "Thursday",
          "Trudy Meldrum \u00ca": "Trudy Meldrum \u00ca",
          "Tuesday": "Tuesday",
          "USA": "USA",
          "Valentine": "Valentine",
          "WA": "WA",
          "Wednesday": "Wednesday",
          "Weekend": "Weekend",
          "West": "West",
          "Willy Paulos \u00ca": "Willy Paulos \u00ca",
          "Yee Mcdougall \u00ca": "Yee Mcdougall \u00ca",
          "abc@gmail.com": "abc@gmail.com",
          "accessories": "accessories",
          "billboard": "billboard",
          "black": "black",
          "bundled plans": "bundled plans",
          "buy_one_get_one": "buy_one_get_one",
          "devices": "devices",
          "direct": "direct",
          "discount": "discount",
          "earphones": "earphones",
          "family plan": "family plan",
          "gold": "gold",
          "internet": "internet",
          "ipad": "ipad",
          "ipad pro": "ipad pro",
          "iphone 11": "iphone 11",
          "iphone 11 pro": "iphone 11 pro",
          "iphone 7": "iphone 7",
          "iphone 8": "iphone 8",
          "iphone XS": "iphone XS",
          "iphone cover": "iphone cover",
          "multiples": "multiples",
          "newspaper": "newspaper",
          "online": "online",
          "pamphlet": "pamphlet",
          "phone": "phone",
          "physical": "physical",
          "pqrs@hotmail.com": "pqrs@hotmail.com",
          "radio": "radio",
          "red": "red",
          "screen protector": "screen protector",
          "silver": "silver",
          "store": "store",
          "tablets": "tablets",
          "tv": "tv",
          "unlimited plan": "unlimited plan",
          "voice plans": "voice plans",
          "web": "web",
          "white": "white",
          "xyz@yahoo.com": "xyz@yahoo.com"
        },
        "value_keys": {
          "py/object": "collections.defaultdict",
          "0.1": {
            "py/set": [
              0.1
            ]
          },
          "1": {
            "py/set": [
              1
            ]
          },
          "100": {
            "py/set": [
              100
            ]
          },
          "1000": {
            "py/set": [
              1000
            ]
          },
          "10000": {
            "py/set": [
              10000
            ]
          },
          "1000000": {
            "py/set": [
              1000000
            ]
          },
          "100000000": {
            "py/set": [
              100000000
            ]
          },
          "1000000000": {
            "py/set": [
              1000000000
            ]
          },
          "10GB plan": {
            "py/set": [
              "10GB plan",
              "10GB"
            ]
          },
          "12": {
            "py/set": [
              12
            ]
          },
          "123 Primrose Rd": {
            "py/set": [
              "123 Primrose Rd"
            ]
          },
          "datetime.datetime(2015, 1, 1, 0, 0)": {
            "py/set": [
              {
                "py/object": "datetime.datetime",
                "__reduce__": [
                  {
                    "py/type": "datetime.datetime"
                  },
                  [
                    "B98BAQAAAAAAAA=="
                  ]
                ]
              }
            ]
          },
          "2017": {
            "py/set": [
              2017
            ]
          },
          "2019": {
            "py/set": [
              2019
            ]
          },
          "datetime.datetime(2019, 12, 31, 0, 0)": {
            "py/set": [
              {
                "py/object": "datetime.datetime",
                "__reduce__": [
                  {
                    "py/type": "datetime.datetime"
                  },
                  [
                    "B+MMHwAAAAAAAA=="
                  ]
                ]
              }
            ]
          },
          "datetime.datetime(2019, 12, 31, 23, 59, 59)": {
            "py/set": [
              {
                "py/id": 468
              }
            ]
          },
          "23 5th Avenue": {
            "py/set": [
              "23 5th Avenue"
            ]
          },
          "30": {
            "py/set": [
              30
            ]
          },
          "3000000000": {
            "py/set": [
              3000000000
            ]
          },
          "345 4th Street": {
            "py/set": [
              "345 4th Street"
            ]
          },
          "365": {
            "py/set": [
              365
            ]
          },
          "4": {
            "py/set": [
              4
            ]
          },
          "5": {
            "py/set": [
              "5"
            ]
          },
          "52": {
            "py/set": [
              52
            ]
          },
          "7": {
            "py/set": [
              7
            ]
          },
          "9999999999": {
            "py/set": [
              9999999999
            ]
          },
          "ABC": {
            "py/set": [
              "ABC"
            ]
          },
          "April": {
            "py/set": [
              "April"
            ]
          },
          "Atlanta": {
            "py/set": [
              "Atlanta"
            ]
          },
          "August": {
            "py/set": [
              "August"
            ]
          },
          "Black Friday": {
            "py/set": [
              "Black Friday"
            ]
          },
          "Boston": {
            "py/set": [
              "Boston"
            ]
          },
          "CA": {
            "py/set": [
              "CA"
            ]
          },
          "CBS": {
            "py/set": [
              "CBS"
            ]
          },
          "Cambridge": {
            "py/set": [
              "Cambridge"
            ]
          },
          "Chante Aceves \u00ca": {
            "py/set": [
              "Chante Aceves \u00ca"
            ]
          },
          "Chicago": {
            "py/set": [
              "Chicago"
            ]
          },
          "Christmas": {
            "py/set": [
              "Christmas"
            ]
          },
          "December": {
            "py/set": [
              "December"
            ]
          },
          "Devon Beckmann \u00ca": {
            "py/set": [
              "Devon Beckmann \u00ca"
            ]
          },
          "Doyle Jury \u00ca": {
            "py/set": [
              "Doyle Jury \u00ca"
            ]
          },
          "Elijah Laudenslager \u00ca": {
            "py/set": [
              "Elijah Laudenslager \u00ca"
            ]
          },
          "Email": {
            "py/set": [
              "Email"
            ]
          },
          "Essie Fetterman \u00ca": {
            "py/set": [
              "Essie Fetterman \u00ca"
            ]
          },
          "FL": {
            "py/set": [
              "FL"
            ]
          },
          "Facebook": {
            "py/set": [
              "Facebook"
            ]
          },
          "February": {
            "py/set": [
              "February"
            ]
          },
          "Frederica Ross \u00ca": {
            "py/set": [
              "Frederica Ross \u00ca"
            ]
          },
          "Friday": {
            "py/set": [
              "Friday"
            ]
          },
          "GA": {
            "py/set": [
              "GA"
            ]
          },
          "Google ads": {
            "py/set": [
              "Google ads"
            ]
          },
          "HBO": {
            "py/set": [
              "HBO"
            ]
          },
          "IL": {
            "py/set": [
              "IL"
            ]
          },
          "January": {
            "py/set": [
              "January"
            ]
          },
          "Jarred Wiers \u00ca": {
            "py/set": [
              "Jarred Wiers \u00ca"
            ]
          },
          "Jerica Schwartzman \u00ca": {
            "py/set": [
              "Jerica Schwartzman \u00ca"
            ]
          },
          "Josephine Riggie \u00ca": {
            "py/set": [
              "Josephine Riggie \u00ca"
            ]
          },
          "Judi Manigo \u00ca": {
            "py/set": [
              "Judi Manigo \u00ca"
            ]
          },
          "July": {
            "py/set": [
              "July"
            ]
          },
          "July 4": {
            "py/set": [
              "July 4"
            ]
          },
          "June": {
            "py/set": [
              "June"
            ]
          },
          "Kansas": {
            "py/set": [
              "Kansas"
            ]
          },
          "Keely Cheatam \u00ca": {
            "py/set": [
              "Keely Cheatam \u00ca"
            ]
          },
          "LA time": {
            "py/set": [
              "LA time"
            ]
          },
          "Las Vegas": {
            "py/set": [
              "Las Vegas"
            ]
          },
          "Lindsey Sullen \u00ca": {
            "py/set": [
              "Lindsey Sullen \u00ca"
            ]
          },
          "Los Angeles": {
            "py/set": [
              "Los Angeles"
            ]
          },
          "Lucila Byrns \u00ca": {
            "py/set": [
              "Lucila Byrns \u00ca"
            ]
          },
          "MA": {
            "py/set": [
              "MA"
            ]
          },
          "MI": {
            "py/set": [
              "MI"
            ]
          },
          "March": {
            "py/set": [
              "March"
            ]
          },
          "May": {
            "py/set": [
              "May"
            ]
          },
          "Miami": {
            "py/set": [
              "Miami"
            ]
          },
          "Midwest": {
            "py/set": [
              "Midwest"
            ]
          },
          "Monday": {
            "py/set": [
              "Monday"
            ]
          },
          "NV": {
            "py/set": [
              "NV"
            ]
          },
          "NY": {
            "py/set": [
              "NY"
            ]
          },
          "NY times": {
            "py/set": [
              "NY times"
            ]
          },
          "New York City": {
            "py/set": [
              "New York City"
            ]
          },
          "Nicholas Devera \u00ca": {
            "py/set": [
              "Nicholas Devera \u00ca"
            ]
          },
          "Northeast": {
            "py/set": [
              "Northeast"
            ]
          },
          "November": {
            "py/set": [
              "November"
            ]
          },
          "October": {
            "py/set": [
              "October"
            ]
          },
          "Osvaldo Winzer \u00ca": {
            "py/set": [
              "Osvaldo Winzer \u00ca"
            ]
          },
          "Radio 92.3": {
            "py/set": [
              "Radio 92.3"
            ]
          },
          "SEM": {
            "py/set": [
              "SEM"
            ]
          },
          "SEO": {
            "py/set": [
              "SEO"
            ]
          },
          "SMS": {
            "py/set": [
              "SMS"
            ]
          },
          "San Francisco": {
            "py/set": [
              "San Francisco"
            ]
          },
          "Saturday": {
            "py/set": [
              "Saturday"
            ]
          },
          "Seattle": {
            "py/set": [
              "Seattle"
            ]
          },
          "Semi-annual": {
            "py/set": [
              "Semi-annual"
            ]
          },
          "September": {
            "py/set": [
              "September"
            ]
          },
          "South": {
            "py/set": [
              "South"
            ]
          },
          "Stewart Foskey \u00ca": {
            "py/set": [
              "Stewart Foskey \u00ca"
            ]
          },
          "Sunday": {
            "py/set": [
              "Sunday"
            ]
          },
          "Susanne Mickles \u00ca": {
            "py/set": [
              "Susanne Mickles \u00ca"
            ]
          },
          "Thursday": {
            "py/set": [
              "Thursday"
            ]
          },
          "Trudy Meldrum \u00ca": {
            "py/set": [
              "Trudy Meldrum \u00ca"
            ]
          },
          "Tuesday": {
            "py/set": [
              "Tuesday"
            ]
          },
          "USA": {
            "py/set": [
              "USA"
            ]
          },
          "Valentine": {
            "py/set": [
              "Valentine"
            ]
          },
          "WA": {
            "py/set": [
              "WA"
            ]
          },
          "Wednesday": {
            "py/set": [
              "Wednesday"
            ]
          },
          "Weekend": {
            "py/set": [
              "Weekend"
            ]
          },
          "West": {
            "py/set": [
              "West"
            ]
          },
          "Willy Paulos \u00ca": {
            "py/set": [
              "Willy Paulos \u00ca"
            ]
          },
          "Yee Mcdougall \u00ca": {
            "py/set": [
              "Yee Mcdougall \u00ca"
            ]
          },
          "abc@gmail.com": {
            "py/set": [
              "abc@gmail.com"
            ]
          },
          "accessories": {
            "py/set": [
              "accessories"
            ]
          },
          "billboard": {
            "py/set": [
              "billboard"
            ]
          },
          "black": {
            "py/set": [
              "black"
            ]
          },
          "bundled plans": {
            "py/set": [
              "bundled plans"
            ]
          },
          "buy_one_get_one": {
            "py/set": [
              "buy_one_get_one"
            ]
          },
          "devices": {
            "py/set": [
              "devices"
            ]
          },
          "direct": {
            "py/set": [
              "direct"
            ]
          },
          "discount": {
            "py/set": [
              "discount"
            ]
          },
          "earphones": {
            "py/set": [
              "earphones"
            ]
          },
          "family plan": {
            "py/set": [
              "family plan"
            ]
          },
          "gold": {
            "py/set": [
              "gold"
            ]
          },
          "internet": {
            "py/set": [
              "internet"
            ]
          },
          "ipad": {
            "py/set": [
              "ipad"
            ]
          },
          "ipad pro": {
            "py/set": [
              "ipad pro"
            ]
          },
          "iphone 11": {
            "py/set": [
              "iphone 11"
            ]
          },
          "iphone 11 pro": {
            "py/set": [
              "iphone 11 pro"
            ]
          },
          "iphone 7": {
            "py/set": [
              "iphone 7"
            ]
          },
          "iphone 8": {
            "py/set": [
              "iphone 8"
            ]
          },
          "iphone XS": {
            "py/set": [
              "iphone XS"
            ]
          },
          "iphone cover": {
            "py/set": [
              "iphone cover"
            ]
          },
          "multiples": {
            "py/set": [
              "multiples"
            ]
          },
          "newspaper": {
            "py/set": [
              "newspaper"
            ]
          },
          "online": {
            "py/set": [
              "online"
            ]
          },
          "pamphlet": {
            "py/set": [
              "pamphlet"
            ]
          },
          "phone": {
            "py/set": [
              "phone"
            ]
          },
          "physical": {
            "py/set": [
              "physical"
            ]
          },
          "pqrs@hotmail.com": {
            "py/set": [
              "pqrs@hotmail.com"
            ]
          },
          "radio": {
            "py/set": [
              "radio"
            ]
          },
          "red": {
            "py/set": [
              "red"
            ]
          },
          "screen protector": {
            "py/set": [
              "screen protector"
            ]
          },
          "silver": {
            "py/set": [
              "silver"
            ]
          },
          "store": {
            "py/set": [
              "store"
            ]
          },
          "tablets": {
            "py/set": [
              "tablets"
            ]
          },
          "tv": {
            "py/set": [
              "tv"
            ]
          },
          "unlimited plan": {
            "py/set": [
              "unlimited plan"
            ]
          },
          "voice plans": {
            "py/set": [
              "voice plans"
            ]
          },
          "web": {
            "py/set": [
              "web"
            ]
          },
          "white": {
            "py/set": [
              "white"
            ]
          },
          "xyz@yahoo.com": {
            "py/set": [
              "xyz@yahoo.com"
            ]
          },
          "default_factory": {
            "py/type": "builtins.set"
          }
        }
      },
      "dictionary_entities": [
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused8]",
          "tag_mask": "\u0937\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_id",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused9]",
          "tag_mask": "\u0937\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "account_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused10]",
          "tag_mask": "\u0937\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "city",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused11]",
          "tag_mask": "\u0937\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "state",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "CA": "CA",
              "FL": "FL",
              "GA": "GA",
              "IL": "IL",
              "MA": "MA",
              "MI": "MI",
              "NV": "NV",
              "NY": "NY",
              "WA": "WA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "CA": {
                "py/set": [
                  "CA"
                ]
              },
              "FL": {
                "py/set": [
                  "FL"
                ]
              },
              "GA": {
                "py/set": [
                  "GA"
                ]
              },
              "IL": {
                "py/set": [
                  "IL"
                ]
              },
              "MA": {
                "py/set": [
                  "MA"
                ]
              },
              "MI": {
                "py/set": [
                  "MI"
                ]
              },
              "NV": {
                "py/set": [
                  "NV"
                ]
              },
              "NY": {
                "py/set": [
                  "NY"
                ]
              },
              "WA": {
                "py/set": [
                  "WA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused12]",
          "tag_mask": "\u0937\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "country",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "USA": "USA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "USA": {
                "py/set": [
                  "USA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused13]",
          "tag_mask": "\u0937\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_registered",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 00:00:00": "2019-12-31 00:00:00"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 00:00:00": {
                "py/set": [
                  "2019-12-31 00:00:00"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.datetime_formatter.EntityDateTimeValueFormatter",
                "format_str": "%Y-%m-%d"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused14]",
          "tag_mask": "\u0937\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "preferred_channel1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "online": "online",
              "store": "store"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "online": {
                "py/set": [
                  "online"
                ]
              },
              "store": {
                "py/set": [
                  "store"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused15]",
          "tag_mask": "\u0937\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "interest1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB plan"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused16]",
          "tag_mask": "\u0937\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Chante Aceves \u00ca": "Chante Aceves \u00ca",
              "Devon Beckmann \u00ca": "Devon Beckmann \u00ca",
              "Doyle Jury \u00ca": "Doyle Jury \u00ca",
              "Elijah Laudenslager \u00ca": "Elijah Laudenslager \u00ca",
              "Essie Fetterman \u00ca": "Essie Fetterman \u00ca",
              "Frederica Ross \u00ca": "Frederica Ross \u00ca",
              "Jarred Wiers \u00ca": "Jarred Wiers \u00ca",
              "Jerica Schwartzman \u00ca": "Jerica Schwartzman \u00ca",
              "Josephine Riggie \u00ca": "Josephine Riggie \u00ca",
              "Judi Manigo \u00ca": "Judi Manigo \u00ca",
              "Keely Cheatam \u00ca": "Keely Cheatam \u00ca",
              "Lindsey Sullen \u00ca": "Lindsey Sullen \u00ca",
              "Lucila Byrns \u00ca": "Lucila Byrns \u00ca",
              "Nicholas Devera \u00ca": "Nicholas Devera \u00ca",
              "Osvaldo Winzer \u00ca": "Osvaldo Winzer \u00ca",
              "Stewart Foskey \u00ca": "Stewart Foskey \u00ca",
              "Susanne Mickles \u00ca": "Susanne Mickles \u00ca",
              "Trudy Meldrum \u00ca": "Trudy Meldrum \u00ca",
              "Willy Paulos \u00ca": "Willy Paulos \u00ca",
              "Yee Mcdougall \u00ca": "Yee Mcdougall \u00ca"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Chante Aceves \u00ca": {
                "py/set": [
                  "Chante Aceves \u00ca"
                ]
              },
              "Devon Beckmann \u00ca": {
                "py/set": [
                  "Devon Beckmann \u00ca"
                ]
              },
              "Doyle Jury \u00ca": {
                "py/set": [
                  "Doyle Jury \u00ca"
                ]
              },
              "Elijah Laudenslager \u00ca": {
                "py/set": [
                  "Elijah Laudenslager \u00ca"
                ]
              },
              "Essie Fetterman \u00ca": {
                "py/set": [
                  "Essie Fetterman \u00ca"
                ]
              },
              "Frederica Ross \u00ca": {
                "py/set": [
                  "Frederica Ross \u00ca"
                ]
              },
              "Jarred Wiers \u00ca": {
                "py/set": [
                  "Jarred Wiers \u00ca"
                ]
              },
              "Jerica Schwartzman \u00ca": {
                "py/set": [
                  "Jerica Schwartzman \u00ca"
                ]
              },
              "Josephine Riggie \u00ca": {
                "py/set": [
                  "Josephine Riggie \u00ca"
                ]
              },
              "Judi Manigo \u00ca": {
                "py/set": [
                  "Judi Manigo \u00ca"
                ]
              },
              "Keely Cheatam \u00ca": {
                "py/set": [
                  "Keely Cheatam \u00ca"
                ]
              },
              "Lindsey Sullen \u00ca": {
                "py/set": [
                  "Lindsey Sullen \u00ca"
                ]
              },
              "Lucila Byrns \u00ca": {
                "py/set": [
                  "Lucila Byrns \u00ca"
                ]
              },
              "Nicholas Devera \u00ca": {
                "py/set": [
                  "Nicholas Devera \u00ca"
                ]
              },
              "Osvaldo Winzer \u00ca": {
                "py/set": [
                  "Osvaldo Winzer \u00ca"
                ]
              },
              "Stewart Foskey \u00ca": {
                "py/set": [
                  "Stewart Foskey \u00ca"
                ]
              },
              "Susanne Mickles \u00ca": {
                "py/set": [
                  "Susanne Mickles \u00ca"
                ]
              },
              "Trudy Meldrum \u00ca": {
                "py/set": [
                  "Trudy Meldrum \u00ca"
                ]
              },
              "Willy Paulos \u00ca": {
                "py/set": [
                  "Willy Paulos \u00ca"
                ]
              },
              "Yee Mcdougall \u00ca": {
                "py/set": [
                  "Yee Mcdougall \u00ca"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused17]",
          "tag_mask": "\u0937\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "channel",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Email": "Email",
              "SEM": "SEM",
              "SEO": "SEO",
              "SMS": "SMS",
              "direct": "direct"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Email": {
                "py/set": [
                  "Email"
                ]
              },
              "SEM": {
                "py/set": [
                  "SEM"
                ]
              },
              "SEO": {
                "py/set": [
                  "SEO"
                ]
              },
              "SMS": {
                "py/set": [
                  "SMS"
                ]
              },
              "direct": {
                "py/set": [
                  "direct"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused18]",
          "tag_mask": "\u0937\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "phone_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "3000000000": "3000000000",
              "9999999999": "9999999999"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "3000000000": {
                "py/set": [
                  "3000000000"
                ]
              },
              "9999999999": {
                "py/set": [
                  "9999999999"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused19]",
          "tag_mask": "\u0937\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "email_address",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "abc@gmail.com": "abc@gmail.com",
              "pqrs@hotmail.com": "pqrs@hotmail.com",
              "xyz@yahoo.com": "xyz@yahoo.com"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "abc@gmail.com": {
                "py/set": [
                  "abc@gmail.com"
                ]
              },
              "pqrs@hotmail.com": {
                "py/set": [
                  "pqrs@hotmail.com"
                ]
              },
              "xyz@yahoo.com": {
                "py/set": [
                  "xyz@yahoo.com"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused20]",
          "tag_mask": "\u0937\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "Address1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "123 Primrose Rd": "123 Primrose Rd",
              "23 5th Avenue": "23 5th Avenue",
              "345 4th Street": "345 4th Street"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "123 Primrose Rd": {
                "py/set": [
                  "123 Primrose Rd"
                ]
              },
              "23 5th Avenue": {
                "py/set": [
                  "23 5th Avenue"
                ]
              },
              "345 4th Street": {
                "py/set": [
                  "345 4th Street"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused21]",
          "tag_mask": "\u0937\u0902"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "zipcode",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "5": "5"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "5": {
                "py/set": [
                  "5"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused22]",
          "tag_mask": "\u0937\u091f"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "10000": "10000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "10000": {
                "py/set": [
                  "10000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused23]",
          "tag_mask": "\u00ac\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 00:00:00": "2019-12-31 00:00:00"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 00:00:00": {
                "py/set": [
                  "2019-12-31 00:00:00"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.datetime_formatter.EntityDateTimeValueFormatter",
                "format_str": "%Y-%m-%d"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused24]",
          "tag_mask": "\u00ac\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "30": "30"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "30": {
                "py/set": [
                  "30"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused25]",
          "tag_mask": "\u00ac\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_of_the_week",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "7": "7"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "7": {
                "py/set": [
                  "7"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused26]",
          "tag_mask": "\u00ac\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Friday": "Friday",
              "Monday": "Monday",
              "Saturday": "Saturday",
              "Sunday": "Sunday",
              "Thursday": "Thursday",
              "Tuesday": "Tuesday",
              "Wednesday": "Wednesday"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Friday": {
                "py/set": [
                  "Friday"
                ]
              },
              "Monday": {
                "py/set": [
                  "Monday"
                ]
              },
              "Saturday": {
                "py/set": [
                  "Saturday"
                ]
              },
              "Sunday": {
                "py/set": [
                  "Sunday"
                ]
              },
              "Thursday": {
                "py/set": [
                  "Thursday"
                ]
              },
              "Tuesday": {
                "py/set": [
                  "Tuesday"
                ]
              },
              "Wednesday": {
                "py/set": [
                  "Wednesday"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused27]",
          "tag_mask": "\u00ac\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_of_the_year",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "365": "365"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "365": {
                "py/set": [
                  "365"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused28]",
          "tag_mask": "\u00ac\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "week_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "52": "52"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "52": {
                "py/set": [
                  "52"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused29]",
          "tag_mask": "\u00ac\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "month",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "12": "12"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "12": {
                "py/set": [
                  "12"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused30]",
          "tag_mask": "\u00ac\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "month_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "April": "April",
              "August": "August",
              "December": "December",
              "February": "February",
              "January": "January",
              "July": "July",
              "June": "June",
              "March": "March",
              "May": "May",
              "November": "November",
              "October": "October",
              "September": "September"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "April": {
                "py/set": [
                  "April"
                ]
              },
              "August": {
                "py/set": [
                  "August"
                ]
              },
              "December": {
                "py/set": [
                  "December"
                ]
              },
              "February": {
                "py/set": [
                  "February"
                ]
              },
              "January": {
                "py/set": [
                  "January"
                ]
              },
              "July": {
                "py/set": [
                  "July"
                ]
              },
              "June": {
                "py/set": [
                  "June"
                ]
              },
              "March": {
                "py/set": [
                  "March"
                ]
              },
              "May": {
                "py/set": [
                  "May"
                ]
              },
              "November": {
                "py/set": [
                  "November"
                ]
              },
              "October": {
                "py/set": [
                  "October"
                ]
              },
              "September": {
                "py/set": [
                  "September"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused31]",
          "tag_mask": "\u00ac\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "quarter",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "4": "4"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "4": {
                "py/set": [
                  "4"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused32]",
          "tag_mask": "\u00ac\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "year",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2017": "2017",
              "2019": "2019"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2017": {
                "py/set": [
                  "2017"
                ]
              },
              "2019": {
                "py/set": [
                  "2019"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused33]",
          "tag_mask": "\u00ac\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "week_day",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused34]",
          "tag_mask": "\u00ac\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "us_holiday",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused35]",
          "tag_mask": "\u00ac\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000": "1000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000": {
                "py/set": [
                  "1000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused36]",
          "tag_mask": "\u0941\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB": "10GB plan",
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB",
                  "10GB plan"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused37]",
          "tag_mask": "\u0941\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "description",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB plan"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused38]",
          "tag_mask": "\u0941\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "accessories": "accessories",
              "bundled plans": "bundled plans",
              "phone": "phone",
              "tablets": "tablets"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "accessories": {
                "py/set": [
                  "accessories"
                ]
              },
              "bundled plans": {
                "py/set": [
                  "bundled plans"
                ]
              },
              "phone": {
                "py/set": [
                  "phone"
                ]
              },
              "tablets": {
                "py/set": [
                  "tablets"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused39]",
          "tag_mask": "\u0941\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_category",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "devices": "devices",
              "internet": "internet",
              "voice plans": "voice plans"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "devices": {
                "py/set": [
                  "devices"
                ]
              },
              "internet": {
                "py/set": [
                  "internet"
                ]
              },
              "voice plans": {
                "py/set": [
                  "voice plans"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused40]",
          "tag_mask": "\u0941\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_price",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused41]",
          "tag_mask": "\u0941\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused42]",
          "tag_mask": "\u0941\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "color",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "black": "black",
              "gold": "gold",
              "red": "red",
              "silver": "silver",
              "white": "white"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "black": {
                "py/set": [
                  "black"
                ]
              },
              "gold": {
                "py/set": [
                  "gold"
                ]
              },
              "red": {
                "py/set": [
                  "red"
                ]
              },
              "silver": {
                "py/set": [
                  "silver"
                ]
              },
              "white": {
                "py/set": [
                  "white"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused43]",
          "tag_mask": "\u0941\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused44]",
          "tag_mask": "\u00a2\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Black Friday": "Black Friday",
              "Christmas": "Christmas",
              "July 4": "July 4",
              "Semi-annual": "Semi-annual",
              "Valentine": "Valentine",
              "Weekend": "Weekend"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Black Friday": {
                "py/set": [
                  "Black Friday"
                ]
              },
              "Christmas": {
                "py/set": [
                  "Christmas"
                ]
              },
              "July 4": {
                "py/set": [
                  "July 4"
                ]
              },
              "Semi-annual": {
                "py/set": [
                  "Semi-annual"
                ]
              },
              "Valentine": {
                "py/set": [
                  "Valentine"
                ]
              },
              "Weekend": {
                "py/set": [
                  "Weekend"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused45]",
          "tag_mask": "\u00a2\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "buy_one_get_one": "buy_one_get_one",
              "discount": "discount",
              "multiples": "multiples"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "buy_one_get_one": {
                "py/set": [
                  "buy_one_get_one"
                ]
              },
              "discount": {
                "py/set": [
                  "discount"
                ]
              },
              "multiples": {
                "py/set": [
                  "multiples"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused46]",
          "tag_mask": "\u00a2\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "ad_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "billboard": "billboard",
              "newspaper": "newspaper",
              "pamphlet": "pamphlet",
              "radio": "radio",
              "tv": "tv",
              "web": "web"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "billboard": {
                "py/set": [
                  "billboard"
                ]
              },
              "newspaper": {
                "py/set": [
                  "newspaper"
                ]
              },
              "pamphlet": {
                "py/set": [
                  "pamphlet"
                ]
              },
              "radio": {
                "py/set": [
                  "radio"
                ]
              },
              "tv": {
                "py/set": [
                  "tv"
                ]
              },
              "web": {
                "py/set": [
                  "web"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused47]",
          "tag_mask": "\u00a2\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "ad_media_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "ABC": "ABC",
              "CBS": "CBS",
              "Facebook": "Facebook",
              "Google ads": "Google ads",
              "HBO": "HBO",
              "LA time": "LA time",
              "NY times": "NY times",
              "Radio 92.3": "Radio 92.3"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "ABC": {
                "py/set": [
                  "ABC"
                ]
              },
              "CBS": {
                "py/set": [
                  "CBS"
                ]
              },
              "Facebook": {
                "py/set": [
                  "Facebook"
                ]
              },
              "Google ads": {
                "py/set": [
                  "Google ads"
                ]
              },
              "HBO": {
                "py/set": [
                  "HBO"
                ]
              },
              "LA time": {
                "py/set": [
                  "LA time"
                ]
              },
              "NY times": {
                "py/set": [
                  "NY times"
                ]
              },
              "Radio 92.3": {
                "py/set": [
                  "Radio 92.3"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused48]",
          "tag_mask": "\u00a2\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused49]",
          "tag_mask": "\u2202\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused50]",
          "tag_mask": "\u2202\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused51]",
          "tag_mask": "\u2202\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "online": "online",
              "physical": "physical"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "online": {
                "py/set": [
                  "online"
                ]
              },
              "physical": {
                "py/set": [
                  "physical"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused52]",
          "tag_mask": "\u2202\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "city",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused53]",
          "tag_mask": "\u2202\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "state",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "CA": "CA",
              "FL": "FL",
              "GA": "GA",
              "IL": "IL",
              "MA": "MA",
              "MI": "MI",
              "NV": "NV",
              "NY": "NY",
              "WA": "WA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "CA": {
                "py/set": [
                  "CA"
                ]
              },
              "FL": {
                "py/set": [
                  "FL"
                ]
              },
              "GA": {
                "py/set": [
                  "GA"
                ]
              },
              "IL": {
                "py/set": [
                  "IL"
                ]
              },
              "MA": {
                "py/set": [
                  "MA"
                ]
              },
              "MI": {
                "py/set": [
                  "MI"
                ]
              },
              "NV": {
                "py/set": [
                  "NV"
                ]
              },
              "NY": {
                "py/set": [
                  "NY"
                ]
              },
              "WA": {
                "py/set": [
                  "WA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused54]",
          "tag_mask": "\u2202\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "country",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "USA": "USA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "USA": {
                "py/set": [
                  "USA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused55]",
          "tag_mask": "\u2202\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "region",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Midwest": "Midwest",
              "Northeast": "Northeast",
              "South": "South",
              "West": "West"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Midwest": {
                "py/set": [
                  "Midwest"
                ]
              },
              "Northeast": {
                "py/set": [
                  "Northeast"
                ]
              },
              "South": {
                "py/set": [
                  "South"
                ]
              },
              "West": {
                "py/set": [
                  "West"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused56]",
          "tag_mask": "\u2202\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "zipcode",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "5": "5"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "5": {
                "py/set": [
                  "5"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused57]",
          "tag_mask": "\u2202\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "order_id",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused58]",
          "tag_mask": "\u0903\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "quantity",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100": "100"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100": {
                "py/set": [
                  "100"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused59]",
          "tag_mask": "\u0903\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_price",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused60]",
          "tag_mask": "\u0903\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused61]",
          "tag_mask": "\u0903\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_value",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused62]",
          "tag_mask": "\u0903\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused63]",
          "tag_mask": "\u0903\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "margin",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused64]",
          "tag_mask": "\u0903\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_timestamp",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 23:59:59": "2019-12-31 23:59:59"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 23:59:59": {
                "py/set": [
                  "2019-12-31 23:59:59"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused65]",
          "tag_mask": "\u0903\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "line_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000000": "1000000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000000": {
                "py/set": [
                  "1000000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused66]",
          "tag_mask": "\u0903\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "10000": "10000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "10000": {
                "py/set": [
                  "10000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused67]",
          "tag_mask": "\u0903\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused68]",
          "tag_mask": "\u0903\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000": "1000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000": {
                "py/set": [
                  "1000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused69]",
          "tag_mask": "\u0903\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused70]",
          "tag_mask": "\u0903\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused71]",
          "tag_mask": "\u0903\u0902"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "clearance_pricing",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused72]",
          "tag_mask": "\u0903\u091f"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "returning_customer",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused73]",
          "tag_mask": "\u0903\u03c3"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": null,
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": null,
          "tag": "[unused0]",
          "tag_mask": "\u0907\u03db"
        }
      ],
      "duckling": {
        "py/object": "indie.lexicon.duckling.duckling.Duckling",
        "service_base_url": "http://127.0.0.1:8000"
      },
      "gml": {
        "py/object": "indie.gml.parser.GmlParser",
        "_gml_data": {
          "created": {
            "py/object": "datetime.date",
            "__reduce__": [
              {
                "py/type": "datetime.date"
              },
              [
                "B+QGBQ=="
              ]
            ]
          },
          "model": {
            "created": "2020-01-22",
            "id": "retail_63",
            "name": "retail_63",
            "type": "gnn_bert",
            "updated": "2020-01-22",
            "url": "s3://got-it-ai-model-bucket/dev/retail_demo.tar.gz"
          },
          "organization_name": "gotitai",
          "query_generator": {
            "columns": [
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "customer_id",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "account_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "CA",
                  "MA",
                  "IL",
                  "WA",
                  "FL",
                  "NY",
                  "NV",
                  "MI",
                  "GA"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "USA"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date_registered",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/id": 470
                  },
                  {
                    "py/id": 471
                  }
                ],
                "rule": "date_range",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "preferred_channel1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "store",
                  "online"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "interest1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Trudy Meldrum \u00ca",
                  "Jarred Wiers \u00ca",
                  "Josephine Riggie \u00ca",
                  "Lindsey Sullen \u00ca",
                  "Judi Manigo \u00ca",
                  "Nicholas Devera \u00ca",
                  "Lucila Byrns \u00ca",
                  "Yee Mcdougall \u00ca",
                  "Devon Beckmann \u00ca",
                  "Essie Fetterman \u00ca",
                  "Doyle Jury \u00ca",
                  "Chante Aceves \u00ca",
                  "Keely Cheatam \u00ca",
                  "Frederica Ross \u00ca",
                  "Susanne Mickles \u00ca",
                  "Willy Paulos \u00ca",
                  "Osvaldo Winzer \u00ca",
                  "Jerica Schwartzman \u00ca",
                  "Stewart Foskey \u00ca",
                  "Elijah Laudenslager \u00ca"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "channel",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "SEM",
                  "SEO",
                  "Email",
                  "SMS",
                  "direct"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "phone_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  3000000000,
                  9999999999
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "email_address",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "abc@gmail.com",
                  "xyz@yahoo.com",
                  "pqrs@hotmail.com"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "Address1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "123 Primrose Rd",
                  "345 4th Street",
                  "23 5th Avenue"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "5"
                ],
                "rule": "int_rand",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  10000
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/object": "datetime.datetime",
                    "__reduce__": [
                      {
                        "py/type": "datetime.datetime"
                      },
                      [
                        "B98BAQAAAAAAAA=="
                      ]
                    ]
                  },
                  {
                    "py/id": 467
                  }
                ],
                "rule": "date_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  30
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_week",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  7
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                  "Sunday"
                ],
                "rule": "enum",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_year",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  365
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "week_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  52
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  12
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December"
                ],
                "rule": "enum",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quarter",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  4
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "year",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  2017,
                  2019
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "week_day",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "bool",
                "table": "dim_date",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "us_holiday",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "bool",
                "table": "dim_date",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "description",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "phone",
                  "tablets",
                  "bundled plans",
                  "accessories"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_category",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "devices",
                  "voice plans",
                  "internet"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "color",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "black",
                  "red",
                  "silver",
                  "white",
                  "gold"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_promotion",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Christmas",
                  "Valentine",
                  "Black Friday",
                  "July 4",
                  "Weekend",
                  "Semi-annual"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "discount",
                  "buy_one_get_one",
                  "multiples"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "newspaper",
                  "radio",
                  "web",
                  "billboard",
                  "pamphlet",
                  "tv"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_media_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "LA time",
                  "NY times",
                  "Radio 92.3",
                  "Facebook",
                  "Google ads",
                  "CBS",
                  "ABC",
                  "HBO"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_store",
                "where_operators": []
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "online",
                  "physical"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "CA",
                  "MA",
                  "IL",
                  "WA",
                  "FL",
                  "NY",
                  "NV",
                  "MI",
                  "GA"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "USA"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "region",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Northeast",
                  "West",
                  "Midwest",
                  "South"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "5"
                ],
                "rule": "int_rand",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "order_id",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quantity",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_value",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "margin",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "sales_timestamp",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/id": 466
                  },
                  {
                    "py/id": 468
                  }
                ],
                "rule": "datetime_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "line_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  10000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "clearance_pricing",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "boolean",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "returning_customer",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "boolean",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              }
            ],
            "distribution": [
              {
                "rule": {
                  "distribution": 0.4,
                  "name": "1 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.3,
                  "name": "2 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "3 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "select star"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "no join"
                },
                "type": "join"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "1 join"
                },
                "type": "join"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "no where"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.35,
                  "name": "1 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.35,
                  "name": "2 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "3 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.05,
                  "name": "orderby with limit"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.2,
                  "name": "orderby without limit"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.75,
                  "name": "no orderby"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "count"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "sum"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "avg"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "min"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "max"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "no agg"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.7,
                  "name": "no groupby"
                },
                "type": "groupby"
              },
              {
                "rule": {
                  "distribution": 0.3,
                  "name": "1 column"
                },
                "type": "groupby"
              }
            ],
            "joins": [
              {
                "join": "fact_product_sales.date_key:dim_date.date_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_date"
              },
              {
                "join": "fact_product_sales.product_key:dim_product.product_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_product"
              },
              {
                "join": "fact_product_sales.promotion_key:dim_promotion.promotion_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_promotion"
              },
              {
                "join": "fact_product_sales.store_key:dim_store.store_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_store"
              },
              {
                "join": "fact_product_sales.customer_key:dim_customer.customer_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_customer"
              }
            ]
          },
          "schema": {
            "id": "retail_63_with_joins",
            "name": "retail108_sandbox",
            "tables": [
              {
                "columns": [
                  {
                    "description": "Customer key",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Customer Id",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "unique",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_id",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Account number of the customer",
                    "friendly_name": "Account Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Account Number"
                    ],
                    "name": "account_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "City",
                    "friendly_name": "City",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "City"
                    ],
                    "name": "city",
                    "nullable": false,
                    "system_entity": "@sys.geo-city",
                    "type": "STRING"
                  },
                  {
                    "description": "State",
                    "friendly_name": "State",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "State"
                    ],
                    "name": "state",
                    "nullable": false,
                    "system_entity": "@sys.geo-state",
                    "type": "STRING"
                  },
                  {
                    "description": "Country",
                    "friendly_name": "Country",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Country"
                    ],
                    "name": "country",
                    "nullable": false,
                    "system_entity": "@sys.geo-country",
                    "type": "STRING"
                  },
                  {
                    "description": "date when the customer was registered",
                    "friendly_name": "Registered Date",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Registered Date"
                    ],
                    "name": "date_registered",
                    "nullable": false,
                    "type": "DATE"
                  },
                  {
                    "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                    "friendly_name": "Preferred Channel",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Preferred Channel"
                    ],
                    "name": "preferred_channel1",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                    "friendly_name": "Interest",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Interest"
                    ],
                    "name": "interest1",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Customer Name",
                    "friendly_name": "Customer Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Customer Name"
                    ],
                    "name": "name",
                    "nullable": false,
                    "system_entity": "@sys.person",
                    "type": "STRING"
                  },
                  {
                    "description": "Channel",
                    "friendly_name": "Channel",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Channel"
                    ],
                    "name": "channel",
                    "nullable": true,
                    "type": "STRING"
                  },
                  {
                    "description": "Phone number",
                    "friendly_name": "Phone number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Phone number"
                    ],
                    "name": "phone_number",
                    "nullable": true,
                    "system_entity": "@sys.phone-number",
                    "type": "INTEGER"
                  },
                  {
                    "description": "Email",
                    "friendly_name": "Email",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Email"
                    ],
                    "name": "email_address",
                    "nullable": true,
                    "system_entity": "@sys.email",
                    "type": "STRING"
                  },
                  {
                    "description": "Address",
                    "friendly_name": "Address",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Address"
                    ],
                    "name": "Address1",
                    "nullable": true,
                    "system_entity": "@sys.address",
                    "type": "STRING"
                  },
                  {
                    "description": "Zipcode",
                    "friendly_name": "Zipcode",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Zipcode"
                    ],
                    "name": "zipcode",
                    "nullable": true,
                    "system_entity": "@sys.zip-code",
                    "type": "INTEGER"
                  }
                ],
                "description": "",
                "name": "dim_customer"
              },
              {
                "columns": [
                  {
                    "description": "date key.",
                    "friendly_name": "Date ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Date ID"
                    ],
                    "name": "date_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "date (Example: 03/15/2019",
                    "friendly_name": "Date",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Date"
                    ],
                    "name": "date",
                    "nullable": false,
                    "type": "DATE"
                  },
                  {
                    "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                    "friendly_name": "Day",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day"
                    ],
                    "name": "day",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "day of week (1 = Sunday, 7 = Saturday)",
                    "friendly_name": "Day Of The Week",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Of The Week"
                    ],
                    "name": "day_of_the_week",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Name of the week day (Sunday, Monday...)",
                    "friendly_name": "Day Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Name"
                    ],
                    "name": "day_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Day of year (Example: 33 for Feb 2)",
                    "friendly_name": "Day Of The Year",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Of The Year"
                    ],
                    "name": "day_of_the_year",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Week of year (1 to 52)",
                    "friendly_name": "Week Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Week Number"
                    ],
                    "name": "week_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Month number (5 = May)",
                    "friendly_name": "Month Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Month Number"
                    ],
                    "name": "month",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Month name (January, February)",
                    "friendly_name": "Month",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Month"
                    ],
                    "name": "month_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Quarter of year",
                    "friendly_name": "Quarter",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Quarter"
                    ],
                    "name": "quarter",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Year",
                    "friendly_name": "Year",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Year"
                    ],
                    "name": "year",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                    "friendly_name": "Week Day",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Week Day"
                    ],
                    "name": "week_day",
                    "nullable": false,
                    "type": "BOOLEAN"
                  },
                  {
                    "description": "TRUE if it is a US Holiday. Otherwise False",
                    "friendly_name": "US Holiday",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "US Holiday"
                    ],
                    "name": "us_holiday",
                    "nullable": false,
                    "type": "BOOLEAN"
                  }
                ],
                "description": "",
                "name": "dim_date"
              },
              {
                "columns": [
                  {
                    "description": "product key",
                    "friendly_name": "Product ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product ID"
                    ],
                    "name": "product_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "product name",
                    "friendly_name": "Product Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Name"
                    ],
                    "name": "name",
                    "nullable": false,
                    "synonyms": {
                      "10GB": "10GB plan"
                    },
                    "type": "STRING"
                  },
                  {
                    "description": "Description of product",
                    "friendly_name": "Description",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Description"
                    ],
                    "name": "description",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "type of product",
                    "friendly_name": "Product Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Type"
                    ],
                    "name": "product_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "product category",
                    "friendly_name": "Product Category",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Category"
                    ],
                    "name": "product_category",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                    "friendly_name": "Unit Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Price"
                    ],
                    "name": "unit_price",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "unit cost of the product",
                    "friendly_name": "Unit Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Cost"
                    ],
                    "name": "unit_cost",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Color",
                    "friendly_name": "Color",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Color"
                    ],
                    "name": "color",
                    "nullable": false,
                    "type": "STRING"
                  }
                ],
                "description": "",
                "name": "dim_product"
              },
              {
                "columns": [
                  {
                    "description": "promotion key",
                    "friendly_name": "Promotion ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion ID"
                    ],
                    "name": "promotion_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "name of the promotion",
                    "friendly_name": "Promotion Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion Name"
                    ],
                    "name": "promotion_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Type of promotion",
                    "friendly_name": "Promotion Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion Type"
                    ],
                    "name": "promotion_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Ad Type",
                    "friendly_name": "Ad Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Ad Type"
                    ],
                    "name": "ad_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Ad Media Name",
                    "friendly_name": "Ad Media Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Ad Media Name"
                    ],
                    "name": "ad_media_name",
                    "nullable": false,
                    "type": "STRING"
                  }
                ],
                "description": "",
                "name": "dim_promotion"
              },
              {
                "columns": [
                  {
                    "description": "store key",
                    "friendly_name": "Store ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Store ID"
                    ],
                    "name": "store_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store number",
                    "friendly_name": "Store Number",
                    "is_enum": false,
                    "key_constraint": "unique",
                    "labels": [
                      "Store Number"
                    ],
                    "name": "store_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store name",
                    "friendly_name": "Store Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Store Name"
                    ],
                    "name": "store_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                    "friendly_name": "Store Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Store Type"
                    ],
                    "name": "store_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "City where store is located",
                    "friendly_name": "City",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "City"
                    ],
                    "name": "city",
                    "nullable": false,
                    "system_entity": "@sys.geo-city",
                    "type": "STRING"
                  },
                  {
                    "description": "State where store is located",
                    "friendly_name": "Sate",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Sate"
                    ],
                    "name": "state",
                    "nullable": false,
                    "system_entity": "@sys.geo-state",
                    "type": "STRING"
                  },
                  {
                    "description": "Country where store is located",
                    "friendly_name": "Country",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Country"
                    ],
                    "name": "country",
                    "nullable": false,
                    "system_entity": "@sys.geo-country",
                    "type": "STRING"
                  },
                  {
                    "description": "Region where store is located (East, West, North, Central...)",
                    "friendly_name": "Region",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Region"
                    ],
                    "name": "region",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Zipcode",
                    "friendly_name": "Zipcode",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Zipcode"
                    ],
                    "name": "zipcode",
                    "nullable": true,
                    "system_entity": "@sys.zip-code",
                    "type": "INTEGER"
                  }
                ],
                "description": "",
                "name": "dim_store"
              },
              {
                "columns": [
                  {
                    "description": "Order Id",
                    "friendly_name": "Order ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Order ID"
                    ],
                    "name": "order_id",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "number of items purchased",
                    "friendly_name": "Quantity",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Quantity"
                    ],
                    "name": "quantity",
                    "nullable": false,
                    "system_entity": "@sys.cardinal",
                    "type": "INTEGER"
                  },
                  {
                    "description": "unit price",
                    "friendly_name": "Unit Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Price"
                    ],
                    "name": "unit_price",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "unit cost",
                    "friendly_name": "Unit Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Cost"
                    ],
                    "name": "unit_cost",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "total sales ($)",
                    "friendly_name": "Total Sales",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Total Sales"
                    ],
                    "name": "sales_value",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "total cost ($)",
                    "friendly_name": "Total Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Total Cost"
                    ],
                    "name": "sales_cost",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "margin = total sales - total cost",
                    "friendly_name": "Margin",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Margin"
                    ],
                    "name": "margin",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "time of sale/order",
                    "friendly_name": "Time",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Time"
                    ],
                    "name": "sales_timestamp",
                    "nullable": false,
                    "type": "TIMESTAMP"
                  },
                  {
                    "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                    "friendly_name": "Line Item Number",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Line Item Number"
                    ],
                    "name": "line_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                    "friendly_name": "Date ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Date ID"
                    ],
                    "name": "date_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                    "friendly_name": "Product ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Product ID"
                    ],
                    "name": "product_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                    "friendly_name": "Store ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Store ID"
                    ],
                    "name": "store_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                    "friendly_name": "Promotion ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Promotion ID"
                    ],
                    "name": "promotion_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Clearance Price",
                    "friendly_name": "Clearance Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Clearance Price"
                    ],
                    "name": "clearance_pricing",
                    "nullable": false,
                    "type": "BOOLEAN"
                  },
                  {
                    "description": "Clearance Price",
                    "friendly_name": "Clearance Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Returning Customer"
                    ],
                    "name": "returning_customer",
                    "nullable": false,
                    "type": "BOOLEAN"
                  }
                ],
                "description": "",
                "name": "fact_product_sales"
              }
            ]
          },
          "updated": {
            "py/object": "datetime.date",
            "__reduce__": [
              {
                "py/type": "datetime.date"
              },
              [
                "B+QGBQ=="
              ]
            ]
          },
          "version": "1.1"
        },
        "tables": {
          "py/object": "collections.defaultdict",
          "dim_customer": {
            "Address1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 983
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "Address1",
                "description": "Address",
                "exclude_fields_in_where_if_false": {
                  "py/id": 984
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 985
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 986
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 987
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Address",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1425
                },
                "like_values": {
                  "py/id": 988
                },
                "name": "Address1",
                "nullable": true,
                "representative_values": {
                  "py/id": 989
                },
                "rule": "enum",
                "system_entity": "@sys.address",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 990
                }
              }
            },
            "account_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 895
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "account_number",
                "description": "Account number of the customer",
                "exclude_fields_in_where_if_false": {
                  "py/id": 896
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 897
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 898
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 899
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Account Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1414
                },
                "like_values": {
                  "py/id": 900
                },
                "name": "account_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 901
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 902
                }
              }
            },
            "channel": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 959
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "channel",
                "description": "Channel",
                "exclude_fields_in_where_if_false": {
                  "py/id": 960
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 961
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 962
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 963
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1422
                },
                "like_values": {
                  "py/id": 964
                },
                "name": "channel",
                "nullable": true,
                "representative_values": {
                  "py/id": 965
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 966
                }
              }
            },
            "city": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 903
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "description": "City",
                "exclude_fields_in_where_if_false": {
                  "py/id": 904
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 905
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 906
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 907
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1415
                },
                "like_values": {
                  "py/id": 908
                },
                "name": "city",
                "nullable": false,
                "representative_values": {
                  "py/id": 909
                },
                "rule": "enum",
                "system_entity": "@sys.geo-city",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 910
                }
              }
            },
            "country": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 919
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "description": "Country",
                "exclude_fields_in_where_if_false": {
                  "py/id": 920
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 921
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 922
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 923
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1417
                },
                "like_values": {
                  "py/id": 924
                },
                "name": "country",
                "nullable": false,
                "representative_values": {
                  "py/id": 925
                },
                "rule": "enum",
                "system_entity": "@sys.geo-country",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 926
                }
              }
            },
            "customer_id": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 887
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "customer_id",
                "description": "Customer Id",
                "exclude_fields_in_where_if_false": {
                  "py/id": 888
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 889
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 890
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 891
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": {
                  "py/id": 1413
                },
                "like_values": {
                  "py/id": 892
                },
                "name": "customer_id",
                "nullable": false,
                "representative_values": {
                  "py/id": 893
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 894
                }
              }
            },
            "customer_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 879
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "description": "Customer key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 880
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 881
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 882
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 883
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1412
                },
                "like_values": {
                  "py/id": 884
                },
                "name": "customer_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 885
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 886
                }
              }
            },
            "date_registered": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 927
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date_registered",
                "description": "date when the customer was registered",
                "exclude_fields_in_where_if_false": {
                  "py/id": 928
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 929
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 930
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 931
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Registered Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1418
                },
                "like_values": {
                  "py/id": 932
                },
                "name": "date_registered",
                "nullable": false,
                "representative_values": {
                  "py/id": 933
                },
                "rule": "date_range",
                "table": "dim_customer",
                "type": "DATE",
                "where_operators": {
                  "py/id": 934
                }
              }
            },
            "email_address": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 975
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "email_address",
                "description": "Email",
                "exclude_fields_in_where_if_false": {
                  "py/id": 976
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 977
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 978
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 979
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Email",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1424
                },
                "like_values": {
                  "py/id": 980
                },
                "name": "email_address",
                "nullable": true,
                "representative_values": {
                  "py/id": 981
                },
                "rule": "enum",
                "system_entity": "@sys.email",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 982
                }
              }
            },
            "interest1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 943
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "interest1",
                "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 944
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 945
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 946
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 947
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Interest",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1420
                },
                "like_values": {
                  "py/id": 948
                },
                "name": "interest1",
                "nullable": false,
                "representative_values": {
                  "py/id": 949
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 950
                }
              }
            },
            "name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 951
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "description": "Customer Name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 952
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 953
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 954
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 955
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1421
                },
                "like_values": {
                  "py/id": 956
                },
                "name": "name",
                "nullable": false,
                "representative_values": {
                  "py/id": 957
                },
                "rule": "enum",
                "system_entity": "@sys.person",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 958
                }
              }
            },
            "phone_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 967
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "phone_number",
                "description": "Phone number",
                "exclude_fields_in_where_if_false": {
                  "py/id": 968
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 969
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 970
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 971
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Phone number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1423
                },
                "like_values": {
                  "py/id": 972
                },
                "name": "phone_number",
                "nullable": true,
                "representative_values": {
                  "py/id": 973
                },
                "rule": "int_range",
                "system_entity": "@sys.phone-number",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 974
                }
              }
            },
            "preferred_channel1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 935
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "preferred_channel1",
                "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 936
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 937
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 938
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 939
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Preferred Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1419
                },
                "like_values": {
                  "py/id": 940
                },
                "name": "preferred_channel1",
                "nullable": false,
                "representative_values": {
                  "py/id": 941
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 942
                }
              }
            },
            "state": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 911
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "description": "State",
                "exclude_fields_in_where_if_false": {
                  "py/id": 912
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 913
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 914
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 915
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1416
                },
                "like_values": {
                  "py/id": 916
                },
                "name": "state",
                "nullable": false,
                "representative_values": {
                  "py/id": 917
                },
                "rule": "enum",
                "system_entity": "@sys.geo-state",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 918
                }
              }
            },
            "zipcode": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 991
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "description": "Zipcode",
                "exclude_fields_in_where_if_false": {
                  "py/id": 992
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 993
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 994
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 995
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1426
                },
                "like_values": {
                  "py/id": 996
                },
                "name": "zipcode",
                "nullable": true,
                "representative_values": {
                  "py/id": 997
                },
                "rule": "int_rand",
                "system_entity": "@sys.zip-code",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 998
                }
              }
            }
          },
          "dim_date": {
            "date": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1007
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date",
                "description": "date (Example: 03/15/2019",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1008
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1009
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1010
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1011
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1429
                },
                "like_values": {
                  "py/id": 1012
                },
                "name": "date",
                "nullable": false,
                "representative_values": {
                  "py/id": 1013
                },
                "rule": "date_range",
                "table": "dim_date",
                "type": "DATE",
                "where_operators": {
                  "py/id": 1015
                }
              }
            },
            "date_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 999
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "description": "date key.",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1000
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1001
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1002
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1003
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1428
                },
                "like_values": {
                  "py/id": 1004
                },
                "name": "date_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1005
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1006
                }
              }
            },
            "day": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1016
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day",
                "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1017
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1018
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1019
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1020
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1430
                },
                "like_values": {
                  "py/id": 1021
                },
                "name": "day",
                "nullable": false,
                "representative_values": {
                  "py/id": 1022
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1023
                }
              }
            },
            "day_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1032
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_name",
                "description": "Name of the week day (Sunday, Monday...)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1033
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1034
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1035
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1036
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1432
                },
                "like_values": {
                  "py/id": 1037
                },
                "name": "day_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1038
                },
                "rule": "enum",
                "table": "dim_date",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1039
                }
              }
            },
            "day_of_the_week": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1024
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_week",
                "description": "day of week (1 = Sunday, 7 = Saturday)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1025
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1026
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1027
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1028
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Of The Week",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1431
                },
                "like_values": {
                  "py/id": 1029
                },
                "name": "day_of_the_week",
                "nullable": false,
                "representative_values": {
                  "py/id": 1030
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1031
                }
              }
            },
            "day_of_the_year": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1040
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_year",
                "description": "Day of year (Example: 33 for Feb 2)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1041
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1042
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1043
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1044
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Of The Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1433
                },
                "like_values": {
                  "py/id": 1045
                },
                "name": "day_of_the_year",
                "nullable": false,
                "representative_values": {
                  "py/id": 1046
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1047
                }
              }
            },
            "month": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1056
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month",
                "description": "Month number (5 = May)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1057
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1058
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1059
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1060
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Month Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1435
                },
                "like_values": {
                  "py/id": 1061
                },
                "name": "month",
                "nullable": false,
                "representative_values": {
                  "py/id": 1062
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1063
                }
              }
            },
            "month_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1064
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month_name",
                "description": "Month name (January, February)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1065
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1066
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1067
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1068
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Month",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1436
                },
                "like_values": {
                  "py/id": 1069
                },
                "name": "month_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1070
                },
                "rule": "enum",
                "table": "dim_date",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1071
                }
              }
            },
            "quarter": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1072
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quarter",
                "description": "Quarter of year",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1073
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1074
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1075
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1076
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Quarter",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1437
                },
                "like_values": {
                  "py/id": 1077
                },
                "name": "quarter",
                "nullable": false,
                "representative_values": {
                  "py/id": 1078
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1079
                }
              }
            },
            "us_holiday": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1096
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "us_holiday",
                "description": "TRUE if it is a US Holiday. Otherwise False",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1097
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1098
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1099
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1100
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "US Holiday",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1440
                },
                "like_values": {
                  "py/id": 1101
                },
                "name": "us_holiday",
                "nullable": false,
                "representative_values": {
                  "py/id": 1102
                },
                "rule": "bool",
                "table": "dim_date",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1103
                }
              }
            },
            "week_day": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1088
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "week_day",
                "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1089
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1090
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1091
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1092
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Week Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1439
                },
                "like_values": {
                  "py/id": 1093
                },
                "name": "week_day",
                "nullable": false,
                "representative_values": {
                  "py/id": 1094
                },
                "rule": "bool",
                "table": "dim_date",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1095
                }
              }
            },
            "week_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1048
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "week_number",
                "description": "Week of year (1 to 52)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1049
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1050
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1051
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1052
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Week Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1434
                },
                "like_values": {
                  "py/id": 1053
                },
                "name": "week_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 1054
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1055
                }
              }
            },
            "year": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1080
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "year",
                "description": "Year",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1081
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1082
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1083
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1084
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1438
                },
                "like_values": {
                  "py/id": 1085
                },
                "name": "year",
                "nullable": false,
                "representative_values": {
                  "py/id": 1086
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1087
                }
              }
            }
          },
          "dim_product": {
            "color": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1160
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "color",
                "description": "Color",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1161
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1162
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1163
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1164
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Color",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1449
                },
                "like_values": {
                  "py/id": 1165
                },
                "name": "color",
                "nullable": false,
                "representative_values": {
                  "py/id": 1166
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1167
                }
              }
            },
            "description": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1120
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "description",
                "description": "Description of product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1121
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1122
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1123
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1124
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Description",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1444
                },
                "like_values": {
                  "py/id": 1125
                },
                "name": "description",
                "nullable": false,
                "representative_values": {
                  "py/id": 1126
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1127
                }
              }
            },
            "name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1112
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "description": "product name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1113
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1114
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1115
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1116
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1443
                },
                "like_values": {
                  "py/id": 1117
                },
                "name": "name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1118
                },
                "rule": "enum",
                "synonyms": {
                  "10GB": "10GB plan"
                },
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1119
                }
              }
            },
            "product_category": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1136
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_category",
                "description": "product category",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1137
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1138
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1139
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1140
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Category",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1446
                },
                "like_values": {
                  "py/id": 1141
                },
                "name": "product_category",
                "nullable": false,
                "representative_values": {
                  "py/id": 1142
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1143
                }
              }
            },
            "product_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1104
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "description": "product key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1105
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1106
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1107
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1108
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1442
                },
                "like_values": {
                  "py/id": 1109
                },
                "name": "product_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1110
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1111
                }
              }
            },
            "product_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1128
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_type",
                "description": "type of product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1129
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1130
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1131
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1132
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1445
                },
                "like_values": {
                  "py/id": 1133
                },
                "name": "product_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1134
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1135
                }
              }
            },
            "unit_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1152
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "description": "unit cost of the product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1153
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1154
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1155
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1156
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1448
                },
                "like_values": {
                  "py/id": 1157
                },
                "name": "unit_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1158
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1159
                }
              }
            },
            "unit_price": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1144
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1145
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1146
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1147
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1148
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1447
                },
                "like_values": {
                  "py/id": 1149
                },
                "name": "unit_price",
                "nullable": false,
                "representative_values": {
                  "py/id": 1150
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1151
                }
              }
            }
          },
          "dim_promotion": {
            "ad_media_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1200
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_media_name",
                "description": "Ad Media Name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1201
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1202
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1203
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1204
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Ad Media Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1455
                },
                "like_values": {
                  "py/id": 1205
                },
                "name": "ad_media_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1206
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1207
                }
              }
            },
            "ad_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1192
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_type",
                "description": "Ad Type",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1193
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1194
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1195
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1196
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Ad Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1454
                },
                "like_values": {
                  "py/id": 1197
                },
                "name": "ad_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1198
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1199
                }
              }
            },
            "promotion_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1168
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "description": "promotion key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1169
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1170
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1171
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1172
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1451
                },
                "like_values": {
                  "py/id": 1173
                },
                "name": "promotion_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1174
                },
                "rule": "int_range",
                "table": "dim_promotion",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1175
                }
              }
            },
            "promotion_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1176
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_name",
                "description": "name of the promotion",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1177
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1178
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1179
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1180
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1452
                },
                "like_values": {
                  "py/id": 1181
                },
                "name": "promotion_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1182
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1183
                }
              }
            },
            "promotion_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1184
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_type",
                "description": "Type of promotion",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1185
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1186
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1187
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1188
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1453
                },
                "like_values": {
                  "py/id": 1189
                },
                "name": "promotion_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1190
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1191
                }
              }
            }
          },
          "dim_store": {
            "city": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1240
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "description": "City where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1241
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1242
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1243
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1244
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1461
                },
                "like_values": {
                  "py/id": 1245
                },
                "name": "city",
                "nullable": false,
                "representative_values": {
                  "py/id": 1246
                },
                "rule": "enum",
                "system_entity": "@sys.geo-city",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1247
                }
              }
            },
            "country": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1256
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "description": "Country where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1257
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1258
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1259
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1260
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1463
                },
                "like_values": {
                  "py/id": 1261
                },
                "name": "country",
                "nullable": false,
                "representative_values": {
                  "py/id": 1262
                },
                "rule": "enum",
                "system_entity": "@sys.geo-country",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1263
                }
              }
            },
            "region": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1264
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "region",
                "description": "Region where store is located (East, West, North, Central...)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1265
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1266
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1267
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1268
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Region",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1464
                },
                "like_values": {
                  "py/id": 1269
                },
                "name": "region",
                "nullable": false,
                "representative_values": {
                  "py/id": 1270
                },
                "rule": "enum",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1271
                }
              }
            },
            "state": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1248
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "description": "State where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1249
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1250
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1251
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1252
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Sate",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1462
                },
                "like_values": {
                  "py/id": 1253
                },
                "name": "state",
                "nullable": false,
                "representative_values": {
                  "py/id": 1254
                },
                "rule": "enum",
                "system_entity": "@sys.geo-state",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1255
                }
              }
            },
            "store_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1208
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "description": "store key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1209
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1210
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1211
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1212
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1457
                },
                "like_values": {
                  "py/id": 1213
                },
                "name": "store_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1214
                },
                "rule": "int_range",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1215
                }
              }
            },
            "store_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1224
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_name",
                "description": "store name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1225
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1226
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1227
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1228
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1459
                },
                "like_values": {
                  "py/id": 1229
                },
                "name": "store_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1230
                },
                "rule": "enum",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1231
                }
              }
            },
            "store_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1216
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_number",
                "description": "store number",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1217
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1218
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1219
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1220
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Number",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": {
                  "py/id": 1458
                },
                "like_values": {
                  "py/id": 1221
                },
                "name": "store_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 1222
                },
                "rule": "int_range",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1223
                }
              }
            },
            "store_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1232
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_type",
                "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1233
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1234
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1235
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1236
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1460
                },
                "like_values": {
                  "py/id": 1237
                },
                "name": "store_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1238
                },
                "rule": "enum",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1239
                }
              }
            },
            "zipcode": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1272
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "description": "Zipcode",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1273
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1274
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1275
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1276
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1465
                },
                "like_values": {
                  "py/id": 1277
                },
                "name": "zipcode",
                "nullable": true,
                "representative_values": {
                  "py/id": 1278
                },
                "rule": "int_rand",
                "system_entity": "@sys.zip-code",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1279
                }
              }
            }
          },
          "fact_product_sales": {
            "clearance_pricing": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1392
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "clearance_pricing",
                "description": "Clearance Price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1393
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1394
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1395
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1396
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1481
                },
                "like_values": {
                  "py/id": 1397
                },
                "name": "clearance_pricing",
                "nullable": false,
                "representative_values": {
                  "py/id": 1398
                },
                "rule": "boolean",
                "table": "fact_product_sales",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1399
                }
              }
            },
            "customer_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1360
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1361
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1362
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1363
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1364
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1477
                },
                "like_values": {
                  "py/id": 1365
                },
                "name": "customer_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1366
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1367
                }
              }
            },
            "date_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1352
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1353
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1354
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1355
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1356
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1476
                },
                "like_values": {
                  "py/id": 1357
                },
                "name": "date_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1358
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1359
                }
              }
            },
            "line_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1344
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "line_number",
                "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1345
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1346
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1347
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1348
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Line Item Number",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1475
                },
                "like_values": {
                  "py/id": 1349
                },
                "name": "line_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 1350
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1351
                }
              }
            },
            "margin": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1328
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "margin",
                "description": "margin = total sales - total cost",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1329
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1330
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1331
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1332
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Margin",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1473
                },
                "like_values": {
                  "py/id": 1333
                },
                "name": "margin",
                "nullable": false,
                "representative_values": {
                  "py/id": 1334
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1335
                }
              }
            },
            "order_id": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1280
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "order_id",
                "description": "Order Id",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1281
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1282
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1283
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1284
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Order ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1467
                },
                "like_values": {
                  "py/id": 1285
                },
                "name": "order_id",
                "nullable": false,
                "representative_values": {
                  "py/id": 1286
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1287
                }
              }
            },
            "product_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1368
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1369
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1370
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1371
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1372
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1478
                },
                "like_values": {
                  "py/id": 1373
                },
                "name": "product_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1374
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1375
                }
              }
            },
            "promotion_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1384
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1385
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1386
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1387
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1388
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1480
                },
                "like_values": {
                  "py/id": 1389
                },
                "name": "promotion_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1390
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1391
                }
              }
            },
            "quantity": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1288
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quantity",
                "description": "number of items purchased",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1289
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1290
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1291
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1292
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Quantity",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1468
                },
                "like_values": {
                  "py/id": 1293
                },
                "name": "quantity",
                "nullable": false,
                "representative_values": {
                  "py/id": 1294
                },
                "rule": "int_range",
                "system_entity": "@sys.cardinal",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1295
                }
              }
            },
            "returning_customer": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1400
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "returning_customer",
                "description": "Clearance Price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1401
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1402
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1403
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1404
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1482
                },
                "like_values": {
                  "py/id": 1405
                },
                "name": "returning_customer",
                "nullable": false,
                "representative_values": {
                  "py/id": 1406
                },
                "rule": "boolean",
                "table": "fact_product_sales",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1407
                }
              }
            },
            "sales_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1320
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_cost",
                "description": "total cost ($)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1321
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1322
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1323
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1324
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Total Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1472
                },
                "like_values": {
                  "py/id": 1325
                },
                "name": "sales_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1326
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1327
                }
              }
            },
            "sales_timestamp": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1336
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "sales_timestamp",
                "description": "time of sale/order",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1337
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1338
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1339
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1340
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Time",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1474
                },
                "like_values": {
                  "py/id": 1341
                },
                "name": "sales_timestamp",
                "nullable": false,
                "representative_values": {
                  "py/id": 1342
                },
                "rule": "datetime_range",
                "table": "fact_product_sales",
                "type": "TIMESTAMP",
                "where_operators": {
                  "py/id": 1343
                }
              }
            },
            "sales_value": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1312
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_value",
                "description": "total sales ($)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1313
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1314
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1315
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1316
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Total Sales",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1471
                },
                "like_values": {
                  "py/id": 1317
                },
                "name": "sales_value",
                "nullable": false,
                "representative_values": {
                  "py/id": 1318
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1319
                }
              }
            },
            "store_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1376
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1377
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1378
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1379
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1380
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1479
                },
                "like_values": {
                  "py/id": 1381
                },
                "name": "store_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1382
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1383
                }
              }
            },
            "unit_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1304
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "description": "unit cost",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1305
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1306
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1307
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1308
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1470
                },
                "like_values": {
                  "py/id": 1309
                },
                "name": "unit_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1310
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1311
                }
              }
            },
            "unit_price": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1296
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "description": "unit price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1297
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1298
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1299
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1300
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1469
                },
                "like_values": {
                  "py/id": 1301
                },
                "name": "unit_price",
                "nullable": false,
                "representative_values": {
                  "py/id": 1302
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1303
                }
              }
            }
          },
          "default_factory": {
            "py/type": "builtins.dict"
          }
        }
      },
      "schema": {
        "id": "retail_63_with_joins",
        "name": "retail108_sandbox",
        "tables": [
          {
            "columns": [
              {
                "description": "Customer key",
                "entity_format_pipeline": {
                  "py/id": 476
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Customer Id",
                "entity_format_pipeline": {
                  "py/id": 482
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_id",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Account number of the customer",
                "entity_format_pipeline": {
                  "py/id": 488
                },
                "friendly_name": "Account Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Account Number"
                ],
                "name": "account_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "City",
                "entity_format_pipeline": {
                  "py/id": 494
                },
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "City"
                ],
                "name": "city",
                "nullable": false,
                "system_entity": "@sys.geo-city",
                "type": "STRING"
              },
              {
                "description": "State",
                "entity_format_pipeline": {
                  "py/id": 500
                },
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "State"
                ],
                "name": "state",
                "nullable": false,
                "system_entity": "@sys.geo-state",
                "type": "STRING"
              },
              {
                "description": "Country",
                "entity_format_pipeline": {
                  "py/id": 506
                },
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Country"
                ],
                "name": "country",
                "nullable": false,
                "system_entity": "@sys.geo-country",
                "type": "STRING"
              },
              {
                "description": "date when the customer was registered",
                "entity_format_pipeline": {
                  "py/id": 512
                },
                "friendly_name": "Registered Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Registered Date"
                ],
                "name": "date_registered",
                "nullable": false,
                "type": "DATE"
              },
              {
                "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                "entity_format_pipeline": {
                  "py/id": 518
                },
                "friendly_name": "Preferred Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Preferred Channel"
                ],
                "name": "preferred_channel1",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                "entity_format_pipeline": {
                  "py/id": 524
                },
                "friendly_name": "Interest",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Interest"
                ],
                "name": "interest1",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Customer Name",
                "entity_format_pipeline": {
                  "py/id": 530
                },
                "friendly_name": "Customer Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Customer Name"
                ],
                "name": "name",
                "nullable": false,
                "system_entity": "@sys.person",
                "type": "STRING"
              },
              {
                "description": "Channel",
                "entity_format_pipeline": {
                  "py/id": 536
                },
                "friendly_name": "Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Channel"
                ],
                "name": "channel",
                "nullable": true,
                "type": "STRING"
              },
              {
                "description": "Phone number",
                "entity_format_pipeline": {
                  "py/id": 542
                },
                "friendly_name": "Phone number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Phone number"
                ],
                "name": "phone_number",
                "nullable": true,
                "system_entity": "@sys.phone-number",
                "type": "INTEGER"
              },
              {
                "description": "Email",
                "entity_format_pipeline": {
                  "py/id": 548
                },
                "friendly_name": "Email",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Email"
                ],
                "name": "email_address",
                "nullable": true,
                "system_entity": "@sys.email",
                "type": "STRING"
              },
              {
                "description": "Address",
                "entity_format_pipeline": {
                  "py/id": 554
                },
                "friendly_name": "Address",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Address"
                ],
                "name": "Address1",
                "nullable": true,
                "system_entity": "@sys.address",
                "type": "STRING"
              },
              {
                "description": "Zipcode",
                "entity_format_pipeline": {
                  "py/id": 560
                },
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Zipcode"
                ],
                "name": "zipcode",
                "nullable": true,
                "system_entity": "@sys.zip-code",
                "type": "INTEGER"
              }
            ],
            "description": "",
            "name": "dim_customer"
          },
          {
            "columns": [
              {
                "description": "date key.",
                "entity_format_pipeline": {
                  "py/id": 566
                },
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Date ID"
                ],
                "name": "date_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "date (Example: 03/15/2019",
                "entity_format_pipeline": {
                  "py/id": 572
                },
                "friendly_name": "Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Date"
                ],
                "name": "date",
                "nullable": false,
                "type": "DATE"
              },
              {
                "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                "entity_format_pipeline": {
                  "py/id": 578
                },
                "friendly_name": "Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day"
                ],
                "name": "day",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "day of week (1 = Sunday, 7 = Saturday)",
                "entity_format_pipeline": {
                  "py/id": 584
                },
                "friendly_name": "Day Of The Week",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Of The Week"
                ],
                "name": "day_of_the_week",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Name of the week day (Sunday, Monday...)",
                "entity_format_pipeline": {
                  "py/id": 590
                },
                "friendly_name": "Day Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Name"
                ],
                "name": "day_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Day of year (Example: 33 for Feb 2)",
                "entity_format_pipeline": {
                  "py/id": 596
                },
                "friendly_name": "Day Of The Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Of The Year"
                ],
                "name": "day_of_the_year",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Week of year (1 to 52)",
                "entity_format_pipeline": {
                  "py/id": 602
                },
                "friendly_name": "Week Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Week Number"
                ],
                "name": "week_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Month number (5 = May)",
                "entity_format_pipeline": {
                  "py/id": 608
                },
                "friendly_name": "Month Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Month Number"
                ],
                "name": "month",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Month name (January, February)",
                "entity_format_pipeline": {
                  "py/id": 614
                },
                "friendly_name": "Month",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Month"
                ],
                "name": "month_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Quarter of year",
                "entity_format_pipeline": {
                  "py/id": 620
                },
                "friendly_name": "Quarter",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Quarter"
                ],
                "name": "quarter",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Year",
                "entity_format_pipeline": {
                  "py/id": 626
                },
                "friendly_name": "Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Year"
                ],
                "name": "year",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                "entity_format_pipeline": {
                  "py/id": 632
                },
                "friendly_name": "Week Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Week Day"
                ],
                "name": "week_day",
                "nullable": false,
                "type": "BOOLEAN"
              },
              {
                "description": "TRUE if it is a US Holiday. Otherwise False",
                "entity_format_pipeline": {
                  "py/id": 638
                },
                "friendly_name": "US Holiday",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "US Holiday"
                ],
                "name": "us_holiday",
                "nullable": false,
                "type": "BOOLEAN"
              }
            ],
            "description": "",
            "name": "dim_date"
          },
          {
            "columns": [
              {
                "description": "product key",
                "entity_format_pipeline": {
                  "py/id": 644
                },
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product ID"
                ],
                "name": "product_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "product name",
                "entity_format_pipeline": {
                  "py/id": 650
                },
                "friendly_name": "Product Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Name"
                ],
                "name": "name",
                "nullable": false,
                "synonyms": {
                  "10GB": "10GB plan",
                  "10GB plan": "10GB plan",
                  "earphones": "earphones",
                  "family plan": "family plan",
                  "ipad": "ipad",
                  "ipad pro": "ipad pro",
                  "iphone 11": "iphone 11",
                  "iphone 11 pro": "iphone 11 pro",
                  "iphone 7": "iphone 7",
                  "iphone 8": "iphone 8",
                  "iphone XS": "iphone XS",
                  "iphone cover": "iphone cover",
                  "screen protector": "screen protector",
                  "unlimited plan": "unlimited plan"
                },
                "type": "STRING"
              },
              {
                "description": "Description of product",
                "entity_format_pipeline": {
                  "py/id": 656
                },
                "friendly_name": "Description",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Description"
                ],
                "name": "description",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "type of product",
                "entity_format_pipeline": {
                  "py/id": 662
                },
                "friendly_name": "Product Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Type"
                ],
                "name": "product_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "product category",
                "entity_format_pipeline": {
                  "py/id": 668
                },
                "friendly_name": "Product Category",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Category"
                ],
                "name": "product_category",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                "entity_format_pipeline": {
                  "py/id": 674
                },
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Price"
                ],
                "name": "unit_price",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "unit cost of the product",
                "entity_format_pipeline": {
                  "py/id": 680
                },
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Cost"
                ],
                "name": "unit_cost",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Color",
                "entity_format_pipeline": {
                  "py/id": 686
                },
                "friendly_name": "Color",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Color"
                ],
                "name": "color",
                "nullable": false,
                "type": "STRING"
              }
            ],
            "description": "",
            "name": "dim_product"
          },
          {
            "columns": [
              {
                "description": "promotion key",
                "entity_format_pipeline": {
                  "py/id": 692
                },
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion ID"
                ],
                "name": "promotion_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "name of the promotion",
                "entity_format_pipeline": {
                  "py/id": 698
                },
                "friendly_name": "Promotion Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion Name"
                ],
                "name": "promotion_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Type of promotion",
                "entity_format_pipeline": {
                  "py/id": 704
                },
                "friendly_name": "Promotion Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion Type"
                ],
                "name": "promotion_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Ad Type",
                "entity_format_pipeline": {
                  "py/id": 710
                },
                "friendly_name": "Ad Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Ad Type"
                ],
                "name": "ad_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Ad Media Name",
                "entity_format_pipeline": {
                  "py/id": 716
                },
                "friendly_name": "Ad Media Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Ad Media Name"
                ],
                "name": "ad_media_name",
                "nullable": false,
                "type": "STRING"
              }
            ],
            "description": "",
            "name": "dim_promotion"
          },
          {
            "columns": [
              {
                "description": "store key",
                "entity_format_pipeline": {
                  "py/id": 722
                },
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Store ID"
                ],
                "name": "store_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store number",
                "entity_format_pipeline": {
                  "py/id": 728
                },
                "friendly_name": "Store Number",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": [
                  "Store Number"
                ],
                "name": "store_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store name",
                "entity_format_pipeline": {
                  "py/id": 734
                },
                "friendly_name": "Store Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Store Name"
                ],
                "name": "store_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                "entity_format_pipeline": {
                  "py/id": 740
                },
                "friendly_name": "Store Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Store Type"
                ],
                "name": "store_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "City where store is located",
                "entity_format_pipeline": {
                  "py/id": 746
                },
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "City"
                ],
                "name": "city",
                "nullable": false,
                "system_entity": "@sys.geo-city",
                "type": "STRING"
              },
              {
                "description": "State where store is located",
                "entity_format_pipeline": {
                  "py/id": 752
                },
                "friendly_name": "Sate",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Sate"
                ],
                "name": "state",
                "nullable": false,
                "system_entity": "@sys.geo-state",
                "type": "STRING"
              },
              {
                "description": "Country where store is located",
                "entity_format_pipeline": {
                  "py/id": 758
                },
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Country"
                ],
                "name": "country",
                "nullable": false,
                "system_entity": "@sys.geo-country",
                "type": "STRING"
              },
              {
                "description": "Region where store is located (East, West, North, Central...)",
                "entity_format_pipeline": {
                  "py/id": 764
                },
                "friendly_name": "Region",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Region"
                ],
                "name": "region",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Zipcode",
                "entity_format_pipeline": {
                  "py/id": 770
                },
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Zipcode"
                ],
                "name": "zipcode",
                "nullable": true,
                "system_entity": "@sys.zip-code",
                "type": "INTEGER"
              }
            ],
            "description": "",
            "name": "dim_store"
          },
          {
            "columns": [
              {
                "description": "Order Id",
                "entity_format_pipeline": {
                  "py/id": 776
                },
                "friendly_name": "Order ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Order ID"
                ],
                "name": "order_id",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "number of items purchased",
                "entity_format_pipeline": {
                  "py/id": 782
                },
                "friendly_name": "Quantity",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Quantity"
                ],
                "name": "quantity",
                "nullable": false,
                "system_entity": "@sys.cardinal",
                "type": "INTEGER"
              },
              {
                "description": "unit price",
                "entity_format_pipeline": {
                  "py/id": 788
                },
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Price"
                ],
                "name": "unit_price",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "unit cost",
                "entity_format_pipeline": {
                  "py/id": 794
                },
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Cost"
                ],
                "name": "unit_cost",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "total sales ($)",
                "entity_format_pipeline": {
                  "py/id": 800
                },
                "friendly_name": "Total Sales",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Total Sales"
                ],
                "name": "sales_value",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "total cost ($)",
                "entity_format_pipeline": {
                  "py/id": 806
                },
                "friendly_name": "Total Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Total Cost"
                ],
                "name": "sales_cost",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "margin = total sales - total cost",
                "entity_format_pipeline": {
                  "py/id": 812
                },
                "friendly_name": "Margin",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Margin"
                ],
                "name": "margin",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "time of sale/order",
                "entity_format_pipeline": {
                  "py/id": 818
                },
                "friendly_name": "Time",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Time"
                ],
                "name": "sales_timestamp",
                "nullable": false,
                "type": "TIMESTAMP"
              },
              {
                "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                "entity_format_pipeline": {
                  "py/id": 824
                },
                "friendly_name": "Line Item Number",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Line Item Number"
                ],
                "name": "line_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                "entity_format_pipeline": {
                  "py/id": 830
                },
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Date ID"
                ],
                "name": "date_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                "entity_format_pipeline": {
                  "py/id": 836
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                "entity_format_pipeline": {
                  "py/id": 842
                },
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Product ID"
                ],
                "name": "product_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                "entity_format_pipeline": {
                  "py/id": 848
                },
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Store ID"
                ],
                "name": "store_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                "entity_format_pipeline": {
                  "py/id": 854
                },
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Promotion ID"
                ],
                "name": "promotion_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Clearance Price",
                "entity_format_pipeline": {
                  "py/id": 860
                },
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Clearance Price"
                ],
                "name": "clearance_pricing",
                "nullable": false,
                "type": "BOOLEAN"
              },
              {
                "description": "Clearance Price",
                "entity_format_pipeline": {
                  "py/id": 866
                },
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Returning Customer"
                ],
                "name": "returning_customer",
                "nullable": false,
                "type": "BOOLEAN"
              }
            ],
            "description": "",
            "name": "fact_product_sales"
          }
        ]
      },
      "system_entity": {
        "py/object": "indie.lexicon.entities.system_entity.SystemEntity",
        "_SystemEntity__node_processor": {
          "py/object": "indie.lexicon.entities.node_processors.NodeProcessor",
          "dimension_to_processor": {
            "amount-of-money": {
              "py/object": "indie.lexicon.entities.node_processors.amount_of_money.AmountOfMoneyProcessor",
              "preprocessed_formats": [
                {
                  "expected_format": " less than ",
                  "pattern": " cheaper than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " more expensive than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " lower than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " higher than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " fewer than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " greater than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " smaller than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " bigger than "
                },
                {
                  "expected_format": " in ",
                  "pattern": "( in (?!(the year of )))"
                }
              ]
            },
            "number": {
              "py/object": "indie.lexicon.entities.node_processors.number.NumberProcessor",
              "preprocessed_formats": [
                {
                  "pattern": "((^| )(\"[^\"]+\")|(\"[^\"]+\")/\\b)",
                  "removed_characters": [
                    "\""
                  ]
                },
                {
                  "pattern": "((^| )('[^']+')|('[^']+')/\\b)",
                  "removed_characters": [
                    "'"
                  ]
                },
                {
                  "pattern": "(\\d+( ?)'s)",
                  "removed_characters": [
                    "'s"
                  ]
                }
              ]
            },
            "time": {
              "py/object": "indie.lexicon.entities.node_processors.datetime.DatetimeProcessor",
              "preprocessed_formats": [
                {
                  "datetime_format": "%d-%m-%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(-)(((0)?[1-9])|((1)[0-2]))(-)\\d{4})"
                },
                {
                  "datetime_format": "%d/%m/%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(/)(((0)?[1-9])|((1)[0-2]))(/)\\d{4})"
                },
                {
                  "datetime_format": "%m-%d-%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1])(-)\\d{4})"
                },
                {
                  "datetime_format": "%m/%d/%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1])(/)\\d{4})"
                },
                {
                  "datetime_format": "%Y-%d-%m",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(-)((1)[3-9]|(2)[0-9]|(3)[0-1])(-)((0?)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "%Y/%d/%m",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(/)((1)[3-9]|(2)[0-9]|(3)[0-1])(/)((0?)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "%Y-%m-%d",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(-)((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1]))"
                },
                {
                  "datetime_format": "%Y/%m/%d",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(/)((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1]))"
                },
                {
                  "datetime_format": "%d-%m-%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(-)(((0)?[1-9])|((1)[0-2]))(-)\\d{2})"
                },
                {
                  "datetime_format": "%d/%m/%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(/)(((0)?[1-9])|((1)[0-2]))(/)\\d{2})"
                },
                {
                  "datetime_format": "%m-%d-%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1])(-)\\d{2})"
                },
                {
                  "datetime_format": "%m/%d/%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1])(/)\\d{2})"
                },
                {
                  "datetime_format": "%d %b,%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec),\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B,%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember),\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %b %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec) \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember) \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %b, %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec), \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B, %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember), \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%b'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)'\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%B'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember)'\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%b'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec) '\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%B '%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember) '\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": " %m-%Y",
                  "expected_format": " %b %Y",
                  "pattern": "( ((0?)[1-9]|((1)[0-2]))(-)\\d{4})"
                },
                {
                  "datetime_format": " %m/%Y",
                  "expected_format": " %b %Y",
                  "pattern": "( ((0?)[1-9]|((1)[0-2]))(/)\\d{4})"
                },
                {
                  "datetime_format": " %Y-%m",
                  "expected_format": " %b %Y",
                  "pattern": "( \\d{4}(-)((0)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": " %Y/%m",
                  "expected_format": " %b %Y",
                  "pattern": "( \\d{4}(/)((0)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "quarter %m",
                  "expected_format": "%mth quarter",
                  "pattern": "(quarter [1-4])"
                },
                {
                  "datetime_format": "Q%m",
                  "expected_format": "%mth quarter",
                  "pattern": "(Q[1-4])"
                },
                {
                  "expected_format": " at the ",
                  "pattern": "( at (?!(the )))"
                },
                {
                  "expected_format": "today",
                  "pattern": "the current date"
                },
                {
                  "expected_format": "today",
                  "pattern": "((C|c)urrent date)"
                },
                {
                  "expected_format": "from ",
                  "pattern": "((S|s)ince )"
                }
              ]
            }
          }
        },
        "duckling": {
          "py/id": 875
        }
      }
    }
  },
  "lexicon": {
    "py/id": 464
  },
  "slot_id_to_slot_index": {
    "InDiE.slot.dim_customer.email_address.eq0001": 8,
    "InDiE.slot.dim_customer.name.eq0001": 6,
    "InDiE.slot.dim_product.name.eq0001": 1,
    "InDiE.slot.dim_product.product_category.eq0001": 2,
    "InDiE.slot.dim_promotion.promotion_name.eq0001": 4,
    "InDiE.slot.dim_store.city.eq0001": 3,
    "InDiE.slot.fact_product_sales.order_id.eq0001": 9,
    "InDiE.slot.generic0001": 5,
    "InDiE.slot.generic0002": 7
  },
  "slot_index_to_slot_id": {
    "1": "InDiE.slot.dim_product.name.eq0001",
    "2": "InDiE.slot.dim_product.product_category.eq0001",
    "3": "InDiE.slot.dim_store.city.eq0001",
    "4": "InDiE.slot.dim_promotion.promotion_name.eq0001",
    "5": "InDiE.slot.generic0001",
    "6": "InDiE.slot.dim_customer.name.eq0001",
    "7": "InDiE.slot.generic0002",
    "8": "InDiE.slot.dim_customer.email_address.eq0001",
    "9": "InDiE.slot.fact_product_sales.order_id.eq0001"
  },
  "spelling_corrector": {
    "py/object": "indie.spelling_correction.corrector.SpellingCorrector",
    "ignore_list": {
      "py/set": [
        "screen protector",
        "San Francisco",
        "discount",
        "web",
        "August",
        "earphones",
        "South",
        "Lindsey Sullen \u00ca",
        "4",
        "52",
        "2019",
        "Email",
        "bundled plans",
        "Frederica Ross \u00ca",
        "Elijah Laudenslager \u00ca",
        "Cambridge",
        "GA",
        "black",
        "pamphlet",
        "9999999999",
        "May",
        "Jerica Schwartzman \u00ca",
        "billboard",
        "direct",
        "pqrs@hotmail.com",
        "July",
        "iphone 11",
        "Valentine",
        "Black Friday",
        "10GB",
        "NV",
        "October",
        "Essie Fetterman \u00ca",
        "Saturday",
        "voice plans",
        "Judi Manigo \u00ca",
        "online",
        "SMS",
        "red",
        "newspaper",
        "Northeast",
        "tv",
        "Las Vegas",
        "Seattle",
        "June",
        "radio",
        "Chicago",
        "Lucila Byrns \u00ca",
        "5",
        "FL",
        "iphone XS",
        "silver",
        "365",
        "1",
        "Weekend",
        "ipad pro",
        "Jarred Wiers \u00ca",
        "CBS",
        "NY",
        "Doyle Jury \u00ca",
        "July 4",
        "SEM",
        "devices",
        "0.1",
        "internet",
        "LA time",
        "December",
        "Keely Cheatam \u00ca",
        "buy_one_get_one",
        "abc@gmail.com",
        "physical",
        "7",
        "123 Primrose Rd",
        "345 4th Street",
        "Kansas",
        "ipad",
        "100",
        "CA",
        "Facebook",
        "Osvaldo Winzer \u00ca",
        "iphone cover",
        "Devon Beckmann \u00ca",
        "white",
        "West",
        "Yee Mcdougall \u00ca",
        "Semi-annual",
        "iphone 7",
        "Sunday",
        "WA",
        "family plan",
        "Google ads",
        "September",
        "NY times",
        "Boston",
        "Midwest",
        "New York City",
        "2015-01-01 00:00:00",
        "Trudy Meldrum \u00ca",
        "23 5th Avenue",
        "Wednesday",
        "2019-12-31 23:59:59",
        "HBO",
        "March",
        "1000",
        "February",
        "gold",
        "USA",
        "1000000000",
        "Chante Aceves \u00ca",
        "2019-12-31 00:00:00",
        "100000000",
        "Christmas",
        "Thursday",
        "tablets",
        "10GB plan",
        "unlimited plan",
        "Josephine Riggie \u00ca",
        "30",
        "April",
        "January",
        "Stewart Foskey \u00ca",
        "MA",
        "ABC",
        "2017",
        "IL",
        "Friday",
        "iphone 11 pro",
        "MI",
        "Los Angeles",
        "Nicholas Devera \u00ca",
        "Willy Paulos \u00ca",
        "10000",
        "xyz@yahoo.com",
        "store",
        "1000000",
        "accessories",
        "multiples",
        "SEO",
        "November",
        "iphone 8",
        "3000000000",
        "Atlanta",
        "Miami",
        "Susanne Mickles \u00ca",
        "Tuesday",
        "12",
        "phone",
        "Radio 92.3",
        "Monday"
      ]
    },
    "language_tool": {
      "py/object": "indie.spelling_correction.language_tool.LanguageTool",
      "disable_rules": [
        "UPPERCASE_SENTENCE_START",
        "EN_SPECIFIC_CASE",
        "FROM_X_Y"
      ],
      "language": "en-US",
      "service_base_url": "http://127.0.0.1:8010/v2"
    }
  },
  "unknown_values": [
    {
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "tag_values": [],
      "unknown_values": [
        "family plan"
      ],
      "utterance": "C - I would like to purchase a new voice plan.\nCS - I can help you find the right plan, is this just for you?\nC - No, do you have family voice plans available?"
    },
    {
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "tag_values": [],
      "unknown_values": [
        "family plan"
      ],
      "utterance": "C - I am looking to switch to your service.\nCS - That's great we would love to bring you on board. What service are you interested in?\nC - I would like a voice plan.\nCS - Ok great, we have many voice plans. How many people do you need on the plan?\nC - My whole family needs to be on it, do you have plans that cover entire families?"
    },
    {
      "query": "SELECT dim_product.product_key, dim_product.name, dim_product.description, dim_product.product_type, dim_product.product_category FROM dim_product WHERE dim_product.name = 'family plan' and dim_product.product_category = 'voice plans'",
      "tag_values": [],
      "unknown_values": [
        "family plan"
      ],
      "utterance": "C - I want to get a family voice plan. Do you guys sell plans in that category?"
    },
    {
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date > DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "tag_values": [
        {
          "py/tuple": [
            "[unused3]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-05-09T00:00:00.000"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-06-07T23:59:59.999"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        }
      ],
      "unknown_values": [
        2
      ],
      "utterance": "C - Hi there, can you send me all the orders for John Smith?\nCS - Sure, is it okay if I just pull the orders for the past 30 days?\nC - Sure that's fine.\nCS - You said the name is John Smith right?\nC - Yes, John Smith."
    },
    {
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "tag_values": [
        {
          "py/tuple": [
            "[unused3]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-05-09T00:00:00.000"
              }
            },
            "last 30 days",
            "last 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-06-07T23:59:59.999"
              }
            },
            "last 30 days",
            "last 30 days"
          ]
        }
      ],
      "unknown_values": [
        2
      ],
      "utterance": "C - I need all of my orders for the last 30 days.\nCS - Coming right up. What is your name?\nC - My name is John Smith.\nCS - Is that Smith spelled S-M-I-T-H?\nC - Yes, that is correct."
    },
    {
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "tag_values": [
        {
          "py/tuple": [
            "[unused3]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-05-09T00:00:00.000"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-06-07T23:59:59.999"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            {
              "number": {
                "type": "value",
                "value": 3
              }
            },
            "few",
            "few"
          ]
        }
      ],
      "unknown_values": [
        2
      ],
      "utterance": "C - Get me my last few orders.\nCS - Sure, I can pull up your orders from the past 30 days, is that okay?\nC - Yeah, that's fine.\nCS - What is your full name, so I can pull up the orders?\nC - My name is John Smith."
    },
    {
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "tag_values": [
        {
          "py/tuple": [
            "[unused3]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-05-09T00:00:00.000"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-06-07T23:59:59.999"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        }
      ],
      "unknown_values": [
        2
      ],
      "utterance": "C - I need to pull up all of my recent orders.\nCS - I can help you with that. What is your first and last name?\nC - Name is John Smith.\nCS - Ok great, I can pull the past 30 days, does that work?\nC - Yep that's perfect.\nCS - How do you spell Smith?\nC - S-M-I-T-H.\nCS - Got it, thank you."
    },
    {
      "query": "SELECT fact_product_sales.order_id, SUM(fact_product_sales.quantity), ROUND(SUM(fact_product_sales.sales_cost),2) FROM fact_product_sales\nJOIN dim_date ON fact_product_sales.date_key = dim_date.date_key\nJOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key\nWHERE dim_customer.name = 'John Smith' AND dim_date.date> DATE_SUB(CURRENT_DATE(), INTERVAL(30, 'DAY'))\nGROUP BY fact_product_sales.order_id",
      "tag_values": [
        {
          "py/tuple": [
            "[unused3]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-05-09T00:00:00.000"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            {
              "time": {
                "grain": "day",
                "type": "value",
                "value": "2020-06-07T23:59:59.999"
              }
            },
            "past 30 days",
            "past 30 days"
          ]
        }
      ],
      "unknown_values": [
        2
      ],
      "utterance": "C - I need to see my last orders. Can you lookup my account?\nCS - Sure, what is your full name? I can search your account this way.\nC - My name is John Smith.\nCS - Ok great, I can pull your orders from the past 30 days, is that okay?\nC - Sounds great."
    }
  ]
}