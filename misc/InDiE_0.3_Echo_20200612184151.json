{
  "py/object": "indie.indie.indie.InDiE",
  "_distinct_slot_ids": [
    "InDiE.slot.dim_product.unit_cost.gt0001",
    "InDiE.slot.dim_date.date.gte0001",
    "InDiE.slot.dim_product.color.eq0001",
    "InDiE.slot.dim_product.name.eq0001",
    "InDiE.slot.dim_store.store_type.eq0001",
    "InDiE.slot.dim_date.date.between0001",
    "InDiE.slot.dim_date.date.between0002",
    "InDiE.slot.dim_customer.state.eq0001",
    "InDiE.slot.dim_customer.channel.eq0001"
  ],
  "dataset": [
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT SUM(fact_product_sales.sales_value) AS sales FROM fact_product_sales",
      "query": "SELECT SUM(fact_product_sales.sales_value) as sales FROM fact_product_sales",
      "slots": [],
      "utterance": "How much have we made in sales?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "much",
            null,
            null,
            "much"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "made",
            null,
            null,
            "made"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "sales",
            null,
            null,
            "sales"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT SUM(fact_product_sales.sales_value) AS sales FROM fact_product_sales",
      "query": "SELECT SUM(fact_product_sales.sales_value) as sales FROM fact_product_sales",
      "slots": [],
      "utterance": "What are our total sales?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "our",
            null,
            null,
            "our"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "sales",
            null,
            null,
            "sales"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT SUM(fact_product_sales.sales_value) AS sales FROM fact_product_sales",
      "query": "SELECT SUM(fact_product_sales.sales_value) as sales FROM fact_product_sales",
      "slots": [],
      "utterance": "Get me the total for all sales.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "sales",
            null,
            null,
            "sales"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT SUM(fact_product_sales.sales_value) AS sales FROM fact_product_sales",
      "query": "SELECT SUM(fact_product_sales.sales_value) as sales FROM fact_product_sales",
      "slots": [],
      "utterance": "Find me the sum of all sales.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Find",
            null,
            null,
            "Find"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "sum",
            null,
            null,
            "sum"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "sales",
            null,
            null,
            "sales"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "ast_with_slots": {
        "from": "fact_product_sales",
        "select": {
          "name": "sales",
          "value": {
            "sum": "fact_product_sales.sales_value"
          }
        }
      },
      "intent_id": 0,
      "intent_template": "SELECT SUM(fact_product_sales.sales_value) AS sales FROM fact_product_sales",
      "query": "SELECT SUM(fact_product_sales.sales_value) as sales FROM fact_product_sales",
      "slots": [],
      "utterance": "Our total sales to date.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Our",
            null,
            null,
            "Our"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "sales",
            null,
            null,
            "sales"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "date",
            null,
            null,
            "date"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            100
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            "InDiE.slot.dim_product.unit_cost.gt0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > InDiE.slot.dim_product.unit_cost.gt0001",
      "query": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > 100",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "unit_cost",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.unit_cost.gt0001",
          "_operator": "gt",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.unit_cost.gt",
          "_value": 100,
          "entity_id": null
        }
      ],
      "utterance": "What products cost over $100?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "products",
            null,
            null,
            "products"
          ]
        },
        {
          "py/tuple": [
            "cost",
            null,
            null,
            "cost"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "[unused1]",
            "InDiE.slot.dim_product.unit_cost.gt0001",
            100,
            "over $100"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            50
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            "InDiE.slot.dim_product.unit_cost.gt0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > InDiE.slot.dim_product.unit_cost.gt0001",
      "query": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > 50",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "unit_cost",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.unit_cost.gt0001",
          "_operator": "gt",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.unit_cost.gt",
          "_value": 50,
          "entity_id": null
        }
      ],
      "utterance": "Which of our products retail for more than $50?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "our",
            null,
            null,
            "our"
          ]
        },
        {
          "py/tuple": [
            "products",
            null,
            null,
            "products"
          ]
        },
        {
          "py/tuple": [
            "retail",
            null,
            null,
            "retail"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "[unused1]",
            "InDiE.slot.dim_product.unit_cost.gt0001",
            50,
            "more than $50"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            80
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            "InDiE.slot.dim_product.unit_cost.gt0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > InDiE.slot.dim_product.unit_cost.gt0001",
      "query": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > 80",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "unit_cost",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.unit_cost.gt0001",
          "_operator": "gt",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.unit_cost.gt",
          "_value": 80,
          "entity_id": null
        }
      ],
      "utterance": "Get me a list of our products that we sell for over $80.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "list",
            null,
            null,
            "list"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "our",
            null,
            null,
            "our"
          ]
        },
        {
          "py/tuple": [
            "products",
            null,
            null,
            "products"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "sell",
            null,
            null,
            "sell"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "[unused1]",
            "InDiE.slot.dim_product.unit_cost.gt0001",
            80,
            "over $80"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            75
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            "InDiE.slot.dim_product.unit_cost.gt0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > InDiE.slot.dim_product.unit_cost.gt0001",
      "query": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > 75",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "unit_cost",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.unit_cost.gt0001",
          "_operator": "gt",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.unit_cost.gt",
          "_value": 75,
          "entity_id": null
        }
      ],
      "utterance": "Find out which products are sold at more than a $75 price point.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Find",
            null,
            null,
            "Find"
          ]
        },
        {
          "py/tuple": [
            "out",
            null,
            null,
            "out"
          ]
        },
        {
          "py/tuple": [
            "which",
            null,
            null,
            "which"
          ]
        },
        {
          "py/tuple": [
            "products",
            null,
            null,
            "products"
          ]
        },
        {
          "py/tuple": [
            "are",
            null,
            null,
            "are"
          ]
        },
        {
          "py/tuple": [
            "sold",
            null,
            null,
            "sold"
          ]
        },
        {
          "py/tuple": [
            "at",
            null,
            null,
            "at"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "a",
            null,
            null,
            "a"
          ]
        },
        {
          "py/tuple": [
            "$",
            null,
            null,
            "$"
          ]
        },
        {
          "py/tuple": [
            "[unused0]",
            "InDiE.slot.dim_product.unit_cost.gt0001",
            75,
            "[unused0]"
          ]
        },
        {
          "py/tuple": [
            "price",
            null,
            null,
            "price"
          ]
        },
        {
          "py/tuple": [
            "point",
            null,
            null,
            "point"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            25
          ]
        }
      },
      "ast_with_slots": {
        "from": "dim_product",
        "select": [
          {
            "value": "dim_product.name"
          },
          {
            "value": "dim_product.description"
          }
        ],
        "where": {
          "gt": [
            "dim_product.unit_cost",
            "InDiE.slot.dim_product.unit_cost.gt0001"
          ]
        }
      },
      "intent_id": 1,
      "intent_template": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > InDiE.slot.dim_product.unit_cost.gt0001",
      "query": "SELECT dim_product.name, dim_product.description FROM dim_product WHERE dim_product.unit_cost > 25",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "unit_cost",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.unit_cost.gt0001",
          "_operator": "gt",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.unit_cost.gt",
          "_value": 25,
          "entity_id": null
        }
      ],
      "utterance": "Products that retail for over $25",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Products",
            null,
            null,
            "Products"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "retail",
            null,
            null,
            "retail"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "more",
            null,
            null,
            "more"
          ]
        },
        {
          "py/tuple": [
            "than",
            null,
            null,
            "than"
          ]
        },
        {
          "py/tuple": [
            "[unused1]",
            "InDiE.slot.dim_product.unit_cost.gt0001",
            25,
            "over $25"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            {
              "literal": "2020-01-01"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.order_id)) AS orders FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= InDiE.slot.dim_date.date.gte0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.order_id) as orders FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= '2020-01-01'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.gte0001",
          "_operator": "gte",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.gte",
          "_value": "2020-01-01",
          "entity_id": null
        }
      ],
      "utterance": "How many orders have we gotten since January 1, 2020?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "gotten",
            null,
            null,
            "gotten"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.gte0001",
            "2020-01-01",
            "from January 1, 2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            {
              "literal": "2020-06-01"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.order_id)) AS orders FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= InDiE.slot.dim_date.date.gte0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.order_id) as orders FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= '2020-06-01'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.gte0001",
          "_operator": "gte",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.gte",
          "_value": "2020-06-01",
          "entity_id": null
        }
      ],
      "utterance": "What is the total count of orders from on or after 6/1/2020?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "total",
            null,
            null,
            "total"
          ]
        },
        {
          "py/tuple": [
            "count",
            null,
            null,
            "count"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.gte0001",
            "2020-06-01",
            "after 01 Jun,2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            {
              "literal": "2019-05-01"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.order_id)) AS orders FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= InDiE.slot.dim_date.date.gte0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.order_id) as orders FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= '2019-05-01'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.gte0001",
          "_operator": "gte",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.gte",
          "_value": "2019-05-01",
          "entity_id": null
        }
      ],
      "utterance": "Since May 1 2019, what is the number of orders we have received?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.gte0001",
            "2019-05-01",
            "from May 1 2019"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ",",
            null,
            null,
            ","
          ]
        },
        {
          "py/tuple": [
            "what",
            null,
            null,
            "what"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "we",
            null,
            null,
            "we"
          ]
        },
        {
          "py/tuple": [
            "have",
            null,
            null,
            "have"
          ]
        },
        {
          "py/tuple": [
            "received",
            null,
            null,
            "received"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": {
          "py/id": 57
        },
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": {
            "py/id": 59
          }
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.order_id)) AS orders FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= InDiE.slot.dim_date.date.gte0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.order_id) as orders FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= '2020-06-01'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.gte0001",
          "_operator": "gte",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.gte",
          "_value": "2020-06-01",
          "entity_id": null
        }
      ],
      "utterance": "Get me the number of orders from on or after 06/01/2020",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.gte0001",
            "2020-06-01",
            "after 01 Jun,2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            {
              "literal": "2020-02-15"
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          }
        ],
        "select": {
          "name": "orders",
          "value": {
            "count": {
              "distinct": "fact_product_sales.order_id"
            }
          }
        },
        "where": {
          "gte": [
            "dim_date.date",
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "intent_id": 2,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.order_id)) AS orders FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= InDiE.slot.dim_date.date.gte0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.order_id) as orders FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key WHERE dim_date.date >= '2020-02-15'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.gte0001",
          "_operator": "gte",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.gte",
          "_value": "2020-02-15",
          "entity_id": null
        }
      ],
      "utterance": "Total number of orders on or after Feb 15, 2020.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Total",
            null,
            null,
            "Total"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "on",
            null,
            null,
            "on"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.gte0001",
            "2020-02-15",
            "after Feb 15, 2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            null,
            null,
            "[unused4]"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                {
                  "literal": "gold"
                }
              ]
            },
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "ipad pro"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                "InDiE.slot.dim_product.color.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.customer_key)) AS customers FROM fact_product_sales JOIN dim_product ON fact_product_sales.product_key = dim_product.product_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = InDiE.slot.dim_product.color.eq0001 AND dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.customer_key) as customers FROM fact_product_sales JOIN dim_product on fact_product_sales.product_key = dim_product.product_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = 'gold' AND dim_product.name = 'ipad pro' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "color",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.color.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.color.eq",
          "_value": "gold",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad pro",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "How many customers got their gold ipad pro's online?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "got",
            null,
            null,
            "got"
          ]
        },
        {
          "py/tuple": [
            "their",
            null,
            null,
            "their"
          ]
        },
        {
          "py/tuple": [
            "gold",
            "InDiE.slot.dim_product.color.eq0001",
            "gold",
            "gold"
          ]
        },
        {
          "py/tuple": [
            "ipad pro",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad pro",
            "ipad pro"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "online"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                {
                  "literal": "black"
                }
              ]
            },
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "iphone 7"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "physical"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                "InDiE.slot.dim_product.color.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.customer_key)) AS customers FROM fact_product_sales JOIN dim_product ON fact_product_sales.product_key = dim_product.product_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = InDiE.slot.dim_product.color.eq0001 AND dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.customer_key) as customers FROM fact_product_sales JOIN dim_product on fact_product_sales.product_key = dim_product.product_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = 'black' AND dim_product.name = 'iphone 7' AND dim_store.store_type = 'physical'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "color",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.color.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.color.eq",
          "_value": "black",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "iphone 7",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "physical",
          "entity_id": null
        }
      ],
      "utterance": "What is the count of customers who purchased iphone 7's in store in black.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "What",
            null,
            null,
            "What"
          ]
        },
        {
          "py/tuple": [
            "is",
            null,
            null,
            "is"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "count",
            null,
            null,
            "count"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "who",
            null,
            null,
            "who"
          ]
        },
        {
          "py/tuple": [
            "purchased",
            null,
            null,
            "purchased"
          ]
        },
        {
          "py/tuple": [
            "iphone 7",
            "InDiE.slot.dim_product.name.eq0001",
            "iphone 7",
            "iphone 7"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "physical",
            "InDiE.slot.dim_store.store_type.eq0001",
            "physical",
            "store"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "black",
            "InDiE.slot.dim_product.color.eq0001",
            "black",
            "black"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                {
                  "literal": "red"
                }
              ]
            },
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "iphone 8"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                "InDiE.slot.dim_product.color.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.customer_key)) AS customers FROM fact_product_sales JOIN dim_product ON fact_product_sales.product_key = dim_product.product_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = InDiE.slot.dim_product.color.eq0001 AND dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.customer_key) as customers FROM fact_product_sales JOIN dim_product on fact_product_sales.product_key = dim_product.product_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = 'red' AND dim_product.name = 'iphone 8' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "color",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.color.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.color.eq",
          "_value": "red",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "iphone 8",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "Get me the number of customers that made and e-commerce purchase for red iPhone 8s.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "number",
            null,
            null,
            "number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "made",
            null,
            null,
            "made"
          ]
        },
        {
          "py/tuple": [
            "and",
            null,
            null,
            "and"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "e-commerce"
          ]
        },
        {
          "py/tuple": [
            "purchase",
            null,
            null,
            "purchase"
          ]
        },
        {
          "py/tuple": [
            "for",
            null,
            null,
            "for"
          ]
        },
        {
          "py/tuple": [
            "red",
            "InDiE.slot.dim_product.color.eq0001",
            "red",
            "red"
          ]
        },
        {
          "py/tuple": [
            "iphone 8",
            "InDiE.slot.dim_product.name.eq0001",
            "iphone 8",
            "iPhone 8s"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                {
                  "literal": "silver"
                }
              ]
            },
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "ipad"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "physical"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                "InDiE.slot.dim_product.color.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.customer_key)) AS customers FROM fact_product_sales JOIN dim_product ON fact_product_sales.product_key = dim_product.product_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = InDiE.slot.dim_product.color.eq0001 AND dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.customer_key) as customers FROM fact_product_sales JOIN dim_product on fact_product_sales.product_key = dim_product.product_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = 'silver' AND dim_product.name = 'ipad' AND dim_store.store_type = 'physical'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "color",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.color.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.color.eq",
          "_value": "silver",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "ipad",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "physical",
          "entity_id": null
        }
      ],
      "utterance": "How many customers bought silver iPads in store?",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "How",
            null,
            null,
            "How"
          ]
        },
        {
          "py/tuple": [
            "many",
            null,
            null,
            "many"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "bought",
            null,
            null,
            "bought"
          ]
        },
        {
          "py/tuple": [
            "silver",
            "InDiE.slot.dim_product.color.eq0001",
            "silver",
            "silver"
          ]
        },
        {
          "py/tuple": [
            "ipad",
            "InDiE.slot.dim_product.name.eq0001",
            "ipad",
            "iPads"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "physical",
            "InDiE.slot.dim_store.store_type.eq0001",
            "physical",
            "store"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                {
                  "literal": "white"
                }
              ]
            },
            {
              "eq": [
                "dim_product.name",
                {
                  "literal": "iphone XS"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_product",
            "on": {
              "eq": [
                "fact_product_sales.product_key",
                "dim_product.product_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "name": "customers",
          "value": {
            "count": {
              "distinct": "fact_product_sales.customer_key"
            }
          }
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_product.color",
                "InDiE.slot.dim_product.color.eq0001"
              ]
            },
            {
              "eq": [
                "dim_product.name",
                "InDiE.slot.dim_product.name.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 3,
      "intent_template": "SELECT COUNT(DISTINCT(fact_product_sales.customer_key)) AS customers FROM fact_product_sales JOIN dim_product ON fact_product_sales.product_key = dim_product.product_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = InDiE.slot.dim_product.color.eq0001 AND dim_product.name = InDiE.slot.dim_product.name.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT COUNT(DISTINCT fact_product_sales.customer_key) as customers FROM fact_product_sales JOIN dim_product on fact_product_sales.product_key = dim_product.product_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_product.color = 'white' AND dim_product.name = 'iphone XS' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "color",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.color.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.color.eq",
          "_value": "white",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "name",
          "_generic": false,
          "_id": "InDiE.slot.dim_product.name.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_product",
          "_tbl_col_op": "dim_product.name.eq",
          "_value": "iphone XS",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "Number of customers who purchased iPhone XS's online in white.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "Number",
            null,
            null,
            "Number"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "who",
            null,
            null,
            "who"
          ]
        },
        {
          "py/tuple": [
            "purchased",
            null,
            null,
            "purchased"
          ]
        },
        {
          "py/tuple": [
            "iphone XS",
            "InDiE.slot.dim_product.name.eq0001",
            "iphone XS",
            "iPhone XS"
          ]
        },
        {
          "py/tuple": [
            "'s",
            null,
            null,
            "'s"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "online"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "white",
            "InDiE.slot.dim_product.color.eq0001",
            "white",
            "white"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                {
                  "literal": "2020-01-01"
                },
                {
                  "literal": "2020-01-31"
                }
              ]
            },
            {
              "eq": [
                "dim_customer.state",
                {
                  "literal": "CA"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                "InDiE.slot.dim_date.date.between0001",
                "InDiE.slot.dim_date.date.between0002"
              ]
            },
            {
              "eq": [
                "dim_customer.state",
                "InDiE.slot.dim_customer.state.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 4,
      "intent_template": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN InDiE.slot.dim_date.date.between0001 AND InDiE.slot.dim_date.date.between0002 AND dim_customer.state = InDiE.slot.dim_customer.state.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key JOIN dim_customer on fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN '2020-01-01' AND '2020-01-31' AND dim_customer.state = 'CA' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0001",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-01-01",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0002",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-01-31",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "state",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.state.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.state.eq",
          "_value": "CA",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "C - Get me the orders from California in Jan 2020\nCS - Would you like online or in-store orders?\nC - online",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "CA",
            "InDiE.slot.dim_customer.state.eq0001",
            "CA",
            "California"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.between0001",
            "2020-01-01",
            "in Jan 2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            "InDiE.slot.dim_date.date.between0002",
            "2020-01-31",
            "in Jan 2020"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Would",
            null,
            null,
            "Would"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "like",
            null,
            null,
            "like"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "online"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "in-store",
            null,
            null,
            "in-store"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "online"
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                {
                  "literal": "2020-01-01"
                },
                {
                  "literal": "2020-12-31"
                }
              ]
            },
            {
              "eq": [
                "dim_customer.state",
                {
                  "literal": "MA"
                }
              ]
            },
            {
              "eq": [
                "dim_customer.channel",
                {
                  "literal": "SEM"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                "InDiE.slot.dim_date.date.between0001",
                "InDiE.slot.dim_date.date.between0002"
              ]
            },
            {
              "eq": [
                "dim_customer.state",
                "InDiE.slot.dim_customer.state.eq0001"
              ]
            },
            {
              "eq": [
                "dim_customer.channel",
                "InDiE.slot.dim_customer.channel.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 5,
      "intent_template": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN InDiE.slot.dim_date.date.between0001 AND InDiE.slot.dim_date.date.between0002 AND dim_customer.state = InDiE.slot.dim_customer.state.eq0001 AND dim_customer.channel = InDiE.slot.dim_customer.channel.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key JOIN dim_customer on fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN '2020-01-01' AND '2020-12-31' AND dim_customer.state = 'MA' AND dim_customer.channel = 'SEM' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0001",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-01-01",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0002",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-12-31",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "state",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.state.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.state.eq",
          "_value": "MA",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "channel",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.channel.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.channel.eq",
          "_value": "SEM",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "C - Which orders from customers in Massachusetts found us via SEM in 2020 so far?\nCS - For online or in-store orders?\nC - Online orders only.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "MA",
            "InDiE.slot.dim_customer.state.eq0001",
            "MA",
            "Massachusetts"
          ]
        },
        {
          "py/tuple": [
            "found",
            null,
            null,
            "found"
          ]
        },
        {
          "py/tuple": [
            "us",
            null,
            null,
            "us"
          ]
        },
        {
          "py/tuple": [
            "via",
            null,
            null,
            "via"
          ]
        },
        {
          "py/tuple": [
            "SEM",
            "InDiE.slot.dim_customer.channel.eq0001",
            "SEM",
            "SEM"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.between0001",
            "2020-01-01",
            "in 2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            "InDiE.slot.dim_date.date.between0002",
            "2020-12-31",
            "in 2020"
          ]
        },
        {
          "py/tuple": [
            "so",
            null,
            null,
            "so"
          ]
        },
        {
          "py/tuple": [
            "far",
            null,
            null,
            "far"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "For",
            null,
            null,
            "For"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "online"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "in-store",
            null,
            null,
            "in-store"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "Online"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "only",
            null,
            null,
            "only"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                {
                  "literal": "2019-01-01"
                },
                {
                  "literal": "2019-12-31"
                }
              ]
            },
            {
              "eq": [
                "dim_customer.channel",
                {
                  "literal": "SEO "
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "physical"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                "InDiE.slot.dim_date.date.between0001",
                "InDiE.slot.dim_date.date.between0002"
              ]
            },
            {
              "eq": [
                "dim_customer.channel",
                "InDiE.slot.dim_customer.channel.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 6,
      "intent_template": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN InDiE.slot.dim_date.date.between0001 AND InDiE.slot.dim_date.date.between0002 AND dim_customer.channel = InDiE.slot.dim_customer.channel.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key JOIN dim_customer on fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN '2019-01-01' AND '2019-12-31' AND dim_customer.channel = 'SEO ' AND dim_store.store_type = 'physical'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0001",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2019-01-01",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0002",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2019-12-31",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "channel",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.channel.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.channel.eq",
          "_value": "SEO ",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "physical",
          "entity_id": null
        }
      ],
      "utterance": "C - Get me the orders of our customers that found us from SEO in 2019?\nCS - Would you link online or physical store orders?\nC - Physical store orders.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "of",
            null,
            null,
            "of"
          ]
        },
        {
          "py/tuple": [
            "our",
            null,
            null,
            "our"
          ]
        },
        {
          "py/tuple": [
            "customers",
            null,
            null,
            "customers"
          ]
        },
        {
          "py/tuple": [
            "that",
            null,
            null,
            "that"
          ]
        },
        {
          "py/tuple": [
            "found",
            null,
            null,
            "found"
          ]
        },
        {
          "py/tuple": [
            "us",
            null,
            null,
            "us"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "SEO ",
            "InDiE.slot.dim_customer.channel.eq0001",
            "SEO ",
            "SEO"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.between0001",
            "2019-01-01",
            "in 2019"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            "InDiE.slot.dim_date.date.between0002",
            "2019-12-31",
            "in 2019"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Would",
            null,
            null,
            "Would"
          ]
        },
        {
          "py/tuple": [
            "you",
            null,
            null,
            "you"
          ]
        },
        {
          "py/tuple": [
            "link",
            null,
            null,
            "link"
          ]
        },
        {
          "py/tuple": [
            "online",
            null,
            null,
            "online"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "physical",
            "InDiE.slot.dim_store.store_type.eq0001",
            "physical",
            "store"
          ]
        },
        {
          "py/tuple": [
            "physical",
            "InDiE.slot.dim_store.store_type.eq0001",
            "physical",
            "physical"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Physical",
            null,
            null,
            "Physical"
          ]
        },
        {
          "py/tuple": [
            "store",
            null,
            null,
            "store"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.state",
                {
                  "literal": "WA"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "online"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "eq": [
                "dim_customer.state",
                "InDiE.slot.dim_customer.state.eq0001"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 7,
      "intent_template": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_customer.state = InDiE.slot.dim_customer.state.eq0001 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key JOIN dim_customer on fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_customer.state = 'WA' AND dim_store.store_type = 'online'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "state",
          "_generic": false,
          "_id": "InDiE.slot.dim_customer.state.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_customer",
          "_tbl_col_op": "dim_customer.state.eq",
          "_value": "WA",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "online",
          "entity_id": null
        }
      ],
      "utterance": "C - Get me all the orders from Washington state.\nCS - Online or in-store orders?\nC - Online orders only.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Get",
            null,
            null,
            "Get"
          ]
        },
        {
          "py/tuple": [
            "me",
            null,
            null,
            "me"
          ]
        },
        {
          "py/tuple": [
            "all",
            null,
            null,
            "all"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "WA",
            "InDiE.slot.dim_customer.state.eq0001",
            "WA",
            "Washington"
          ]
        },
        {
          "py/tuple": [
            "state",
            null,
            null,
            "state"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "Online"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "in-store",
            null,
            null,
            "in-store"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "online",
            "InDiE.slot.dim_store.store_type.eq0001",
            "online",
            "Online"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "only",
            null,
            null,
            "only"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    },
    {
      "ast": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                {
                  "literal": "2020-05-01"
                },
                {
                  "literal": "2020-05-15"
                }
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                {
                  "literal": "physical"
                }
              ]
            }
          ]
        }
      },
      "ast_with_slots": {
        "from": [
          "fact_product_sales",
          {
            "join": "dim_date",
            "on": {
              "eq": [
                "fact_product_sales.date_key",
                "dim_date.date_key"
              ]
            }
          },
          {
            "join": "dim_customer",
            "on": {
              "eq": [
                "fact_product_sales.customer_key",
                "dim_customer.customer_key"
              ]
            }
          },
          {
            "join": "dim_store",
            "on": {
              "eq": [
                "fact_product_sales.store_key",
                "dim_store.store_key"
              ]
            }
          }
        ],
        "select": {
          "value": "fact_product_sales.order_id"
        },
        "where": {
          "and": [
            {
              "between": [
                "dim_date.date",
                "InDiE.slot.dim_date.date.between0001",
                "InDiE.slot.dim_date.date.between0002"
              ]
            },
            {
              "eq": [
                "dim_store.store_type",
                "InDiE.slot.dim_store.store_type.eq0001"
              ]
            }
          ]
        }
      },
      "intent_id": 8,
      "intent_template": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date ON fact_product_sales.date_key = dim_date.date_key JOIN dim_customer ON fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store ON fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN InDiE.slot.dim_date.date.between0001 AND InDiE.slot.dim_date.date.between0002 AND dim_store.store_type = InDiE.slot.dim_store.store_type.eq0001",
      "query": "SELECT fact_product_sales.order_id FROM fact_product_sales JOIN dim_date on fact_product_sales.date_key = dim_date.date_key JOIN dim_customer on fact_product_sales.customer_key = dim_customer.customer_key JOIN dim_store on fact_product_sales.store_key = dim_store.store_key WHERE dim_date.date BETWEEN '2020-05-01' AND '2020-05-15' AND dim_store.store_type = 'physical'",
      "slots": [
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0001",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-05-01",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "date",
          "_generic": false,
          "_id": "InDiE.slot.dim_date.date.between0002",
          "_operator": "between",
          "_required": true,
          "_table": "dim_date",
          "_tbl_col_op": "dim_date.date.between",
          "_value": "2020-05-15",
          "entity_id": null
        },
        {
          "py/object": "indie.indie.slot.Slot",
          "_column": "store_type",
          "_generic": false,
          "_id": "InDiE.slot.dim_store.store_type.eq0001",
          "_operator": "eq",
          "_required": true,
          "_table": "dim_store",
          "_tbl_col_op": "dim_store.store_type.eq",
          "_value": "physical",
          "entity_id": null
        }
      ],
      "utterance": "C - Which orders were placed between 5/1/2020 and 5/15/2020?\nCS - Online orders or in-store orders?\nC - Orders placed in the store.",
      "word_slot_mapping": [
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Which",
            null,
            null,
            "Which"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "were",
            null,
            null,
            "were"
          ]
        },
        {
          "py/tuple": [
            "placed",
            null,
            null,
            "placed"
          ]
        },
        {
          "py/tuple": [
            "from",
            null,
            null,
            "from"
          ]
        },
        {
          "py/tuple": [
            "[unused3]",
            "InDiE.slot.dim_date.date.between0001",
            "2020-05-01",
            "between 01 May,2020 and 15 May,2020"
          ]
        },
        {
          "py/tuple": [
            "to",
            null,
            null,
            "to"
          ]
        },
        {
          "py/tuple": [
            "[unused4]",
            "InDiE.slot.dim_date.date.between0002",
            "2020-05-15",
            "between 01 May,2020 and 15 May,2020"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "CS",
            null,
            null,
            "CS"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Online",
            null,
            null,
            "Online"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "or",
            null,
            null,
            "or"
          ]
        },
        {
          "py/tuple": [
            "in-store",
            null,
            null,
            "in-store"
          ]
        },
        {
          "py/tuple": [
            "orders",
            null,
            null,
            "orders"
          ]
        },
        {
          "py/tuple": [
            "?",
            null,
            null,
            "?"
          ]
        },
        {
          "py/tuple": [
            "C",
            null,
            null,
            "C"
          ]
        },
        {
          "py/tuple": [
            "-",
            null,
            null,
            "-"
          ]
        },
        {
          "py/tuple": [
            "Orders",
            null,
            null,
            "Orders"
          ]
        },
        {
          "py/tuple": [
            "placed",
            null,
            null,
            "placed"
          ]
        },
        {
          "py/tuple": [
            "in",
            null,
            null,
            "in"
          ]
        },
        {
          "py/tuple": [
            "the",
            null,
            null,
            "the"
          ]
        },
        {
          "py/tuple": [
            "physical",
            "InDiE.slot.dim_store.store_type.eq0001",
            "physical",
            "store"
          ]
        },
        {
          "py/tuple": [
            ".",
            null,
            null,
            "."
          ]
        }
      ]
    }
  ],
  "dataset_id": "Echo",
  "dataset_version": "0",
  "example_id_to_leaf_intent_id": {
    "0": 0,
    "1": 0,
    "10": 2,
    "11": 2,
    "12": 2,
    "13": 2,
    "14": 2,
    "15": 3,
    "16": 3,
    "17": 3,
    "18": 3,
    "19": 3,
    "2": 0,
    "20": 4,
    "21": 5,
    "22": 6,
    "23": 7,
    "24": 8,
    "3": 0,
    "4": 0,
    "5": 1,
    "6": 1,
    "7": 1,
    "8": 1,
    "9": 1
  },
  "ignored_slot_ids": [],
  "indie_version": "0.3",
  "intent_tree": {
    "py/object": "indie.indie.intent_tree.IntentTree",
    "_indie": {
      "py/id": 0
    },
    "_intents_by_id": {
      "asimzkwh": {
        "py/object": "indie.indie.intent.Level3Intent",
        "_ast": {
          "from": {
            "py/id": 51
          },
          "select": {
            "name": "orders",
            "value": {
              "count": {
                "distinct": "fact_product_sales.order_id"
              }
            }
          },
          "where": "placeholder"
        },
        "_children": {
          "0de3e83ae0e24df0aeba494b0d60b6dbdfc98453129784b5dcb60be2eef065a9": {
            "py/object": "indie.indie.intent.Level4Intent",
            "_ast": {
              "from": {
                "py/id": 51
              },
              "select": {
                "name": "orders",
                "value": {
                  "count": {
                    "distinct": "fact_product_sales.order_id"
                  }
                }
              },
              "where": {
                "gte": {
                  "py/id": 53
                }
              }
            },
            "_children": {},
            "_example_indices": [
              10,
              11,
              12,
              13,
              14
            ],
            "_id": "jbxmhpuf",
            "_intent_tree": {
              "py/id": 292
            },
            "_key": "0de3e83ae0e24df0aeba494b0d60b6dbdfc98453129784b5dcb60be2eef065a9",
            "_leaf_intent_permanent_id": 2,
            "_level": 4,
            "_parent": {
              "py/id": 293
            },
            "_slots": {
              "py/id": 87
            },
            "_virtual_table": null
          }
        },
        "_example_indices": [
          10,
          11,
          12,
          13,
          14
        ],
        "_id": "asimzkwh",
        "_intent_tree": {
          "py/id": 292
        },
        "_key": "39590c6345024fb59c0710e31732e84c4ffbb2975377f38815f3e50695c00421",
        "_leaf_intent_permanent_id": null,
        "_level": 3,
        "_parent": {
          "py/object": "indie.indie.intent.Level2Intent",
          "_ast": null,
          "_children": {
            "39590c6345024fb59c0710e31732e84c4ffbb2975377f38815f3e50695c00421": {
              "py/id": 293
            }
          },
          "_example_indices": [
            10,
            11,
            12,
            13,
            14
          ],
          "_id": "kzcwrntl",
          "_intent_tree": {
            "py/id": 292
          },
          "_key": "0",
          "_leaf_intent_permanent_id": null,
          "_level": 2,
          "_parent": {
            "py/object": "indie.indie.intent.Level1Intent",
            "_ast": null,
            "_children": {
              "0": {
                "py/id": 297
              }
            },
            "_example_indices": [
              10,
              11,
              12,
              13,
              14
            ],
            "_id": "oqpacgit",
            "_intent_tree": {
              "py/id": 292
            },
            "_key": "e550e1a692a56e54a79c660428555f4acd68bc7f7a9fab787828bf6391a2d4a5",
            "_leaf_intent_permanent_id": null,
            "_level": 1,
            "_parent": {
              "py/object": "indie.indie.intent.RootIntent",
              "_ast": null,
              "_children": {
                "3cac284962ae6a65bbea1f064deed08275bedce8462d7bfc6bb4663d1c2eb510": {
                  "py/object": "indie.indie.intent.Level1Intent",
                  "_ast": null,
                  "_children": {
                    "0": {
                      "py/object": "indie.indie.intent.Level2Intent",
                      "_ast": null,
                      "_children": {
                        "e68dd5161596fe5582b2fbf9031e344ac413885ada6bcda0fa858bc48127fa34": {
                          "py/object": "indie.indie.intent.Level3Intent",
                          "_ast": {
                            "from": {
                              "py/id": 193
                            },
                            "select": {
                              "value": "fact_product_sales.order_id"
                            },
                            "where": "placeholder"
                          },
                          "_children": {
                            "146ce7225d97b0967b357e630da02df914874325178348bb4361515bd403e9b1": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 261
                                },
                                "select": {
                                  "value": "fact_product_sales.order_id"
                                },
                                "where": {
                                  "and": {
                                    "py/id": 265
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                23
                              ],
                              "_id": "ykajolxc",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "146ce7225d97b0967b357e630da02df914874325178348bb4361515bd403e9b1",
                              "_leaf_intent_permanent_id": 7,
                              "_level": 4,
                              "_parent": {
                                "py/id": 304
                              },
                              "_slots": {
                                "py/id": 268
                              },
                              "_virtual_table": null
                            },
                            "633539352d6718d5084eb83c49305428177e1849f9e2793fafeca909f457fab8": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 279
                                },
                                "select": {
                                  "value": "fact_product_sales.order_id"
                                },
                                "where": {
                                  "and": {
                                    "py/id": 283
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                24
                              ],
                              "_id": "yuegrdst",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "633539352d6718d5084eb83c49305428177e1849f9e2793fafeca909f457fab8",
                              "_leaf_intent_permanent_id": 8,
                              "_level": 4,
                              "_parent": {
                                "py/id": 304
                              },
                              "_slots": {
                                "py/id": 286
                              },
                              "_virtual_table": null
                            },
                            "8e4fcfd15259e282b590e74dcdaf9fac3d02b674dfd9f10ddd0058c4e469b1f8": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 216
                                },
                                "select": {
                                  "value": "fact_product_sales.order_id"
                                },
                                "where": {
                                  "and": {
                                    "py/id": 220
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                21
                              ],
                              "_id": "bunmtaeh",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "8e4fcfd15259e282b590e74dcdaf9fac3d02b674dfd9f10ddd0058c4e469b1f8",
                              "_leaf_intent_permanent_id": 5,
                              "_level": 4,
                              "_parent": {
                                "py/id": 304
                              },
                              "_slots": {
                                "py/id": 225
                              },
                              "_virtual_table": null
                            },
                            "a470b17a39dc008d02ae9b049105ec49d6ad1bd14eb591f594dec7fb0f0db94d": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 240
                                },
                                "select": {
                                  "value": "fact_product_sales.order_id"
                                },
                                "where": {
                                  "and": {
                                    "py/id": 244
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                22
                              ],
                              "_id": "stryickf",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "a470b17a39dc008d02ae9b049105ec49d6ad1bd14eb591f594dec7fb0f0db94d",
                              "_leaf_intent_permanent_id": 6,
                              "_level": 4,
                              "_parent": {
                                "py/id": 304
                              },
                              "_slots": {
                                "py/id": 248
                              },
                              "_virtual_table": null
                            },
                            "bd7d0b10ed03bcf985a21c5aac5481547ad741e8e28fbecb7ebfb2d1e342c36b": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 193
                                },
                                "select": {
                                  "value": "fact_product_sales.order_id"
                                },
                                "where": {
                                  "and": {
                                    "py/id": 197
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                20
                              ],
                              "_id": "zdrltjbe",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "bd7d0b10ed03bcf985a21c5aac5481547ad741e8e28fbecb7ebfb2d1e342c36b",
                              "_leaf_intent_permanent_id": 4,
                              "_level": 4,
                              "_parent": {
                                "py/id": 304
                              },
                              "_slots": {
                                "py/id": 201
                              },
                              "_virtual_table": null
                            }
                          },
                          "_example_indices": [
                            20,
                            21,
                            22,
                            23,
                            24
                          ],
                          "_id": "atbijsoy",
                          "_intent_tree": {
                            "py/id": 292
                          },
                          "_key": "e68dd5161596fe5582b2fbf9031e344ac413885ada6bcda0fa858bc48127fa34",
                          "_leaf_intent_permanent_id": null,
                          "_level": 3,
                          "_parent": {
                            "py/id": 303
                          },
                          "_select": [
                            {
                              "value": "fact_product_sales.order_id"
                            }
                          ],
                          "_slots": [
                            {
                              "py/id": 202
                            },
                            {
                              "py/id": 203
                            },
                            {
                              "py/id": 204
                            },
                            {
                              "py/id": 205
                            },
                            {
                              "py/id": 226
                            },
                            {
                              "py/id": 227
                            },
                            {
                              "py/id": 228
                            },
                            {
                              "py/id": 229
                            },
                            {
                              "py/id": 230
                            },
                            {
                              "py/id": 249
                            },
                            {
                              "py/id": 250
                            },
                            {
                              "py/id": 251
                            },
                            {
                              "py/id": 252
                            },
                            {
                              "py/id": 269
                            },
                            {
                              "py/id": 270
                            },
                            {
                              "py/id": 287
                            },
                            {
                              "py/id": 288
                            },
                            {
                              "py/id": 289
                            }
                          ],
                          "_slots_by_slot_id": {
                            "InDiE.slot.dim_customer.channel.eq0001": {
                              "py/id": 251
                            },
                            "InDiE.slot.dim_customer.state.eq0001": {
                              "py/id": 269
                            },
                            "InDiE.slot.dim_date.date.between0001": {
                              "py/id": 287
                            },
                            "InDiE.slot.dim_date.date.between0002": {
                              "py/id": 288
                            },
                            "InDiE.slot.dim_store.store_type.eq0001": {
                              "py/id": 289
                            }
                          },
                          "_virtual_table": null,
                          "all_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_store.store_type.eq0001",
                              "InDiE.slot.dim_date.date.between0001",
                              "InDiE.slot.dim_customer.channel.eq0001",
                              "InDiE.slot.dim_customer.state.eq0001",
                              "InDiE.slot.dim_date.date.between0002"
                            ]
                          },
                          "optional_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_customer.channel.eq0001",
                              "InDiE.slot.dim_date.date.between0002",
                              "InDiE.slot.dim_date.date.between0001",
                              "InDiE.slot.dim_customer.state.eq0001"
                            ]
                          },
                          "required_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_store.store_type.eq0001"
                            ]
                          }
                        }
                      },
                      "_example_indices": [
                        20,
                        21,
                        22,
                        23,
                        24
                      ],
                      "_id": "ebytwpnr",
                      "_intent_tree": {
                        "py/id": 292
                      },
                      "_key": "0",
                      "_leaf_intent_permanent_id": null,
                      "_level": 2,
                      "_parent": {
                        "py/id": 302
                      },
                      "_slots": [],
                      "_virtual_table": {
                        "py/object": "indie.indie.virtual_table.VirtualTable",
                        "groupby": null,
                        "order_by": null,
                        "tables": null
                      }
                    }
                  },
                  "_example_indices": [
                    20,
                    21,
                    22,
                    23,
                    24
                  ],
                  "_id": "juepxbzv",
                  "_intent_tree": {
                    "py/id": 292
                  },
                  "_key": "3cac284962ae6a65bbea1f064deed08275bedce8462d7bfc6bb4663d1c2eb510",
                  "_leaf_intent_permanent_id": null,
                  "_level": 1,
                  "_parent": {
                    "py/id": 301
                  },
                  "_slots": [],
                  "_virtual_table": {
                    "py/object": "indie.indie.virtual_table.VirtualTable",
                    "groupby": null,
                    "order_by": null,
                    "tables": {
                      "py/id": 193
                    }
                  }
                },
                "448eb627f54b618215548be49d3e94cf26018ad90c65ccacbcc3329da7677d0f": {
                  "py/object": "indie.indie.intent.Level1Intent",
                  "_ast": null,
                  "_children": {
                    "0": {
                      "py/object": "indie.indie.intent.Level2Intent",
                      "_ast": null,
                      "_children": {
                        "1c3ebd33d6e010449db55f0521ed84a49d67f8f7d1d711db997942e28aca06e5": {
                          "py/object": "indie.indie.intent.Level3Intent",
                          "_ast": {
                            "from": "fact_product_sales",
                            "select": {
                              "name": "sales",
                              "value": {
                                "sum": "fact_product_sales.sales_value"
                              }
                            },
                            "where": "placeholder"
                          },
                          "_children": {
                            "c030b1b93c311c55c3476c6fbd52b7227521c0d46b43f8adc20edb8cd492e5f6": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": "fact_product_sales",
                                "select": {
                                  "name": "sales",
                                  "value": {
                                    "sum": "fact_product_sales.sales_value"
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                0,
                                1,
                                2,
                                3,
                                4
                              ],
                              "_id": "wgiqmhft",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "c030b1b93c311c55c3476c6fbd52b7227521c0d46b43f8adc20edb8cd492e5f6",
                              "_leaf_intent_permanent_id": 0,
                              "_level": 4,
                              "_parent": {
                                "py/id": 326
                              },
                              "_slots": {
                                "py/id": 11
                              },
                              "_virtual_table": null
                            }
                          },
                          "_example_indices": [
                            0,
                            1,
                            2,
                            3,
                            4
                          ],
                          "_id": "bovjrswe",
                          "_intent_tree": {
                            "py/id": 292
                          },
                          "_key": "1c3ebd33d6e010449db55f0521ed84a49d67f8f7d1d711db997942e28aca06e5",
                          "_leaf_intent_permanent_id": null,
                          "_level": 3,
                          "_parent": {
                            "py/id": 325
                          },
                          "_select": [
                            {
                              "name": "sales",
                              "value": {
                                "sum": "fact_product_sales.sales_value"
                              }
                            }
                          ],
                          "_slots": [],
                          "_slots_by_slot_id": {},
                          "_virtual_table": null,
                          "all_slot_ids": {
                            "py/set": []
                          },
                          "optional_slot_ids": {
                            "py/set": []
                          },
                          "required_slot_ids": {
                            "py/set": []
                          }
                        }
                      },
                      "_example_indices": [
                        0,
                        1,
                        2,
                        3,
                        4
                      ],
                      "_id": "jkfcwaiy",
                      "_intent_tree": {
                        "py/id": 292
                      },
                      "_key": "0",
                      "_leaf_intent_permanent_id": null,
                      "_level": 2,
                      "_parent": {
                        "py/id": 324
                      },
                      "_slots": [],
                      "_virtual_table": {
                        "py/object": "indie.indie.virtual_table.VirtualTable",
                        "groupby": null,
                        "order_by": null,
                        "tables": null
                      }
                    }
                  },
                  "_example_indices": [
                    0,
                    1,
                    2,
                    3,
                    4
                  ],
                  "_id": "qxlkrejn",
                  "_intent_tree": {
                    "py/id": 292
                  },
                  "_key": "448eb627f54b618215548be49d3e94cf26018ad90c65ccacbcc3329da7677d0f",
                  "_leaf_intent_permanent_id": null,
                  "_level": 1,
                  "_parent": {
                    "py/id": 301
                  },
                  "_slots": [],
                  "_virtual_table": {
                    "py/object": "indie.indie.virtual_table.VirtualTable",
                    "groupby": null,
                    "order_by": null,
                    "tables": [
                      "fact_product_sales"
                    ]
                  }
                },
                "a9050b1869e02c99e3112e99f83de9680b1cfb06053f6294b8bd895d6386ce9f": {
                  "py/object": "indie.indie.intent.Level1Intent",
                  "_ast": null,
                  "_children": {
                    "0": {
                      "py/object": "indie.indie.intent.Level2Intent",
                      "_ast": null,
                      "_children": {
                        "d74bbd8962d40e418009a64ce1ef305c3440c7f6582911670eb7040f43cc0fef": {
                          "py/object": "indie.indie.intent.Level3Intent",
                          "_ast": {
                            "from": {
                              "py/id": 97
                            },
                            "select": {
                              "name": "customers",
                              "value": {
                                "count": {
                                  "distinct": "fact_product_sales.customer_key"
                                }
                              }
                            },
                            "where": "placeholder"
                          },
                          "_children": {
                            "88cab01200bb212401ec112b97641b1b2e39e56003423ed6cb5dc78db358de3f": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": {
                                  "py/id": 97
                                },
                                "select": {
                                  "name": "customers",
                                  "value": {
                                    "count": {
                                      "distinct": "fact_product_sales.customer_key"
                                    }
                                  }
                                },
                                "where": {
                                  "and": {
                                    "py/id": 100
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                15,
                                16,
                                17,
                                18,
                                19
                              ],
                              "_id": "qftijogk",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "88cab01200bb212401ec112b97641b1b2e39e56003423ed6cb5dc78db358de3f",
                              "_leaf_intent_permanent_id": 3,
                              "_level": 4,
                              "_parent": {
                                "py/id": 341
                              },
                              "_slots": {
                                "py/id": 180
                              },
                              "_virtual_table": null
                            }
                          },
                          "_example_indices": [
                            15,
                            16,
                            17,
                            18,
                            19
                          ],
                          "_id": "qpydahus",
                          "_intent_tree": {
                            "py/id": 292
                          },
                          "_key": "d74bbd8962d40e418009a64ce1ef305c3440c7f6582911670eb7040f43cc0fef",
                          "_leaf_intent_permanent_id": null,
                          "_level": 3,
                          "_parent": {
                            "py/id": 340
                          },
                          "_select": [
                            {
                              "name": "customers",
                              "value": {
                                "count": {
                                  "distinct": "fact_product_sales.customer_key"
                                }
                              }
                            }
                          ],
                          "_slots": [
                            {
                              "py/id": 181
                            },
                            {
                              "py/id": 182
                            },
                            {
                              "py/id": 183
                            }
                          ],
                          "_slots_by_slot_id": {
                            "InDiE.slot.dim_product.color.eq0001": {
                              "py/id": 181
                            },
                            "InDiE.slot.dim_product.name.eq0001": {
                              "py/id": 182
                            },
                            "InDiE.slot.dim_store.store_type.eq0001": {
                              "py/id": 183
                            }
                          },
                          "_virtual_table": null,
                          "all_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_product.name.eq0001",
                              "InDiE.slot.dim_store.store_type.eq0001",
                              "InDiE.slot.dim_product.color.eq0001"
                            ]
                          },
                          "optional_slot_ids": {
                            "py/set": []
                          },
                          "required_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_product.name.eq0001",
                              "InDiE.slot.dim_store.store_type.eq0001",
                              "InDiE.slot.dim_product.color.eq0001"
                            ]
                          }
                        }
                      },
                      "_example_indices": [
                        15,
                        16,
                        17,
                        18,
                        19
                      ],
                      "_id": "dnplwsiv",
                      "_intent_tree": {
                        "py/id": 292
                      },
                      "_key": "0",
                      "_leaf_intent_permanent_id": null,
                      "_level": 2,
                      "_parent": {
                        "py/id": 339
                      },
                      "_slots": [],
                      "_virtual_table": {
                        "py/object": "indie.indie.virtual_table.VirtualTable",
                        "groupby": null,
                        "order_by": null,
                        "tables": null
                      }
                    }
                  },
                  "_example_indices": [
                    15,
                    16,
                    17,
                    18,
                    19
                  ],
                  "_id": "ktjgmryl",
                  "_intent_tree": {
                    "py/id": 292
                  },
                  "_key": "a9050b1869e02c99e3112e99f83de9680b1cfb06053f6294b8bd895d6386ce9f",
                  "_leaf_intent_permanent_id": null,
                  "_level": 1,
                  "_parent": {
                    "py/id": 301
                  },
                  "_slots": [],
                  "_virtual_table": {
                    "py/object": "indie.indie.virtual_table.VirtualTable",
                    "groupby": null,
                    "order_by": null,
                    "tables": {
                      "py/id": 97
                    }
                  }
                },
                "d639ae530dd86b1f5da2d550ed349cae0641bf4632352e0d83358f2f80eff72a": {
                  "py/object": "indie.indie.intent.Level1Intent",
                  "_ast": null,
                  "_children": {
                    "0": {
                      "py/object": "indie.indie.intent.Level2Intent",
                      "_ast": null,
                      "_children": {
                        "f90037e4ce8280d1e199d072c96b8f7dde3c25bc7cf49ca9115f1ffeefaf820b": {
                          "py/object": "indie.indie.intent.Level3Intent",
                          "_ast": {
                            "from": "dim_product",
                            "select": {
                              "py/id": 15
                            },
                            "where": "placeholder"
                          },
                          "_children": {
                            "bf10faa72823db14be399cb730bc69bd7c7d72a01be16b41fac554ef0dff302a": {
                              "py/object": "indie.indie.intent.Level4Intent",
                              "_ast": {
                                "from": "dim_product",
                                "select": {
                                  "py/id": 15
                                },
                                "where": {
                                  "gt": {
                                    "py/id": 16
                                  }
                                }
                              },
                              "_children": {},
                              "_example_indices": [
                                5,
                                6,
                                7,
                                8,
                                9
                              ],
                              "_id": "mftnrxbp",
                              "_intent_tree": {
                                "py/id": 292
                              },
                              "_key": "bf10faa72823db14be399cb730bc69bd7c7d72a01be16b41fac554ef0dff302a",
                              "_leaf_intent_permanent_id": 1,
                              "_level": 4,
                              "_parent": {
                                "py/id": 355
                              },
                              "_slots": {
                                "py/id": 45
                              },
                              "_virtual_table": null
                            }
                          },
                          "_example_indices": [
                            5,
                            6,
                            7,
                            8,
                            9
                          ],
                          "_id": "xcujiltg",
                          "_intent_tree": {
                            "py/id": 292
                          },
                          "_key": "f90037e4ce8280d1e199d072c96b8f7dde3c25bc7cf49ca9115f1ffeefaf820b",
                          "_leaf_intent_permanent_id": null,
                          "_level": 3,
                          "_parent": {
                            "py/id": 354
                          },
                          "_select": {
                            "py/id": 15
                          },
                          "_slots": [
                            {
                              "py/id": 46
                            }
                          ],
                          "_slots_by_slot_id": {
                            "InDiE.slot.dim_product.unit_cost.gt0001": {
                              "py/id": 46
                            }
                          },
                          "_virtual_table": null,
                          "all_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_product.unit_cost.gt0001"
                            ]
                          },
                          "optional_slot_ids": {
                            "py/set": []
                          },
                          "required_slot_ids": {
                            "py/set": [
                              "InDiE.slot.dim_product.unit_cost.gt0001"
                            ]
                          }
                        }
                      },
                      "_example_indices": [
                        5,
                        6,
                        7,
                        8,
                        9
                      ],
                      "_id": "dockegwj",
                      "_intent_tree": {
                        "py/id": 292
                      },
                      "_key": "0",
                      "_leaf_intent_permanent_id": null,
                      "_level": 2,
                      "_parent": {
                        "py/id": 353
                      },
                      "_slots": [],
                      "_virtual_table": {
                        "py/object": "indie.indie.virtual_table.VirtualTable",
                        "groupby": null,
                        "order_by": null,
                        "tables": null
                      }
                    }
                  },
                  "_example_indices": [
                    5,
                    6,
                    7,
                    8,
                    9
                  ],
                  "_id": "uhwmvenr",
                  "_intent_tree": {
                    "py/id": 292
                  },
                  "_key": "d639ae530dd86b1f5da2d550ed349cae0641bf4632352e0d83358f2f80eff72a",
                  "_leaf_intent_permanent_id": null,
                  "_level": 1,
                  "_parent": {
                    "py/id": 301
                  },
                  "_slots": [],
                  "_virtual_table": {
                    "py/object": "indie.indie.virtual_table.VirtualTable",
                    "groupby": null,
                    "order_by": null,
                    "tables": [
                      "dim_product"
                    ]
                  }
                },
                "e550e1a692a56e54a79c660428555f4acd68bc7f7a9fab787828bf6391a2d4a5": {
                  "py/id": 299
                }
              },
              "_example_indices": [
                0,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
                17,
                18,
                19,
                20,
                21,
                22,
                23,
                24
              ],
              "_id": "wqnpzuyv",
              "_intent_tree": {
                "py/id": 292
              },
              "_key": 0,
              "_leaf_intent_permanent_id": null,
              "_level": 0,
              "_parent": null,
              "_slots": [],
              "_virtual_table": null
            },
            "_slots": [],
            "_virtual_table": {
              "py/object": "indie.indie.virtual_table.VirtualTable",
              "groupby": null,
              "order_by": null,
              "tables": {
                "py/id": 51
              }
            }
          },
          "_slots": [],
          "_virtual_table": {
            "py/object": "indie.indie.virtual_table.VirtualTable",
            "groupby": null,
            "order_by": null,
            "tables": null
          }
        },
        "_select": [
          {
            "name": "orders",
            "value": {
              "count": {
                "distinct": "fact_product_sales.order_id"
              }
            }
          }
        ],
        "_slots": [
          {
            "py/id": 88
          }
        ],
        "_slots_by_slot_id": {
          "InDiE.slot.dim_date.date.gte0001": {
            "py/id": 88
          }
        },
        "_virtual_table": null,
        "all_slot_ids": {
          "py/set": [
            "InDiE.slot.dim_date.date.gte0001"
          ]
        },
        "optional_slot_ids": {
          "py/set": []
        },
        "required_slot_ids": {
          "py/set": [
            "InDiE.slot.dim_date.date.gte0001"
          ]
        }
      },
      "atbijsoy": {
        "py/id": 304
      },
      "bovjrswe": {
        "py/id": 326
      },
      "bunmtaeh": {
        "py/id": 309
      },
      "dnplwsiv": {
        "py/id": 340
      },
      "dockegwj": {
        "py/id": 354
      },
      "ebytwpnr": {
        "py/id": 303
      },
      "jbxmhpuf": {
        "py/id": 294
      },
      "jkfcwaiy": {
        "py/id": 325
      },
      "juepxbzv": {
        "py/id": 302
      },
      "ktjgmryl": {
        "py/id": 339
      },
      "kzcwrntl": {
        "py/id": 297
      },
      "mftnrxbp": {
        "py/id": 356
      },
      "oqpacgit": {
        "py/id": 299
      },
      "qftijogk": {
        "py/id": 342
      },
      "qpydahus": {
        "py/id": 341
      },
      "qxlkrejn": {
        "py/id": 324
      },
      "stryickf": {
        "py/id": 311
      },
      "uhwmvenr": {
        "py/id": 353
      },
      "wgiqmhft": {
        "py/id": 327
      },
      "wqnpzuyv": {
        "py/id": 301
      },
      "xcujiltg": {
        "py/id": 355
      },
      "ykajolxc": {
        "py/id": 305
      },
      "yuegrdst": {
        "py/id": 307
      },
      "zdrltjbe": {
        "py/id": 313
      }
    },
    "_intents_by_level": [
      [
        {
          "py/id": 301
        }
      ],
      [
        {
          "py/id": 302
        },
        {
          "py/id": 339
        },
        {
          "py/id": 299
        },
        {
          "py/id": 353
        },
        {
          "py/id": 324
        }
      ],
      [
        {
          "py/id": 303
        },
        {
          "py/id": 340
        },
        {
          "py/id": 297
        },
        {
          "py/id": 354
        },
        {
          "py/id": 325
        }
      ],
      [
        {
          "py/id": 304
        },
        {
          "py/id": 341
        },
        {
          "py/id": 293
        },
        {
          "py/id": 355
        },
        {
          "py/id": 326
        }
      ],
      [
        {
          "py/id": 307
        },
        {
          "py/id": 305
        },
        {
          "py/id": 311
        },
        {
          "py/id": 309
        },
        {
          "py/id": 313
        },
        {
          "py/id": 342
        },
        {
          "py/id": 294
        },
        {
          "py/id": 356
        },
        {
          "py/id": 327
        }
      ]
    ],
    "_leaf_intents": {
      "0": {
        "py/id": 327
      },
      "1": {
        "py/id": 356
      },
      "2": {
        "py/id": 294
      },
      "3": {
        "py/id": 342
      },
      "4": {
        "py/id": 313
      },
      "5": {
        "py/id": 309
      },
      "6": {
        "py/id": 311
      },
      "7": {
        "py/id": 305
      },
      "8": {
        "py/id": 307
      }
    },
    "_next_leaf_intent_permanent_id": 9,
    "_root": {
      "py/id": 301
    },
    "ignored_slot_ids": [],
    "lexicon": {
      "py/object": "indie.lexicon.lexicon.Lexicon",
      "dictionary": {
        "py/object": "indie.lexicon.dictionary.Dictionary",
        "key_values": {
          "0.1": 0.1,
          "1": 1,
          "100": 100,
          "1000": 1000,
          "10000": 10000,
          "1000000": 1000000,
          "100000000": 100000000,
          "1000000000": 1000000000,
          "10GB": "10GB plan",
          "10GB plan": "10GB plan",
          "12": 12,
          "123 Primrose Rd": "123 Primrose Rd",
          "datetime.datetime(2015, 1, 1, 0, 0)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B98BAQAAAAAAAA=="
              ]
            ]
          },
          "2017": 2017,
          "2019": 2019,
          "datetime.datetime(2019, 12, 31, 0, 0)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B+MMHwAAAAAAAA=="
              ]
            ]
          },
          "datetime.datetime(2019, 12, 31, 23, 59, 59)": {
            "py/object": "datetime.datetime",
            "__reduce__": [
              {
                "py/type": "datetime.datetime"
              },
              [
                "B+MMHxc7OwAAAA=="
              ]
            ]
          },
          "23 5th Avenue": "23 5th Avenue",
          "30": 30,
          "3000000000": 3000000000,
          "345 4th Street": "345 4th Street",
          "365": 365,
          "4": 4,
          "5": "5",
          "52": 52,
          "7": 7,
          "9999999999": 9999999999,
          "ABC": "ABC",
          "Alabama": "AL",
          "Alaska": "AK",
          "April": "April",
          "Arizona": "AZ",
          "Arkansas": "AR",
          "Atlanta": "Atlanta",
          "August": "August",
          "Black Friday": "Black Friday",
          "Boston": "Boston",
          "CA": "CA",
          "CBS": "CBS",
          "California": "CA",
          "Cambridge": "Cambridge",
          "Chante Aceves \u00ca": "Chante Aceves \u00ca",
          "Chicago": "Chicago",
          "Christmas": "Christmas",
          "Colorado": "CO",
          "Connecticut": "CT",
          "December": "December",
          "Delaware": "DE",
          "Devon Beckmann \u00ca": "Devon Beckmann \u00ca",
          "District of Columbia": "DC",
          "Doyle Jury \u00ca": "Doyle Jury \u00ca",
          "Elijah Laudenslager \u00ca": "Elijah Laudenslager \u00ca",
          "Email": "Email",
          "Essie Fetterman \u00ca": "Essie Fetterman \u00ca",
          "FL": "FL",
          "Facebook": "Facebook",
          "February": "February",
          "Florida": "FL",
          "Frederica Ross \u00ca": "Frederica Ross \u00ca",
          "Friday": "Friday",
          "GA": "GA",
          "Georgia": "GA",
          "Google ads": "Google ads",
          "HBO": "HBO",
          "Hawaii": "HI",
          "IL": "IL",
          "Idaho": "ID",
          "Illinois": "IL",
          "Indiana": "IN",
          "Iowa": "IA",
          "January": "January",
          "Jarred Wiers \u00ca": "Jarred Wiers \u00ca",
          "Jerica Schwartzman \u00ca": "Jerica Schwartzman \u00ca",
          "Josephine Riggie \u00ca": "Josephine Riggie \u00ca",
          "Judi Manigo \u00ca": "Judi Manigo \u00ca",
          "July": "July",
          "July 4": "July 4",
          "June": "June",
          "Kansas": "Kansas",
          "Keely Cheatam \u00ca": "Keely Cheatam \u00ca",
          "Kentucky": "KY",
          "LA time": "LA time",
          "Las Vegas": "Las Vegas",
          "Lindsey Sullen \u00ca": "Lindsey Sullen \u00ca",
          "Los Angeles": "Los Angeles",
          "Louisiana": "LA",
          "Lucila Byrns \u00ca": "Lucila Byrns \u00ca",
          "MA": "MA",
          "MI": "MI",
          "Maine": "ME",
          "March": "March",
          "Maryland": "MD",
          "Massachusetts": "MA",
          "May": "May",
          "Miami": "Miami",
          "Michigan": "MI",
          "Midwest": "Midwest",
          "Minnesota": "MN",
          "Mississippi": "MS",
          "Missouri": "MO",
          "Monday": "Monday",
          "Montana": "MT",
          "NV": "NV",
          "NY": "NY",
          "NY times": "NY times",
          "Nebraska": "NE",
          "Nevada": "NV",
          "New Hampshire": "NH",
          "New Jersey": "NJ",
          "New Mexico": "NM",
          "New York": "NY",
          "New York City": "New York City",
          "Nicholas Devera \u00ca": "Nicholas Devera \u00ca",
          "North Carolina": "NC",
          "North Dakota": "ND",
          "Northeast": "Northeast",
          "November": "November",
          "October": "October",
          "Ohio": "OH",
          "Oklahoma": "OK",
          "Oregon": "OR",
          "Osvaldo Winzer \u00ca": "Osvaldo Winzer \u00ca",
          "Pennsylvania": "PA",
          "Radio 92.3": "Radio 92.3",
          "Rhode Island": "RI",
          "SEM": "SEM",
          "SEO": "SEO",
          "SMS": "SMS",
          "San Francisco": "San Francisco",
          "Saturday": "Saturday",
          "Seattle": "Seattle",
          "Semi-annual": "Semi-annual",
          "September": "September",
          "South": "South",
          "South Carolina": "SC",
          "South Dakota": "SD",
          "Stewart Foskey \u00ca": "Stewart Foskey \u00ca",
          "Sunday": "Sunday",
          "Susanne Mickles \u00ca": "Susanne Mickles \u00ca",
          "Tennessee": "TN",
          "Texas": "TX",
          "Thursday": "Thursday",
          "Trudy Meldrum \u00ca": "Trudy Meldrum \u00ca",
          "Tuesday": "Tuesday",
          "USA": "USA",
          "Utah": "UT",
          "Valentine": "Valentine",
          "Vermont": "VT",
          "Virginia": "VA",
          "WA": "WA",
          "Washington": "WA",
          "Wednesday": "Wednesday",
          "Weekend": "Weekend",
          "West": "West",
          "West Virginia": "WV",
          "Willy Paulos \u00ca": "Willy Paulos \u00ca",
          "Wisconsin": "WI",
          "Wyoming": "WY",
          "Yee Mcdougall \u00ca": "Yee Mcdougall \u00ca",
          "abc@gmail.com": "abc@gmail.com",
          "accessories": "accessories",
          "billboard": "billboard",
          "black": "black",
          "bundled plans": "bundled plans",
          "buy_one_get_one": "buy_one_get_one",
          "devices": "devices",
          "direct": "direct",
          "discount": "discount",
          "e-commerce": "online",
          "earphones": "earphones",
          "family plan": "family plan",
          "gold": "gold",
          "iPads": "ipad",
          "internet": "internet",
          "ipad": "ipad",
          "ipad pro": "ipad pro",
          "iphone 11": "iphone 11",
          "iphone 11 pro": "iphone 11 pro",
          "iphone 7": "iphone 7",
          "iphone 8": "iphone 8",
          "iphone XS": "iphone XS",
          "iphone cover": "iphone cover",
          "multiples": "multiples",
          "newspaper": "newspaper",
          "online": "online",
          "pamphlet": "pamphlet",
          "phone": "phone",
          "physical": "physical",
          "pqrs@hotmail.com": "pqrs@hotmail.com",
          "radio": "radio",
          "red": "red",
          "screen protector": "screen protector",
          "silver": "silver",
          "store": "physical",
          "tablets": "tablets",
          "tv": "tv",
          "unlimited plan": "unlimited plan",
          "voice plans": "voice plans",
          "web": "web",
          "white": "white",
          "xyz@yahoo.com": "xyz@yahoo.com"
        },
        "value_keys": {
          "py/object": "collections.defaultdict",
          "0.1": {
            "py/set": [
              0.1
            ]
          },
          "1": {
            "py/set": [
              1
            ]
          },
          "100": {
            "py/set": [
              100
            ]
          },
          "1000": {
            "py/set": [
              1000
            ]
          },
          "10000": {
            "py/set": [
              10000
            ]
          },
          "1000000": {
            "py/set": [
              1000000
            ]
          },
          "100000000": {
            "py/set": [
              100000000
            ]
          },
          "1000000000": {
            "py/set": [
              1000000000
            ]
          },
          "10GB plan": {
            "py/set": [
              "10GB plan",
              "10GB"
            ]
          },
          "12": {
            "py/set": [
              12
            ]
          },
          "123 Primrose Rd": {
            "py/set": [
              "123 Primrose Rd"
            ]
          },
          "datetime.datetime(2015, 1, 1, 0, 0)": {
            "py/set": [
              {
                "py/object": "datetime.datetime",
                "__reduce__": [
                  {
                    "py/type": "datetime.datetime"
                  },
                  [
                    "B98BAQAAAAAAAA=="
                  ]
                ]
              }
            ]
          },
          "2017": {
            "py/set": [
              2017
            ]
          },
          "2019": {
            "py/set": [
              2019
            ]
          },
          "datetime.datetime(2019, 12, 31, 0, 0)": {
            "py/set": [
              {
                "py/object": "datetime.datetime",
                "__reduce__": [
                  {
                    "py/type": "datetime.datetime"
                  },
                  [
                    "B+MMHwAAAAAAAA=="
                  ]
                ]
              }
            ]
          },
          "datetime.datetime(2019, 12, 31, 23, 59, 59)": {
            "py/set": [
              {
                "py/id": 386
              }
            ]
          },
          "23 5th Avenue": {
            "py/set": [
              "23 5th Avenue"
            ]
          },
          "30": {
            "py/set": [
              30
            ]
          },
          "3000000000": {
            "py/set": [
              3000000000
            ]
          },
          "345 4th Street": {
            "py/set": [
              "345 4th Street"
            ]
          },
          "365": {
            "py/set": [
              365
            ]
          },
          "4": {
            "py/set": [
              4
            ]
          },
          "5": {
            "py/set": [
              "5"
            ]
          },
          "52": {
            "py/set": [
              52
            ]
          },
          "7": {
            "py/set": [
              7
            ]
          },
          "9999999999": {
            "py/set": [
              9999999999
            ]
          },
          "ABC": {
            "py/set": [
              "ABC"
            ]
          },
          "AK": {
            "py/set": [
              "Alaska"
            ]
          },
          "AL": {
            "py/set": [
              "Alabama"
            ]
          },
          "AR": {
            "py/set": [
              "Arkansas"
            ]
          },
          "AZ": {
            "py/set": [
              "Arizona"
            ]
          },
          "April": {
            "py/set": [
              "April"
            ]
          },
          "Atlanta": {
            "py/set": [
              "Atlanta"
            ]
          },
          "August": {
            "py/set": [
              "August"
            ]
          },
          "Black Friday": {
            "py/set": [
              "Black Friday"
            ]
          },
          "Boston": {
            "py/set": [
              "Boston"
            ]
          },
          "CA": {
            "py/set": [
              "CA",
              "California"
            ]
          },
          "CBS": {
            "py/set": [
              "CBS"
            ]
          },
          "CO": {
            "py/set": [
              "Colorado"
            ]
          },
          "CT": {
            "py/set": [
              "Connecticut"
            ]
          },
          "Cambridge": {
            "py/set": [
              "Cambridge"
            ]
          },
          "Chante Aceves \u00ca": {
            "py/set": [
              "Chante Aceves \u00ca"
            ]
          },
          "Chicago": {
            "py/set": [
              "Chicago"
            ]
          },
          "Christmas": {
            "py/set": [
              "Christmas"
            ]
          },
          "DC": {
            "py/set": [
              "District of Columbia"
            ]
          },
          "DE": {
            "py/set": [
              "Delaware"
            ]
          },
          "December": {
            "py/set": [
              "December"
            ]
          },
          "Devon Beckmann \u00ca": {
            "py/set": [
              "Devon Beckmann \u00ca"
            ]
          },
          "Doyle Jury \u00ca": {
            "py/set": [
              "Doyle Jury \u00ca"
            ]
          },
          "Elijah Laudenslager \u00ca": {
            "py/set": [
              "Elijah Laudenslager \u00ca"
            ]
          },
          "Email": {
            "py/set": [
              "Email"
            ]
          },
          "Essie Fetterman \u00ca": {
            "py/set": [
              "Essie Fetterman \u00ca"
            ]
          },
          "FL": {
            "py/set": [
              "Florida",
              "FL"
            ]
          },
          "Facebook": {
            "py/set": [
              "Facebook"
            ]
          },
          "February": {
            "py/set": [
              "February"
            ]
          },
          "Frederica Ross \u00ca": {
            "py/set": [
              "Frederica Ross \u00ca"
            ]
          },
          "Friday": {
            "py/set": [
              "Friday"
            ]
          },
          "GA": {
            "py/set": [
              "Georgia",
              "GA"
            ]
          },
          "Google ads": {
            "py/set": [
              "Google ads"
            ]
          },
          "HBO": {
            "py/set": [
              "HBO"
            ]
          },
          "HI": {
            "py/set": [
              "Hawaii"
            ]
          },
          "IA": {
            "py/set": [
              "Iowa"
            ]
          },
          "ID": {
            "py/set": [
              "Idaho"
            ]
          },
          "IL": {
            "py/set": [
              "IL",
              "Illinois"
            ]
          },
          "IN": {
            "py/set": [
              "Indiana"
            ]
          },
          "January": {
            "py/set": [
              "January"
            ]
          },
          "Jarred Wiers \u00ca": {
            "py/set": [
              "Jarred Wiers \u00ca"
            ]
          },
          "Jerica Schwartzman \u00ca": {
            "py/set": [
              "Jerica Schwartzman \u00ca"
            ]
          },
          "Josephine Riggie \u00ca": {
            "py/set": [
              "Josephine Riggie \u00ca"
            ]
          },
          "Judi Manigo \u00ca": {
            "py/set": [
              "Judi Manigo \u00ca"
            ]
          },
          "July": {
            "py/set": [
              "July"
            ]
          },
          "July 4": {
            "py/set": [
              "July 4"
            ]
          },
          "June": {
            "py/set": [
              "June"
            ]
          },
          "KY": {
            "py/set": [
              "Kentucky"
            ]
          },
          "Kansas": {
            "py/set": [
              "Kansas"
            ]
          },
          "Keely Cheatam \u00ca": {
            "py/set": [
              "Keely Cheatam \u00ca"
            ]
          },
          "LA": {
            "py/set": [
              "Louisiana"
            ]
          },
          "LA time": {
            "py/set": [
              "LA time"
            ]
          },
          "Las Vegas": {
            "py/set": [
              "Las Vegas"
            ]
          },
          "Lindsey Sullen \u00ca": {
            "py/set": [
              "Lindsey Sullen \u00ca"
            ]
          },
          "Los Angeles": {
            "py/set": [
              "Los Angeles"
            ]
          },
          "Lucila Byrns \u00ca": {
            "py/set": [
              "Lucila Byrns \u00ca"
            ]
          },
          "MA": {
            "py/set": [
              "MA",
              "Massachusetts"
            ]
          },
          "MD": {
            "py/set": [
              "Maryland"
            ]
          },
          "ME": {
            "py/set": [
              "Maine"
            ]
          },
          "MI": {
            "py/set": [
              "MI",
              "Michigan"
            ]
          },
          "MN": {
            "py/set": [
              "Minnesota"
            ]
          },
          "MO": {
            "py/set": [
              "Missouri"
            ]
          },
          "MS": {
            "py/set": [
              "Mississippi"
            ]
          },
          "MT": {
            "py/set": [
              "Montana"
            ]
          },
          "March": {
            "py/set": [
              "March"
            ]
          },
          "May": {
            "py/set": [
              "May"
            ]
          },
          "Miami": {
            "py/set": [
              "Miami"
            ]
          },
          "Midwest": {
            "py/set": [
              "Midwest"
            ]
          },
          "Monday": {
            "py/set": [
              "Monday"
            ]
          },
          "NC": {
            "py/set": [
              "North Carolina"
            ]
          },
          "ND": {
            "py/set": [
              "North Dakota"
            ]
          },
          "NE": {
            "py/set": [
              "Nebraska"
            ]
          },
          "NH": {
            "py/set": [
              "New Hampshire"
            ]
          },
          "NJ": {
            "py/set": [
              "New Jersey"
            ]
          },
          "NM": {
            "py/set": [
              "New Mexico"
            ]
          },
          "NV": {
            "py/set": [
              "NV",
              "Nevada"
            ]
          },
          "NY": {
            "py/set": [
              "New York",
              "NY"
            ]
          },
          "NY times": {
            "py/set": [
              "NY times"
            ]
          },
          "New York City": {
            "py/set": [
              "New York City"
            ]
          },
          "Nicholas Devera \u00ca": {
            "py/set": [
              "Nicholas Devera \u00ca"
            ]
          },
          "Northeast": {
            "py/set": [
              "Northeast"
            ]
          },
          "November": {
            "py/set": [
              "November"
            ]
          },
          "OH": {
            "py/set": [
              "Ohio"
            ]
          },
          "OK": {
            "py/set": [
              "Oklahoma"
            ]
          },
          "OR": {
            "py/set": [
              "Oregon"
            ]
          },
          "October": {
            "py/set": [
              "October"
            ]
          },
          "Osvaldo Winzer \u00ca": {
            "py/set": [
              "Osvaldo Winzer \u00ca"
            ]
          },
          "PA": {
            "py/set": [
              "Pennsylvania"
            ]
          },
          "RI": {
            "py/set": [
              "Rhode Island"
            ]
          },
          "Radio 92.3": {
            "py/set": [
              "Radio 92.3"
            ]
          },
          "SC": {
            "py/set": [
              "South Carolina"
            ]
          },
          "SD": {
            "py/set": [
              "South Dakota"
            ]
          },
          "SEM": {
            "py/set": [
              "SEM"
            ]
          },
          "SEO": {
            "py/set": [
              "SEO"
            ]
          },
          "SMS": {
            "py/set": [
              "SMS"
            ]
          },
          "San Francisco": {
            "py/set": [
              "San Francisco"
            ]
          },
          "Saturday": {
            "py/set": [
              "Saturday"
            ]
          },
          "Seattle": {
            "py/set": [
              "Seattle"
            ]
          },
          "Semi-annual": {
            "py/set": [
              "Semi-annual"
            ]
          },
          "September": {
            "py/set": [
              "September"
            ]
          },
          "South": {
            "py/set": [
              "South"
            ]
          },
          "Stewart Foskey \u00ca": {
            "py/set": [
              "Stewart Foskey \u00ca"
            ]
          },
          "Sunday": {
            "py/set": [
              "Sunday"
            ]
          },
          "Susanne Mickles \u00ca": {
            "py/set": [
              "Susanne Mickles \u00ca"
            ]
          },
          "TN": {
            "py/set": [
              "Tennessee"
            ]
          },
          "TX": {
            "py/set": [
              "Texas"
            ]
          },
          "Thursday": {
            "py/set": [
              "Thursday"
            ]
          },
          "Trudy Meldrum \u00ca": {
            "py/set": [
              "Trudy Meldrum \u00ca"
            ]
          },
          "Tuesday": {
            "py/set": [
              "Tuesday"
            ]
          },
          "USA": {
            "py/set": [
              "USA"
            ]
          },
          "UT": {
            "py/set": [
              "Utah"
            ]
          },
          "VA": {
            "py/set": [
              "Virginia"
            ]
          },
          "VT": {
            "py/set": [
              "Vermont"
            ]
          },
          "Valentine": {
            "py/set": [
              "Valentine"
            ]
          },
          "WA": {
            "py/set": [
              "WA",
              "Washington"
            ]
          },
          "WI": {
            "py/set": [
              "Wisconsin"
            ]
          },
          "WV": {
            "py/set": [
              "West Virginia"
            ]
          },
          "WY": {
            "py/set": [
              "Wyoming"
            ]
          },
          "Wednesday": {
            "py/set": [
              "Wednesday"
            ]
          },
          "Weekend": {
            "py/set": [
              "Weekend"
            ]
          },
          "West": {
            "py/set": [
              "West"
            ]
          },
          "Willy Paulos \u00ca": {
            "py/set": [
              "Willy Paulos \u00ca"
            ]
          },
          "Yee Mcdougall \u00ca": {
            "py/set": [
              "Yee Mcdougall \u00ca"
            ]
          },
          "abc@gmail.com": {
            "py/set": [
              "abc@gmail.com"
            ]
          },
          "accessories": {
            "py/set": [
              "accessories"
            ]
          },
          "billboard": {
            "py/set": [
              "billboard"
            ]
          },
          "black": {
            "py/set": [
              "black"
            ]
          },
          "bundled plans": {
            "py/set": [
              "bundled plans"
            ]
          },
          "buy_one_get_one": {
            "py/set": [
              "buy_one_get_one"
            ]
          },
          "devices": {
            "py/set": [
              "devices"
            ]
          },
          "direct": {
            "py/set": [
              "direct"
            ]
          },
          "discount": {
            "py/set": [
              "discount"
            ]
          },
          "earphones": {
            "py/set": [
              "earphones"
            ]
          },
          "family plan": {
            "py/set": [
              "family plan"
            ]
          },
          "gold": {
            "py/set": [
              "gold"
            ]
          },
          "internet": {
            "py/set": [
              "internet"
            ]
          },
          "ipad": {
            "py/set": [
              "iPads",
              "ipad"
            ]
          },
          "ipad pro": {
            "py/set": [
              "ipad pro"
            ]
          },
          "iphone 11": {
            "py/set": [
              "iphone 11"
            ]
          },
          "iphone 11 pro": {
            "py/set": [
              "iphone 11 pro"
            ]
          },
          "iphone 7": {
            "py/set": [
              "iphone 7"
            ]
          },
          "iphone 8": {
            "py/set": [
              "iphone 8"
            ]
          },
          "iphone XS": {
            "py/set": [
              "iphone XS"
            ]
          },
          "iphone cover": {
            "py/set": [
              "iphone cover"
            ]
          },
          "multiples": {
            "py/set": [
              "multiples"
            ]
          },
          "newspaper": {
            "py/set": [
              "newspaper"
            ]
          },
          "online": {
            "py/set": [
              "e-commerce",
              "online"
            ]
          },
          "pamphlet": {
            "py/set": [
              "pamphlet"
            ]
          },
          "phone": {
            "py/set": [
              "phone"
            ]
          },
          "physical": {
            "py/set": [
              "store",
              "physical"
            ]
          },
          "pqrs@hotmail.com": {
            "py/set": [
              "pqrs@hotmail.com"
            ]
          },
          "radio": {
            "py/set": [
              "radio"
            ]
          },
          "red": {
            "py/set": [
              "red"
            ]
          },
          "screen protector": {
            "py/set": [
              "screen protector"
            ]
          },
          "silver": {
            "py/set": [
              "silver"
            ]
          },
          "tablets": {
            "py/set": [
              "tablets"
            ]
          },
          "tv": {
            "py/set": [
              "tv"
            ]
          },
          "unlimited plan": {
            "py/set": [
              "unlimited plan"
            ]
          },
          "voice plans": {
            "py/set": [
              "voice plans"
            ]
          },
          "web": {
            "py/set": [
              "web"
            ]
          },
          "white": {
            "py/set": [
              "white"
            ]
          },
          "xyz@yahoo.com": {
            "py/set": [
              "xyz@yahoo.com"
            ]
          },
          "default_factory": {
            "py/type": "builtins.set"
          }
        }
      },
      "dictionary_entities": [
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused8]",
          "tag_mask": "\u0937\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_id",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused9]",
          "tag_mask": "\u0937\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "account_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused10]",
          "tag_mask": "\u0937\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "city",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused11]",
          "tag_mask": "\u0937\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "state",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Alabama": "AL",
              "Alaska": "AK",
              "Arizona": "AZ",
              "Arkansas": "AR",
              "CA": "CA",
              "California": "CA",
              "Colorado": "CO",
              "Connecticut": "CT",
              "Delaware": "DE",
              "District of Columbia": "DC",
              "FL": "FL",
              "Florida": "FL",
              "GA": "GA",
              "Georgia": "GA",
              "Hawaii": "HI",
              "IL": "IL",
              "Idaho": "ID",
              "Illinois": "IL",
              "Indiana": "IN",
              "Iowa": "IA",
              "Kansas": "KS",
              "Kentucky": "KY",
              "Louisiana": "LA",
              "MA": "MA",
              "MI": "MI",
              "Maine": "ME",
              "Maryland": "MD",
              "Massachusetts": "MA",
              "Michigan": "MI",
              "Minnesota": "MN",
              "Mississippi": "MS",
              "Missouri": "MO",
              "Montana": "MT",
              "NV": "NV",
              "NY": "NY",
              "Nebraska": "NE",
              "Nevada": "NV",
              "New Hampshire": "NH",
              "New Jersey": "NJ",
              "New Mexico": "NM",
              "New York": "NY",
              "North Carolina": "NC",
              "North Dakota": "ND",
              "Ohio": "OH",
              "Oklahoma": "OK",
              "Oregon": "OR",
              "Pennsylvania": "PA",
              "Rhode Island": "RI",
              "South Carolina": "SC",
              "South Dakota": "SD",
              "Tennessee": "TN",
              "Texas": "TX",
              "Utah": "UT",
              "Vermont": "VT",
              "Virginia": "VA",
              "WA": "WA",
              "Washington": "WA",
              "West Virginia": "WV",
              "Wisconsin": "WI",
              "Wyoming": "WY"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "AK": {
                "py/set": [
                  "Alaska"
                ]
              },
              "AL": {
                "py/set": [
                  "Alabama"
                ]
              },
              "AR": {
                "py/set": [
                  "Arkansas"
                ]
              },
              "AZ": {
                "py/set": [
                  "Arizona"
                ]
              },
              "CA": {
                "py/set": [
                  "CA",
                  "California"
                ]
              },
              "CO": {
                "py/set": [
                  "Colorado"
                ]
              },
              "CT": {
                "py/set": [
                  "Connecticut"
                ]
              },
              "DC": {
                "py/set": [
                  "District of Columbia"
                ]
              },
              "DE": {
                "py/set": [
                  "Delaware"
                ]
              },
              "FL": {
                "py/set": [
                  "Florida",
                  "FL"
                ]
              },
              "GA": {
                "py/set": [
                  "Georgia",
                  "GA"
                ]
              },
              "HI": {
                "py/set": [
                  "Hawaii"
                ]
              },
              "IA": {
                "py/set": [
                  "Iowa"
                ]
              },
              "ID": {
                "py/set": [
                  "Idaho"
                ]
              },
              "IL": {
                "py/set": [
                  "IL",
                  "Illinois"
                ]
              },
              "IN": {
                "py/set": [
                  "Indiana"
                ]
              },
              "KS": {
                "py/set": [
                  "Kansas"
                ]
              },
              "KY": {
                "py/set": [
                  "Kentucky"
                ]
              },
              "LA": {
                "py/set": [
                  "Louisiana"
                ]
              },
              "MA": {
                "py/set": [
                  "MA",
                  "Massachusetts"
                ]
              },
              "MD": {
                "py/set": [
                  "Maryland"
                ]
              },
              "ME": {
                "py/set": [
                  "Maine"
                ]
              },
              "MI": {
                "py/set": [
                  "MI",
                  "Michigan"
                ]
              },
              "MN": {
                "py/set": [
                  "Minnesota"
                ]
              },
              "MO": {
                "py/set": [
                  "Missouri"
                ]
              },
              "MS": {
                "py/set": [
                  "Mississippi"
                ]
              },
              "MT": {
                "py/set": [
                  "Montana"
                ]
              },
              "NC": {
                "py/set": [
                  "North Carolina"
                ]
              },
              "ND": {
                "py/set": [
                  "North Dakota"
                ]
              },
              "NE": {
                "py/set": [
                  "Nebraska"
                ]
              },
              "NH": {
                "py/set": [
                  "New Hampshire"
                ]
              },
              "NJ": {
                "py/set": [
                  "New Jersey"
                ]
              },
              "NM": {
                "py/set": [
                  "New Mexico"
                ]
              },
              "NV": {
                "py/set": [
                  "NV",
                  "Nevada"
                ]
              },
              "NY": {
                "py/set": [
                  "New York",
                  "NY"
                ]
              },
              "OH": {
                "py/set": [
                  "Ohio"
                ]
              },
              "OK": {
                "py/set": [
                  "Oklahoma"
                ]
              },
              "OR": {
                "py/set": [
                  "Oregon"
                ]
              },
              "PA": {
                "py/set": [
                  "Pennsylvania"
                ]
              },
              "RI": {
                "py/set": [
                  "Rhode Island"
                ]
              },
              "SC": {
                "py/set": [
                  "South Carolina"
                ]
              },
              "SD": {
                "py/set": [
                  "South Dakota"
                ]
              },
              "TN": {
                "py/set": [
                  "Tennessee"
                ]
              },
              "TX": {
                "py/set": [
                  "Texas"
                ]
              },
              "UT": {
                "py/set": [
                  "Utah"
                ]
              },
              "VA": {
                "py/set": [
                  "Virginia"
                ]
              },
              "VT": {
                "py/set": [
                  "Vermont"
                ]
              },
              "WA": {
                "py/set": [
                  "WA",
                  "Washington"
                ]
              },
              "WI": {
                "py/set": [
                  "Wisconsin"
                ]
              },
              "WV": {
                "py/set": [
                  "West Virginia"
                ]
              },
              "WY": {
                "py/set": [
                  "Wyoming"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused12]",
          "tag_mask": "\u0937\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "country",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "USA": "USA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "USA": {
                "py/set": [
                  "USA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused13]",
          "tag_mask": "\u0937\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_registered",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 00:00:00": "2019-12-31 00:00:00"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 00:00:00": {
                "py/set": [
                  "2019-12-31 00:00:00"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.datetime_formatter.EntityDateTimeValueFormatter",
                "format_str": "%Y-%m-%d"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused14]",
          "tag_mask": "\u0937\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "preferred_channel1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "online": "online",
              "store": "store"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "online": {
                "py/set": [
                  "online"
                ]
              },
              "store": {
                "py/set": [
                  "store"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused15]",
          "tag_mask": "\u0937\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "interest1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB plan"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused16]",
          "tag_mask": "\u0937\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Chante Aceves \u00ca": "Chante Aceves \u00ca",
              "Devon Beckmann \u00ca": "Devon Beckmann \u00ca",
              "Doyle Jury \u00ca": "Doyle Jury \u00ca",
              "Elijah Laudenslager \u00ca": "Elijah Laudenslager \u00ca",
              "Essie Fetterman \u00ca": "Essie Fetterman \u00ca",
              "Frederica Ross \u00ca": "Frederica Ross \u00ca",
              "Jarred Wiers \u00ca": "Jarred Wiers \u00ca",
              "Jerica Schwartzman \u00ca": "Jerica Schwartzman \u00ca",
              "Josephine Riggie \u00ca": "Josephine Riggie \u00ca",
              "Judi Manigo \u00ca": "Judi Manigo \u00ca",
              "Keely Cheatam \u00ca": "Keely Cheatam \u00ca",
              "Lindsey Sullen \u00ca": "Lindsey Sullen \u00ca",
              "Lucila Byrns \u00ca": "Lucila Byrns \u00ca",
              "Nicholas Devera \u00ca": "Nicholas Devera \u00ca",
              "Osvaldo Winzer \u00ca": "Osvaldo Winzer \u00ca",
              "Stewart Foskey \u00ca": "Stewart Foskey \u00ca",
              "Susanne Mickles \u00ca": "Susanne Mickles \u00ca",
              "Trudy Meldrum \u00ca": "Trudy Meldrum \u00ca",
              "Willy Paulos \u00ca": "Willy Paulos \u00ca",
              "Yee Mcdougall \u00ca": "Yee Mcdougall \u00ca"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Chante Aceves \u00ca": {
                "py/set": [
                  "Chante Aceves \u00ca"
                ]
              },
              "Devon Beckmann \u00ca": {
                "py/set": [
                  "Devon Beckmann \u00ca"
                ]
              },
              "Doyle Jury \u00ca": {
                "py/set": [
                  "Doyle Jury \u00ca"
                ]
              },
              "Elijah Laudenslager \u00ca": {
                "py/set": [
                  "Elijah Laudenslager \u00ca"
                ]
              },
              "Essie Fetterman \u00ca": {
                "py/set": [
                  "Essie Fetterman \u00ca"
                ]
              },
              "Frederica Ross \u00ca": {
                "py/set": [
                  "Frederica Ross \u00ca"
                ]
              },
              "Jarred Wiers \u00ca": {
                "py/set": [
                  "Jarred Wiers \u00ca"
                ]
              },
              "Jerica Schwartzman \u00ca": {
                "py/set": [
                  "Jerica Schwartzman \u00ca"
                ]
              },
              "Josephine Riggie \u00ca": {
                "py/set": [
                  "Josephine Riggie \u00ca"
                ]
              },
              "Judi Manigo \u00ca": {
                "py/set": [
                  "Judi Manigo \u00ca"
                ]
              },
              "Keely Cheatam \u00ca": {
                "py/set": [
                  "Keely Cheatam \u00ca"
                ]
              },
              "Lindsey Sullen \u00ca": {
                "py/set": [
                  "Lindsey Sullen \u00ca"
                ]
              },
              "Lucila Byrns \u00ca": {
                "py/set": [
                  "Lucila Byrns \u00ca"
                ]
              },
              "Nicholas Devera \u00ca": {
                "py/set": [
                  "Nicholas Devera \u00ca"
                ]
              },
              "Osvaldo Winzer \u00ca": {
                "py/set": [
                  "Osvaldo Winzer \u00ca"
                ]
              },
              "Stewart Foskey \u00ca": {
                "py/set": [
                  "Stewart Foskey \u00ca"
                ]
              },
              "Susanne Mickles \u00ca": {
                "py/set": [
                  "Susanne Mickles \u00ca"
                ]
              },
              "Trudy Meldrum \u00ca": {
                "py/set": [
                  "Trudy Meldrum \u00ca"
                ]
              },
              "Willy Paulos \u00ca": {
                "py/set": [
                  "Willy Paulos \u00ca"
                ]
              },
              "Yee Mcdougall \u00ca": {
                "py/set": [
                  "Yee Mcdougall \u00ca"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused17]",
          "tag_mask": "\u0937\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "channel",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Email": "Email",
              "SEM": "SEM",
              "SEO": "SEO",
              "SMS": "SMS",
              "direct": "direct"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Email": {
                "py/set": [
                  "Email"
                ]
              },
              "SEM": {
                "py/set": [
                  "SEM"
                ]
              },
              "SEO": {
                "py/set": [
                  "SEO"
                ]
              },
              "SMS": {
                "py/set": [
                  "SMS"
                ]
              },
              "direct": {
                "py/set": [
                  "direct"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused18]",
          "tag_mask": "\u0937\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "phone_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "3000000000": "3000000000",
              "9999999999": "9999999999"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "3000000000": {
                "py/set": [
                  "3000000000"
                ]
              },
              "9999999999": {
                "py/set": [
                  "9999999999"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused19]",
          "tag_mask": "\u0937\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "email_address",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "abc@gmail.com": "abc@gmail.com",
              "pqrs@hotmail.com": "pqrs@hotmail.com",
              "xyz@yahoo.com": "xyz@yahoo.com"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "abc@gmail.com": {
                "py/set": [
                  "abc@gmail.com"
                ]
              },
              "pqrs@hotmail.com": {
                "py/set": [
                  "pqrs@hotmail.com"
                ]
              },
              "xyz@yahoo.com": {
                "py/set": [
                  "xyz@yahoo.com"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused20]",
          "tag_mask": "\u0937\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "Address1",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "123 Primrose Rd": "123 Primrose Rd",
              "23 5th Avenue": "23 5th Avenue",
              "345 4th Street": "345 4th Street"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "123 Primrose Rd": {
                "py/set": [
                  "123 Primrose Rd"
                ]
              },
              "23 5th Avenue": {
                "py/set": [
                  "23 5th Avenue"
                ]
              },
              "345 4th Street": {
                "py/set": [
                  "345 4th Street"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused21]",
          "tag_mask": "\u0937\u0902"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "zipcode",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "5": "5"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "5": {
                "py/set": [
                  "5"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_customer",
          "tag": "[unused22]",
          "tag_mask": "\u0937\u091f"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "10000": "10000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "10000": {
                "py/set": [
                  "10000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused23]",
          "tag_mask": "\u00ac\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 00:00:00": "2019-12-31 00:00:00"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 00:00:00": {
                "py/set": [
                  "2019-12-31 00:00:00"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.datetime_formatter.EntityDateTimeValueFormatter",
                "format_str": "%Y-%m-%d"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused24]",
          "tag_mask": "\u00ac\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "30": "30"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "30": {
                "py/set": [
                  "30"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused25]",
          "tag_mask": "\u00ac\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_of_the_week",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "7": "7"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "7": {
                "py/set": [
                  "7"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused26]",
          "tag_mask": "\u00ac\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Friday": "Friday",
              "Monday": "Monday",
              "Saturday": "Saturday",
              "Sunday": "Sunday",
              "Thursday": "Thursday",
              "Tuesday": "Tuesday",
              "Wednesday": "Wednesday"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Friday": {
                "py/set": [
                  "Friday"
                ]
              },
              "Monday": {
                "py/set": [
                  "Monday"
                ]
              },
              "Saturday": {
                "py/set": [
                  "Saturday"
                ]
              },
              "Sunday": {
                "py/set": [
                  "Sunday"
                ]
              },
              "Thursday": {
                "py/set": [
                  "Thursday"
                ]
              },
              "Tuesday": {
                "py/set": [
                  "Tuesday"
                ]
              },
              "Wednesday": {
                "py/set": [
                  "Wednesday"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused27]",
          "tag_mask": "\u00ac\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "day_of_the_year",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "365": "365"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "365": {
                "py/set": [
                  "365"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused28]",
          "tag_mask": "\u00ac\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "week_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "52": "52"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "52": {
                "py/set": [
                  "52"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused29]",
          "tag_mask": "\u00ac\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "month",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "12": "12"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "12": {
                "py/set": [
                  "12"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused30]",
          "tag_mask": "\u00ac\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "month_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "April": "April",
              "August": "August",
              "December": "December",
              "February": "February",
              "January": "January",
              "July": "July",
              "June": "June",
              "March": "March",
              "May": "May",
              "November": "November",
              "October": "October",
              "September": "September"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "April": {
                "py/set": [
                  "April"
                ]
              },
              "August": {
                "py/set": [
                  "August"
                ]
              },
              "December": {
                "py/set": [
                  "December"
                ]
              },
              "February": {
                "py/set": [
                  "February"
                ]
              },
              "January": {
                "py/set": [
                  "January"
                ]
              },
              "July": {
                "py/set": [
                  "July"
                ]
              },
              "June": {
                "py/set": [
                  "June"
                ]
              },
              "March": {
                "py/set": [
                  "March"
                ]
              },
              "May": {
                "py/set": [
                  "May"
                ]
              },
              "November": {
                "py/set": [
                  "November"
                ]
              },
              "October": {
                "py/set": [
                  "October"
                ]
              },
              "September": {
                "py/set": [
                  "September"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused31]",
          "tag_mask": "\u00ac\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "quarter",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "4": "4"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "4": {
                "py/set": [
                  "4"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused32]",
          "tag_mask": "\u00ac\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "year",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2017": "2017",
              "2019": "2019"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2017": {
                "py/set": [
                  "2017"
                ]
              },
              "2019": {
                "py/set": [
                  "2019"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused33]",
          "tag_mask": "\u00ac\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "week_day",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused34]",
          "tag_mask": "\u00ac\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "us_holiday",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_date",
          "tag": "[unused35]",
          "tag_mask": "\u00ac\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000": "1000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000": {
                "py/set": [
                  "1000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused36]",
          "tag_mask": "\u0941\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB": "10GB plan",
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "iPads": "ipad",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB plan",
                  "10GB"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "iPads",
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused37]",
          "tag_mask": "\u0941\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "description",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "10GB plan": "10GB plan",
              "earphones": "earphones",
              "family plan": "family plan",
              "ipad": "ipad",
              "ipad pro": "ipad pro",
              "iphone 11": "iphone 11",
              "iphone 11 pro": "iphone 11 pro",
              "iphone 7": "iphone 7",
              "iphone 8": "iphone 8",
              "iphone XS": "iphone XS",
              "iphone cover": "iphone cover",
              "screen protector": "screen protector",
              "unlimited plan": "unlimited plan"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "10GB plan": {
                "py/set": [
                  "10GB plan"
                ]
              },
              "earphones": {
                "py/set": [
                  "earphones"
                ]
              },
              "family plan": {
                "py/set": [
                  "family plan"
                ]
              },
              "ipad": {
                "py/set": [
                  "ipad"
                ]
              },
              "ipad pro": {
                "py/set": [
                  "ipad pro"
                ]
              },
              "iphone 11": {
                "py/set": [
                  "iphone 11"
                ]
              },
              "iphone 11 pro": {
                "py/set": [
                  "iphone 11 pro"
                ]
              },
              "iphone 7": {
                "py/set": [
                  "iphone 7"
                ]
              },
              "iphone 8": {
                "py/set": [
                  "iphone 8"
                ]
              },
              "iphone XS": {
                "py/set": [
                  "iphone XS"
                ]
              },
              "iphone cover": {
                "py/set": [
                  "iphone cover"
                ]
              },
              "screen protector": {
                "py/set": [
                  "screen protector"
                ]
              },
              "unlimited plan": {
                "py/set": [
                  "unlimited plan"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused38]",
          "tag_mask": "\u0941\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "accessories": "accessories",
              "bundled plans": "bundled plans",
              "phone": "phone",
              "tablets": "tablets"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "accessories": {
                "py/set": [
                  "accessories"
                ]
              },
              "bundled plans": {
                "py/set": [
                  "bundled plans"
                ]
              },
              "phone": {
                "py/set": [
                  "phone"
                ]
              },
              "tablets": {
                "py/set": [
                  "tablets"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused39]",
          "tag_mask": "\u0941\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_category",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "devices": "devices",
              "internet": "internet",
              "voice plans": "voice plans"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "devices": {
                "py/set": [
                  "devices"
                ]
              },
              "internet": {
                "py/set": [
                  "internet"
                ]
              },
              "voice plans": {
                "py/set": [
                  "voice plans"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused40]",
          "tag_mask": "\u0941\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_price",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused41]",
          "tag_mask": "\u0941\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused42]",
          "tag_mask": "\u0941\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "color",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "black": "black",
              "gold": "gold",
              "red": "red",
              "silver": "silver",
              "white": "white"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "black": {
                "py/set": [
                  "black"
                ]
              },
              "gold": {
                "py/set": [
                  "gold"
                ]
              },
              "red": {
                "py/set": [
                  "red"
                ]
              },
              "silver": {
                "py/set": [
                  "silver"
                ]
              },
              "white": {
                "py/set": [
                  "white"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_product",
          "tag": "[unused43]",
          "tag_mask": "\u0941\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused44]",
          "tag_mask": "\u00a2\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Black Friday": "Black Friday",
              "Christmas": "Christmas",
              "July 4": "July 4",
              "Semi-annual": "Semi-annual",
              "Valentine": "Valentine",
              "Weekend": "Weekend"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Black Friday": {
                "py/set": [
                  "Black Friday"
                ]
              },
              "Christmas": {
                "py/set": [
                  "Christmas"
                ]
              },
              "July 4": {
                "py/set": [
                  "July 4"
                ]
              },
              "Semi-annual": {
                "py/set": [
                  "Semi-annual"
                ]
              },
              "Valentine": {
                "py/set": [
                  "Valentine"
                ]
              },
              "Weekend": {
                "py/set": [
                  "Weekend"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused45]",
          "tag_mask": "\u00a2\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "buy_one_get_one": "buy_one_get_one",
              "discount": "discount",
              "multiples": "multiples"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "buy_one_get_one": {
                "py/set": [
                  "buy_one_get_one"
                ]
              },
              "discount": {
                "py/set": [
                  "discount"
                ]
              },
              "multiples": {
                "py/set": [
                  "multiples"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused46]",
          "tag_mask": "\u00a2\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "ad_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "billboard": "billboard",
              "newspaper": "newspaper",
              "pamphlet": "pamphlet",
              "radio": "radio",
              "tv": "tv",
              "web": "web"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "billboard": {
                "py/set": [
                  "billboard"
                ]
              },
              "newspaper": {
                "py/set": [
                  "newspaper"
                ]
              },
              "pamphlet": {
                "py/set": [
                  "pamphlet"
                ]
              },
              "radio": {
                "py/set": [
                  "radio"
                ]
              },
              "tv": {
                "py/set": [
                  "tv"
                ]
              },
              "web": {
                "py/set": [
                  "web"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused47]",
          "tag_mask": "\u00a2\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "ad_media_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "ABC": "ABC",
              "CBS": "CBS",
              "Facebook": "Facebook",
              "Google ads": "Google ads",
              "HBO": "HBO",
              "LA time": "LA time",
              "NY times": "NY times",
              "Radio 92.3": "Radio 92.3"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "ABC": {
                "py/set": [
                  "ABC"
                ]
              },
              "CBS": {
                "py/set": [
                  "CBS"
                ]
              },
              "Facebook": {
                "py/set": [
                  "Facebook"
                ]
              },
              "Google ads": {
                "py/set": [
                  "Google ads"
                ]
              },
              "HBO": {
                "py/set": [
                  "HBO"
                ]
              },
              "LA time": {
                "py/set": [
                  "LA time"
                ]
              },
              "NY times": {
                "py/set": [
                  "NY times"
                ]
              },
              "Radio 92.3": {
                "py/set": [
                  "Radio 92.3"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_promotion",
          "tag": "[unused48]",
          "tag_mask": "\u00a2\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused49]",
          "tag_mask": "\u2202\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused50]",
          "tag_mask": "\u2202\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_name",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused51]",
          "tag_mask": "\u2202\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_type",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "e-commerce": "online",
              "online": "online",
              "physical": "physical",
              "store": "physical"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "online": {
                "py/set": [
                  "e-commerce",
                  "online"
                ]
              },
              "physical": {
                "py/set": [
                  "store",
                  "physical"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused52]",
          "tag_mask": "\u2202\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "city",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Atlanta": "Atlanta",
              "Boston": "Boston",
              "Cambridge": "Cambridge",
              "Chicago": "Chicago",
              "Kansas": "Kansas",
              "Las Vegas": "Las Vegas",
              "Los Angeles": "Los Angeles",
              "Miami": "Miami",
              "New York City": "New York City",
              "San Francisco": "San Francisco",
              "Seattle": "Seattle"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Atlanta": {
                "py/set": [
                  "Atlanta"
                ]
              },
              "Boston": {
                "py/set": [
                  "Boston"
                ]
              },
              "Cambridge": {
                "py/set": [
                  "Cambridge"
                ]
              },
              "Chicago": {
                "py/set": [
                  "Chicago"
                ]
              },
              "Kansas": {
                "py/set": [
                  "Kansas"
                ]
              },
              "Las Vegas": {
                "py/set": [
                  "Las Vegas"
                ]
              },
              "Los Angeles": {
                "py/set": [
                  "Los Angeles"
                ]
              },
              "Miami": {
                "py/set": [
                  "Miami"
                ]
              },
              "New York City": {
                "py/set": [
                  "New York City"
                ]
              },
              "San Francisco": {
                "py/set": [
                  "San Francisco"
                ]
              },
              "Seattle": {
                "py/set": [
                  "Seattle"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused53]",
          "tag_mask": "\u2202\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "state",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "CA": "CA",
              "FL": "FL",
              "GA": "GA",
              "IL": "IL",
              "MA": "MA",
              "MI": "MI",
              "NV": "NV",
              "NY": "NY",
              "WA": "WA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "CA": {
                "py/set": [
                  "CA"
                ]
              },
              "FL": {
                "py/set": [
                  "FL"
                ]
              },
              "GA": {
                "py/set": [
                  "GA"
                ]
              },
              "IL": {
                "py/set": [
                  "IL"
                ]
              },
              "MA": {
                "py/set": [
                  "MA"
                ]
              },
              "MI": {
                "py/set": [
                  "MI"
                ]
              },
              "NV": {
                "py/set": [
                  "NV"
                ]
              },
              "NY": {
                "py/set": [
                  "NY"
                ]
              },
              "WA": {
                "py/set": [
                  "WA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused54]",
          "tag_mask": "\u2202\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "country",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "USA": "USA"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "USA": {
                "py/set": [
                  "USA"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused55]",
          "tag_mask": "\u2202\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "region",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "Midwest": "Midwest",
              "Northeast": "Northeast",
              "South": "South",
              "West": "West"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "Midwest": {
                "py/set": [
                  "Midwest"
                ]
              },
              "Northeast": {
                "py/set": [
                  "Northeast"
                ]
              },
              "South": {
                "py/set": [
                  "South"
                ]
              },
              "West": {
                "py/set": [
                  "West"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused56]",
          "tag_mask": "\u2202\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "zipcode",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "5": "5"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "5": {
                "py/set": [
                  "5"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "dim_store",
          "tag": "[unused57]",
          "tag_mask": "\u2202\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "order_id",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused58]",
          "tag_mask": "\u0903\u0937"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "quantity",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100": "100"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100": {
                "py/set": [
                  "100"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused59]",
          "tag_mask": "\u0903\u00ac"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_price",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused60]",
          "tag_mask": "\u0903\u0941"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "unit_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused61]",
          "tag_mask": "\u0903\u00a2"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_value",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused62]",
          "tag_mask": "\u0903\u2202"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_cost",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused63]",
          "tag_mask": "\u0903\u0903"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "margin",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "0.1": "0.1",
              "1000.0": "1000.0"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "0.1": {
                "py/set": [
                  "0.1"
                ]
              },
              "1000.0": {
                "py/set": [
                  "1000.0"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused64]",
          "tag_mask": "\u0903\u0907"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "sales_timestamp",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "2015-01-01 00:00:00": "2015-01-01 00:00:00",
              "2019-12-31 23:59:59": "2019-12-31 23:59:59"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "2015-01-01 00:00:00": {
                "py/set": [
                  "2015-01-01 00:00:00"
                ]
              },
              "2019-12-31 23:59:59": {
                "py/set": [
                  "2019-12-31 23:59:59"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused65]",
          "tag_mask": "\u0903\u03a8"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "line_number",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000000": "1000000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000000": {
                "py/set": [
                  "1000000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused66]",
          "tag_mask": "\u0903\u2211"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "date_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "10000": "10000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "10000": {
                "py/set": [
                  "10000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused67]",
          "tag_mask": "\u0903\u03c0"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "customer_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "100000000": "100000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "100000000": {
                "py/set": [
                  "100000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused68]",
          "tag_mask": "\u0903\u0295"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "product_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000000": "1000000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000000": {
                "py/set": [
                  "1000000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused69]",
          "tag_mask": "\u0903\u0914"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "store_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused70]",
          "tag_mask": "\u0903\u02c6"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "promotion_key",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {
              "1": "1",
              "1000": "1000"
            },
            "value_keys": {
              "py/object": "collections.defaultdict",
              "1": {
                "py/set": [
                  "1"
                ]
              },
              "1000": {
                "py/set": [
                  "1000"
                ]
              },
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused71]",
          "tag_mask": "\u0903\u0902"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "clearance_pricing",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused72]",
          "tag_mask": "\u0903\u091f"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": "returning_customer",
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.string_formatter.EntityStringValueFormatter",
                "format_str": "%s"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": "fact_product_sales",
          "tag": "[unused73]",
          "tag_mask": "\u0903\u03c3"
        },
        {
          "py/object": "indie.lexicon.entities.dictionary_entity.DictionaryEntity",
          "column": null,
          "dictionary": {
            "py/object": "indie.lexicon.dictionary.Dictionary",
            "key_values": {},
            "value_keys": {
              "py/object": "collections.defaultdict",
              "default_factory": {
                "py/type": "builtins.set"
              }
            }
          },
          "entity_format_pipeline": {
            "py/object": "indie.entity_formatter.pipeline.EntityFormatterPipeline",
            "_pipeline": [
              {
                "py/object": "indie.entity_formatter.stages.evaluator.EntityValueEvaluator",
                "format_str": "{value}"
              }
            ]
          },
          "entity_id": null,
          "entity_type": null,
          "table": null,
          "tag": "[unused0]",
          "tag_mask": "\u0907\u03db"
        }
      ],
      "duckling": {
        "py/object": "indie.lexicon.duckling.duckling.Duckling",
        "service_base_url": "http://127.0.0.1:8000"
      },
      "gml": {
        "py/object": "indie.gml.parser.GmlParser",
        "_gml_data": {
          "created": {
            "py/object": "datetime.date",
            "__reduce__": [
              {
                "py/type": "datetime.date"
              },
              [
                "B+QGBQ=="
              ]
            ]
          },
          "model": {
            "created": "2020-01-22",
            "id": "retail_63",
            "name": "retail_63",
            "type": "gnn_bert",
            "updated": "2020-01-22",
            "url": "s3://got-it-ai-model-bucket/dev/retail_demo.tar.gz"
          },
          "organization_name": "gotitai",
          "query_generator": {
            "columns": [
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "customer_id",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "account_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "CA",
                  "MA",
                  "IL",
                  "WA",
                  "FL",
                  "NY",
                  "NV",
                  "MI",
                  "GA"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "USA"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date_registered",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/id": 388
                  },
                  {
                    "py/id": 389
                  }
                ],
                "rule": "date_range",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "preferred_channel1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "store",
                  "online"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "interest1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Trudy Meldrum \u00ca",
                  "Jarred Wiers \u00ca",
                  "Josephine Riggie \u00ca",
                  "Lindsey Sullen \u00ca",
                  "Judi Manigo \u00ca",
                  "Nicholas Devera \u00ca",
                  "Lucila Byrns \u00ca",
                  "Yee Mcdougall \u00ca",
                  "Devon Beckmann \u00ca",
                  "Essie Fetterman \u00ca",
                  "Doyle Jury \u00ca",
                  "Chante Aceves \u00ca",
                  "Keely Cheatam \u00ca",
                  "Frederica Ross \u00ca",
                  "Susanne Mickles \u00ca",
                  "Willy Paulos \u00ca",
                  "Osvaldo Winzer \u00ca",
                  "Jerica Schwartzman \u00ca",
                  "Stewart Foskey \u00ca",
                  "Elijah Laudenslager \u00ca"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "channel",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "SEM",
                  "SEO",
                  "Email",
                  "SMS",
                  "direct"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "phone_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  3000000000,
                  9999999999
                ],
                "rule": "int_range",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "email_address",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "abc@gmail.com",
                  "xyz@yahoo.com",
                  "pqrs@hotmail.com"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "Address1",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "123 Primrose Rd",
                  "345 4th Street",
                  "23 5th Avenue"
                ],
                "rule": "enum",
                "table": "dim_customer",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "5"
                ],
                "rule": "int_rand",
                "table": "dim_customer",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  10000
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/object": "datetime.datetime",
                    "__reduce__": [
                      {
                        "py/type": "datetime.datetime"
                      },
                      [
                        "B98BAQAAAAAAAA=="
                      ]
                    ]
                  },
                  {
                    "py/id": 385
                  }
                ],
                "rule": "date_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  30
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_week",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  7
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Monday",
                  "Tuesday",
                  "Wednesday",
                  "Thursday",
                  "Friday",
                  "Saturday",
                  "Sunday"
                ],
                "rule": "enum",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_year",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  365
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "week_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  52
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  12
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "January",
                  "February",
                  "March",
                  "April",
                  "May",
                  "June",
                  "July",
                  "August",
                  "September",
                  "October",
                  "November",
                  "December"
                ],
                "rule": "enum",
                "table": "dim_date",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quarter",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  4
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "year",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  2017,
                  2019
                ],
                "rule": "int_range",
                "table": "dim_date",
                "where_operators": [
                  "=",
                  "between"
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "week_day",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "bool",
                "table": "dim_date",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "us_holiday",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "bool",
                "table": "dim_date",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "description",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "iphone 7",
                  "iphone 8",
                  "iphone XS",
                  "iphone 11",
                  "iphone 11 pro",
                  "ipad",
                  "ipad pro",
                  "10GB plan",
                  "unlimited plan",
                  "family plan",
                  "earphones",
                  "iphone cover",
                  "screen protector"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "phone",
                  "tablets",
                  "bundled plans",
                  "accessories"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_category",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "devices",
                  "voice plans",
                  "internet"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_product",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "color",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "black",
                  "red",
                  "silver",
                  "white",
                  "gold"
                ],
                "rule": "enum",
                "table": "dim_product",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_promotion",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Christmas",
                  "Valentine",
                  "Black Friday",
                  "July 4",
                  "Weekend",
                  "Semi-annual"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "discount",
                  "buy_one_get_one",
                  "multiples"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "newspaper",
                  "radio",
                  "web",
                  "billboard",
                  "pamphlet",
                  "tv"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_media_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "LA time",
                  "NY times",
                  "Radio 92.3",
                  "Facebook",
                  "Google ads",
                  "CBS",
                  "ABC",
                  "HBO"
                ],
                "rule": "enum",
                "table": "dim_promotion",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_store",
                "where_operators": []
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_name",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_type",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "online",
                  "physical"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "San Francisco",
                  "Boston",
                  "Cambridge",
                  "Los Angeles",
                  "Seattle",
                  "Las Vegas",
                  "Atlanta",
                  "Miami",
                  "New York City",
                  "Chicago",
                  "Kansas"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "CA",
                  "MA",
                  "IL",
                  "WA",
                  "FL",
                  "NY",
                  "NV",
                  "MI",
                  "GA"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "USA"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "region",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "Northeast",
                  "West",
                  "Midwest",
                  "South"
                ],
                "rule": "enum",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  "5"
                ],
                "rule": "int_rand",
                "table": "dim_store",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "count"
                ],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "order_id",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quantity",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "avg",
                  "min",
                  "max"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_value",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_cost",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [
                  "sum",
                  "min",
                  "max",
                  "avg"
                ],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "margin",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  0.1,
                  1000.0
                ],
                "rule": "float_range",
                "table": "fact_product_sales",
                "where_operators": [
                  "=",
                  ">",
                  "<",
                  ">=",
                  "<="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "sales_timestamp",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  {
                    "py/id": 384
                  },
                  {
                    "py/id": 386
                  }
                ],
                "rule": "datetime_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "line_number",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  10000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  100000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [
                  1,
                  1000
                ],
                "rule": "int_range",
                "table": "fact_product_sales",
                "where_operators": []
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "clearance_pricing",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "boolean",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              },
              {
                "aggregations": [],
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "returning_customer",
                "exclude_fields_in_where_if_false": [],
                "exclude_fields_in_where_if_true": [],
                "exclude_joins_in_where_if_false": [],
                "exclude_joins_in_where_if_true": [],
                "exclude_other_fields_in_where": "",
                "like_values": [],
                "representative_values": [],
                "rule": "boolean",
                "table": "fact_product_sales",
                "where_operators": [
                  "="
                ]
              }
            ],
            "distribution": [
              {
                "rule": {
                  "distribution": 0.4,
                  "name": "1 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.3,
                  "name": "2 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "3 column"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "select star"
                },
                "type": "select"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "no join"
                },
                "type": "join"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "1 join"
                },
                "type": "join"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "no where"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.35,
                  "name": "1 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.35,
                  "name": "2 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.15,
                  "name": "3 condition"
                },
                "type": "where"
              },
              {
                "rule": {
                  "distribution": 0.05,
                  "name": "orderby with limit"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.2,
                  "name": "orderby without limit"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.75,
                  "name": "no orderby"
                },
                "type": "orderby"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "count"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "sum"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "avg"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "min"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.08,
                  "name": "max"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.5,
                  "name": "no agg"
                },
                "type": "agg"
              },
              {
                "rule": {
                  "distribution": 0.7,
                  "name": "no groupby"
                },
                "type": "groupby"
              },
              {
                "rule": {
                  "distribution": 0.3,
                  "name": "1 column"
                },
                "type": "groupby"
              }
            ],
            "joins": [
              {
                "join": "fact_product_sales.date_key:dim_date.date_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_date"
              },
              {
                "join": "fact_product_sales.product_key:dim_product.product_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_product"
              },
              {
                "join": "fact_product_sales.promotion_key:dim_promotion.promotion_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_promotion"
              },
              {
                "join": "fact_product_sales.store_key:dim_store.store_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_store"
              },
              {
                "join": "fact_product_sales.customer_key:dim_customer.customer_key",
                "relationship": "m:1",
                "table": "fact_product_sales_dim_customer"
              }
            ]
          },
          "schema": {
            "id": "retail_63_with_joins",
            "name": "retail108_sandbox",
            "tables": [
              {
                "columns": [
                  {
                    "description": "Customer key",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Customer Id",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "unique",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_id",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Account number of the customer",
                    "friendly_name": "Account Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Account Number"
                    ],
                    "name": "account_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "City",
                    "friendly_name": "City",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "City"
                    ],
                    "name": "city",
                    "nullable": false,
                    "system_entity": "@sys.geo-city",
                    "type": "STRING"
                  },
                  {
                    "description": "State",
                    "friendly_name": "State",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "State"
                    ],
                    "name": "state",
                    "nullable": false,
                    "synonyms": {
                      "Alabama": "AL",
                      "Alaska": "AK",
                      "Arizona": "AZ",
                      "Arkansas": "AR",
                      "California": "CA",
                      "Colorado": "CO",
                      "Connecticut": "CT",
                      "Delaware": "DE",
                      "District of Columbia": "DC",
                      "Florida": "FL",
                      "Georgia": "GA",
                      "Hawaii": "HI",
                      "Idaho": "ID",
                      "Illinois": "IL",
                      "Indiana": "IN",
                      "Iowa": "IA",
                      "Kansas": "KS",
                      "Kentucky": "KY",
                      "Louisiana": "LA",
                      "Maine": "ME",
                      "Maryland": "MD",
                      "Massachusetts": "MA",
                      "Michigan": "MI",
                      "Minnesota": "MN",
                      "Mississippi": "MS",
                      "Missouri": "MO",
                      "Montana": "MT",
                      "Nebraska": "NE",
                      "Nevada": "NV",
                      "New Hampshire": "NH",
                      "New Jersey": "NJ",
                      "New Mexico": "NM",
                      "New York": "NY",
                      "North Carolina": "NC",
                      "North Dakota": "ND",
                      "Ohio": "OH",
                      "Oklahoma": "OK",
                      "Oregon": "OR",
                      "Pennsylvania": "PA",
                      "Rhode Island": "RI",
                      "South Carolina": "SC",
                      "South Dakota": "SD",
                      "Tennessee": "TN",
                      "Texas": "TX",
                      "Utah": "UT",
                      "Vermont": "VT",
                      "Virginia": "VA",
                      "Washington": "WA",
                      "West Virginia": "WV",
                      "Wisconsin": "WI",
                      "Wyoming": "WY"
                    },
                    "system_entity": "@sys.geo-state",
                    "type": "STRING"
                  },
                  {
                    "description": "Country",
                    "friendly_name": "Country",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Country"
                    ],
                    "name": "country",
                    "nullable": false,
                    "system_entity": "@sys.geo-country",
                    "type": "STRING"
                  },
                  {
                    "description": "date when the customer was registered",
                    "friendly_name": "Registered Date",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Registered Date"
                    ],
                    "name": "date_registered",
                    "nullable": false,
                    "type": "DATE"
                  },
                  {
                    "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                    "friendly_name": "Preferred Channel",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Preferred Channel"
                    ],
                    "name": "preferred_channel1",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                    "friendly_name": "Interest",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Interest"
                    ],
                    "name": "interest1",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Customer Name",
                    "friendly_name": "Customer Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Customer Name"
                    ],
                    "name": "name",
                    "nullable": false,
                    "system_entity": "@sys.person",
                    "type": "STRING"
                  },
                  {
                    "description": "Channel",
                    "friendly_name": "Channel",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Channel"
                    ],
                    "name": "channel",
                    "nullable": true,
                    "type": "STRING"
                  },
                  {
                    "description": "Phone number",
                    "friendly_name": "Phone number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Phone number"
                    ],
                    "name": "phone_number",
                    "nullable": true,
                    "system_entity": "@sys.phone-number",
                    "type": "INTEGER"
                  },
                  {
                    "description": "Email",
                    "friendly_name": "Email",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Email"
                    ],
                    "name": "email_address",
                    "nullable": true,
                    "system_entity": "@sys.email",
                    "type": "STRING"
                  },
                  {
                    "description": "Address",
                    "friendly_name": "Address",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Address"
                    ],
                    "name": "Address1",
                    "nullable": true,
                    "system_entity": "@sys.address",
                    "type": "STRING"
                  },
                  {
                    "description": "Zipcode",
                    "friendly_name": "Zipcode",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Zipcode"
                    ],
                    "name": "zipcode",
                    "nullable": true,
                    "system_entity": "@sys.zip-code",
                    "type": "INTEGER"
                  }
                ],
                "description": "",
                "name": "dim_customer"
              },
              {
                "columns": [
                  {
                    "description": "date key.",
                    "friendly_name": "Date ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Date ID"
                    ],
                    "name": "date_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "date (Example: 03/15/2019",
                    "friendly_name": "Date",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Date"
                    ],
                    "name": "date",
                    "nullable": false,
                    "type": "DATE"
                  },
                  {
                    "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                    "friendly_name": "Day",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day"
                    ],
                    "name": "day",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "day of week (1 = Sunday, 7 = Saturday)",
                    "friendly_name": "Day Of The Week",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Of The Week"
                    ],
                    "name": "day_of_the_week",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Name of the week day (Sunday, Monday...)",
                    "friendly_name": "Day Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Name"
                    ],
                    "name": "day_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Day of year (Example: 33 for Feb 2)",
                    "friendly_name": "Day Of The Year",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Day Of The Year"
                    ],
                    "name": "day_of_the_year",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Week of year (1 to 52)",
                    "friendly_name": "Week Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Week Number"
                    ],
                    "name": "week_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Month number (5 = May)",
                    "friendly_name": "Month Number",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Month Number"
                    ],
                    "name": "month",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Month name (January, February)",
                    "friendly_name": "Month",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Month"
                    ],
                    "name": "month_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Quarter of year",
                    "friendly_name": "Quarter",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Quarter"
                    ],
                    "name": "quarter",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Year",
                    "friendly_name": "Year",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Year"
                    ],
                    "name": "year",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                    "friendly_name": "Week Day",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Week Day"
                    ],
                    "name": "week_day",
                    "nullable": false,
                    "type": "BOOLEAN"
                  },
                  {
                    "description": "TRUE if it is a US Holiday. Otherwise False",
                    "friendly_name": "US Holiday",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "US Holiday"
                    ],
                    "name": "us_holiday",
                    "nullable": false,
                    "type": "BOOLEAN"
                  }
                ],
                "description": "",
                "name": "dim_date"
              },
              {
                "columns": [
                  {
                    "description": "product key",
                    "friendly_name": "Product ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product ID"
                    ],
                    "name": "product_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "product name",
                    "friendly_name": "Product Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Name"
                    ],
                    "name": "name",
                    "nullable": false,
                    "synonyms": {
                      "10GB": "10GB plan",
                      "iPads": "ipad"
                    },
                    "type": "STRING"
                  },
                  {
                    "description": "Description of product",
                    "friendly_name": "Description",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Description"
                    ],
                    "name": "description",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "type of product",
                    "friendly_name": "Product Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Type"
                    ],
                    "name": "product_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "product category",
                    "friendly_name": "Product Category",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Product Category"
                    ],
                    "name": "product_category",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                    "friendly_name": "Unit Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Price"
                    ],
                    "name": "unit_price",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "unit cost of the product",
                    "friendly_name": "Unit Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Cost"
                    ],
                    "name": "unit_cost",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Color",
                    "friendly_name": "Color",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Color"
                    ],
                    "name": "color",
                    "nullable": false,
                    "type": "STRING"
                  }
                ],
                "description": "",
                "name": "dim_product"
              },
              {
                "columns": [
                  {
                    "description": "promotion key",
                    "friendly_name": "Promotion ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion ID"
                    ],
                    "name": "promotion_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "name of the promotion",
                    "friendly_name": "Promotion Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion Name"
                    ],
                    "name": "promotion_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Type of promotion",
                    "friendly_name": "Promotion Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Promotion Type"
                    ],
                    "name": "promotion_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Ad Type",
                    "friendly_name": "Ad Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Ad Type"
                    ],
                    "name": "ad_type",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Ad Media Name",
                    "friendly_name": "Ad Media Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Ad Media Name"
                    ],
                    "name": "ad_media_name",
                    "nullable": false,
                    "type": "STRING"
                  }
                ],
                "description": "",
                "name": "dim_promotion"
              },
              {
                "columns": [
                  {
                    "description": "store key",
                    "friendly_name": "Store ID",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Store ID"
                    ],
                    "name": "store_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store number",
                    "friendly_name": "Store Number",
                    "is_enum": false,
                    "key_constraint": "unique",
                    "labels": [
                      "Store Number"
                    ],
                    "name": "store_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store name",
                    "friendly_name": "Store Name",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Store Name"
                    ],
                    "name": "store_name",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                    "friendly_name": "Store Type",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Store Type"
                    ],
                    "name": "store_type",
                    "nullable": false,
                    "synonyms": {
                      "e-commerce": "online",
                      "store": "physical"
                    },
                    "type": "STRING"
                  },
                  {
                    "description": "City where store is located",
                    "friendly_name": "City",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "City"
                    ],
                    "name": "city",
                    "nullable": false,
                    "system_entity": "@sys.geo-city",
                    "type": "STRING"
                  },
                  {
                    "description": "State where store is located",
                    "friendly_name": "State",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "State"
                    ],
                    "name": "state",
                    "nullable": false,
                    "system_entity": "@sys.geo-state",
                    "type": "STRING"
                  },
                  {
                    "description": "Country where store is located",
                    "friendly_name": "Country",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Country"
                    ],
                    "name": "country",
                    "nullable": false,
                    "system_entity": "@sys.geo-country",
                    "type": "STRING"
                  },
                  {
                    "description": "Region where store is located (East, West, North, Central...)",
                    "friendly_name": "Region",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Region"
                    ],
                    "name": "region",
                    "nullable": false,
                    "type": "STRING"
                  },
                  {
                    "description": "Zipcode",
                    "friendly_name": "Zipcode",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Zipcode"
                    ],
                    "name": "zipcode",
                    "nullable": true,
                    "system_entity": "@sys.zip-code",
                    "type": "INTEGER"
                  }
                ],
                "description": "",
                "name": "dim_store"
              },
              {
                "columns": [
                  {
                    "description": "Order Id",
                    "friendly_name": "Order ID",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Order ID"
                    ],
                    "name": "order_id",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "number of items purchased",
                    "friendly_name": "Quantity",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Quantity"
                    ],
                    "name": "quantity",
                    "nullable": false,
                    "system_entity": "@sys.cardinal",
                    "type": "INTEGER"
                  },
                  {
                    "description": "unit price",
                    "friendly_name": "Unit Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Price"
                    ],
                    "name": "unit_price",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "unit cost",
                    "friendly_name": "Unit Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Unit Cost"
                    ],
                    "name": "unit_cost",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "total sales ($)",
                    "friendly_name": "Total Sales",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Total Sales"
                    ],
                    "name": "sales_value",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "total cost ($)",
                    "friendly_name": "Total Cost",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Total Cost"
                    ],
                    "name": "sales_cost",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "margin = total sales - total cost",
                    "friendly_name": "Margin",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Margin"
                    ],
                    "name": "margin",
                    "nullable": false,
                    "type": "FLOAT"
                  },
                  {
                    "description": "time of sale/order",
                    "friendly_name": "Time",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Time"
                    ],
                    "name": "sales_timestamp",
                    "nullable": false,
                    "type": "TIMESTAMP"
                  },
                  {
                    "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                    "friendly_name": "Line Item Number",
                    "is_enum": false,
                    "key_constraint": "primary",
                    "labels": [
                      "Line Item Number"
                    ],
                    "name": "line_number",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                    "friendly_name": "Date ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Date ID"
                    ],
                    "name": "date_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                    "friendly_name": "Customer ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Customer ID"
                    ],
                    "name": "customer_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                    "friendly_name": "Product ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Product ID"
                    ],
                    "name": "product_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                    "friendly_name": "Store ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Store ID"
                    ],
                    "name": "store_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                    "friendly_name": "Promotion ID",
                    "is_enum": false,
                    "key_constraint": "foreign",
                    "labels": [
                      "Promotion ID"
                    ],
                    "name": "promotion_key",
                    "nullable": false,
                    "type": "INTEGER"
                  },
                  {
                    "description": "Clearance Price",
                    "friendly_name": "Clearance Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Clearance Price"
                    ],
                    "name": "clearance_pricing",
                    "nullable": false,
                    "type": "BOOLEAN"
                  },
                  {
                    "description": "Clearance Price",
                    "friendly_name": "Clearance Price",
                    "is_enum": false,
                    "key_constraint": null,
                    "labels": [
                      "Returning Customer"
                    ],
                    "name": "returning_customer",
                    "nullable": false,
                    "type": "BOOLEAN"
                  }
                ],
                "description": "",
                "name": "fact_product_sales"
              }
            ]
          },
          "updated": {
            "py/object": "datetime.date",
            "__reduce__": [
              {
                "py/type": "datetime.date"
              },
              [
                "B+QGBQ=="
              ]
            ]
          },
          "version": "1.1"
        },
        "tables": {
          "py/object": "collections.defaultdict",
          "dim_customer": {
            "Address1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 901
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "Address1",
                "description": "Address",
                "exclude_fields_in_where_if_false": {
                  "py/id": 902
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 903
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 904
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 905
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Address",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1343
                },
                "like_values": {
                  "py/id": 906
                },
                "name": "Address1",
                "nullable": true,
                "representative_values": {
                  "py/id": 907
                },
                "rule": "enum",
                "system_entity": "@sys.address",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 908
                }
              }
            },
            "account_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 813
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "account_number",
                "description": "Account number of the customer",
                "exclude_fields_in_where_if_false": {
                  "py/id": 814
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 815
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 816
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 817
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Account Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1332
                },
                "like_values": {
                  "py/id": 818
                },
                "name": "account_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 819
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 820
                }
              }
            },
            "channel": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 877
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "channel",
                "description": "Channel",
                "exclude_fields_in_where_if_false": {
                  "py/id": 878
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 879
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 880
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 881
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1340
                },
                "like_values": {
                  "py/id": 882
                },
                "name": "channel",
                "nullable": true,
                "representative_values": {
                  "py/id": 883
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 884
                }
              }
            },
            "city": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 821
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "description": "City",
                "exclude_fields_in_where_if_false": {
                  "py/id": 822
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 823
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 824
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 825
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1333
                },
                "like_values": {
                  "py/id": 826
                },
                "name": "city",
                "nullable": false,
                "representative_values": {
                  "py/id": 827
                },
                "rule": "enum",
                "system_entity": "@sys.geo-city",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 828
                }
              }
            },
            "country": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 837
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "description": "Country",
                "exclude_fields_in_where_if_false": {
                  "py/id": 838
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 839
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 840
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 841
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1335
                },
                "like_values": {
                  "py/id": 842
                },
                "name": "country",
                "nullable": false,
                "representative_values": {
                  "py/id": 843
                },
                "rule": "enum",
                "system_entity": "@sys.geo-country",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 844
                }
              }
            },
            "customer_id": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 805
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "customer_id",
                "description": "Customer Id",
                "exclude_fields_in_where_if_false": {
                  "py/id": 806
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 807
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 808
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 809
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": {
                  "py/id": 1331
                },
                "like_values": {
                  "py/id": 810
                },
                "name": "customer_id",
                "nullable": false,
                "representative_values": {
                  "py/id": 811
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 812
                }
              }
            },
            "customer_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 797
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "description": "Customer key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 798
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 799
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 800
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 801
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1330
                },
                "like_values": {
                  "py/id": 802
                },
                "name": "customer_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 803
                },
                "rule": "int_range",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 804
                }
              }
            },
            "date_registered": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 845
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date_registered",
                "description": "date when the customer was registered",
                "exclude_fields_in_where_if_false": {
                  "py/id": 846
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 847
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 848
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 849
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Registered Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1336
                },
                "like_values": {
                  "py/id": 850
                },
                "name": "date_registered",
                "nullable": false,
                "representative_values": {
                  "py/id": 851
                },
                "rule": "date_range",
                "table": "dim_customer",
                "type": "DATE",
                "where_operators": {
                  "py/id": 852
                }
              }
            },
            "email_address": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 893
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "email_address",
                "description": "Email",
                "exclude_fields_in_where_if_false": {
                  "py/id": 894
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 895
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 896
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 897
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Email",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1342
                },
                "like_values": {
                  "py/id": 898
                },
                "name": "email_address",
                "nullable": true,
                "representative_values": {
                  "py/id": 899
                },
                "rule": "enum",
                "system_entity": "@sys.email",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 900
                }
              }
            },
            "interest1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 861
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "interest1",
                "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 862
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 863
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 864
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 865
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Interest",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1338
                },
                "like_values": {
                  "py/id": 866
                },
                "name": "interest1",
                "nullable": false,
                "representative_values": {
                  "py/id": 867
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 868
                }
              }
            },
            "name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 869
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "description": "Customer Name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 870
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 871
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 872
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 873
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1339
                },
                "like_values": {
                  "py/id": 874
                },
                "name": "name",
                "nullable": false,
                "representative_values": {
                  "py/id": 875
                },
                "rule": "enum",
                "system_entity": "@sys.person",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 876
                }
              }
            },
            "phone_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 885
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "phone_number",
                "description": "Phone number",
                "exclude_fields_in_where_if_false": {
                  "py/id": 886
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 887
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 888
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 889
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Phone number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1341
                },
                "like_values": {
                  "py/id": 890
                },
                "name": "phone_number",
                "nullable": true,
                "representative_values": {
                  "py/id": 891
                },
                "rule": "int_range",
                "system_entity": "@sys.phone-number",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 892
                }
              }
            },
            "preferred_channel1": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 853
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "preferred_channel1",
                "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 854
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 855
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 856
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 857
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Preferred Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1337
                },
                "like_values": {
                  "py/id": 858
                },
                "name": "preferred_channel1",
                "nullable": false,
                "representative_values": {
                  "py/id": 859
                },
                "rule": "enum",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 860
                }
              }
            },
            "state": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 829
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "description": "State",
                "exclude_fields_in_where_if_false": {
                  "py/id": 830
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 831
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 832
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 833
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1334
                },
                "like_values": {
                  "py/id": 834
                },
                "name": "state",
                "nullable": false,
                "representative_values": {
                  "py/id": 835
                },
                "rule": "enum",
                "synonyms": {
                  "Alabama": "AL",
                  "Alaska": "AK",
                  "Arizona": "AZ",
                  "Arkansas": "AR",
                  "California": "CA",
                  "Colorado": "CO",
                  "Connecticut": "CT",
                  "Delaware": "DE",
                  "District of Columbia": "DC",
                  "Florida": "FL",
                  "Georgia": "GA",
                  "Hawaii": "HI",
                  "Idaho": "ID",
                  "Illinois": "IL",
                  "Indiana": "IN",
                  "Iowa": "IA",
                  "Kansas": "KS",
                  "Kentucky": "KY",
                  "Louisiana": "LA",
                  "Maine": "ME",
                  "Maryland": "MD",
                  "Massachusetts": "MA",
                  "Michigan": "MI",
                  "Minnesota": "MN",
                  "Mississippi": "MS",
                  "Missouri": "MO",
                  "Montana": "MT",
                  "Nebraska": "NE",
                  "Nevada": "NV",
                  "New Hampshire": "NH",
                  "New Jersey": "NJ",
                  "New Mexico": "NM",
                  "New York": "NY",
                  "North Carolina": "NC",
                  "North Dakota": "ND",
                  "Ohio": "OH",
                  "Oklahoma": "OK",
                  "Oregon": "OR",
                  "Pennsylvania": "PA",
                  "Rhode Island": "RI",
                  "South Carolina": "SC",
                  "South Dakota": "SD",
                  "Tennessee": "TN",
                  "Texas": "TX",
                  "Utah": "UT",
                  "Vermont": "VT",
                  "Virginia": "VA",
                  "Washington": "WA",
                  "West Virginia": "WV",
                  "Wisconsin": "WI",
                  "Wyoming": "WY"
                },
                "system_entity": "@sys.geo-state",
                "table": "dim_customer",
                "type": "STRING",
                "where_operators": {
                  "py/id": 836
                }
              }
            },
            "zipcode": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 909
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "description": "Zipcode",
                "exclude_fields_in_where_if_false": {
                  "py/id": 910
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 911
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 912
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 913
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1344
                },
                "like_values": {
                  "py/id": 914
                },
                "name": "zipcode",
                "nullable": true,
                "representative_values": {
                  "py/id": 915
                },
                "rule": "int_rand",
                "system_entity": "@sys.zip-code",
                "table": "dim_customer",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 916
                }
              }
            }
          },
          "dim_date": {
            "date": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 925
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "date",
                "description": "date (Example: 03/15/2019",
                "exclude_fields_in_where_if_false": {
                  "py/id": 926
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 927
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 928
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 929
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1347
                },
                "like_values": {
                  "py/id": 930
                },
                "name": "date",
                "nullable": false,
                "representative_values": {
                  "py/id": 931
                },
                "rule": "date_range",
                "table": "dim_date",
                "type": "DATE",
                "where_operators": {
                  "py/id": 933
                }
              }
            },
            "date_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 917
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "description": "date key.",
                "exclude_fields_in_where_if_false": {
                  "py/id": 918
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 919
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 920
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 921
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1346
                },
                "like_values": {
                  "py/id": 922
                },
                "name": "date_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 923
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 924
                }
              }
            },
            "day": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 934
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day",
                "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 935
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 936
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 937
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 938
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1348
                },
                "like_values": {
                  "py/id": 939
                },
                "name": "day",
                "nullable": false,
                "representative_values": {
                  "py/id": 940
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 941
                }
              }
            },
            "day_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 950
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_name",
                "description": "Name of the week day (Sunday, Monday...)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 951
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 952
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 953
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 954
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1350
                },
                "like_values": {
                  "py/id": 955
                },
                "name": "day_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 956
                },
                "rule": "enum",
                "table": "dim_date",
                "type": "STRING",
                "where_operators": {
                  "py/id": 957
                }
              }
            },
            "day_of_the_week": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 942
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_week",
                "description": "day of week (1 = Sunday, 7 = Saturday)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 943
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 944
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 945
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 946
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Of The Week",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1349
                },
                "like_values": {
                  "py/id": 947
                },
                "name": "day_of_the_week",
                "nullable": false,
                "representative_values": {
                  "py/id": 948
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 949
                }
              }
            },
            "day_of_the_year": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 958
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "day_of_the_year",
                "description": "Day of year (Example: 33 for Feb 2)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 959
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 960
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 961
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 962
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Day Of The Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1351
                },
                "like_values": {
                  "py/id": 963
                },
                "name": "day_of_the_year",
                "nullable": false,
                "representative_values": {
                  "py/id": 964
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 965
                }
              }
            },
            "month": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 974
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month",
                "description": "Month number (5 = May)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 975
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 976
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 977
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 978
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Month Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1353
                },
                "like_values": {
                  "py/id": 979
                },
                "name": "month",
                "nullable": false,
                "representative_values": {
                  "py/id": 980
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 981
                }
              }
            },
            "month_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 982
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "month_name",
                "description": "Month name (January, February)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 983
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 984
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 985
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 986
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Month",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1354
                },
                "like_values": {
                  "py/id": 987
                },
                "name": "month_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 988
                },
                "rule": "enum",
                "table": "dim_date",
                "type": "STRING",
                "where_operators": {
                  "py/id": 989
                }
              }
            },
            "quarter": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 990
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quarter",
                "description": "Quarter of year",
                "exclude_fields_in_where_if_false": {
                  "py/id": 991
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 992
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 993
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 994
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Quarter",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1355
                },
                "like_values": {
                  "py/id": 995
                },
                "name": "quarter",
                "nullable": false,
                "representative_values": {
                  "py/id": 996
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 997
                }
              }
            },
            "us_holiday": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1014
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "us_holiday",
                "description": "TRUE if it is a US Holiday. Otherwise False",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1015
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1016
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1017
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1018
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "US Holiday",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1358
                },
                "like_values": {
                  "py/id": 1019
                },
                "name": "us_holiday",
                "nullable": false,
                "representative_values": {
                  "py/id": 1020
                },
                "rule": "bool",
                "table": "dim_date",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1021
                }
              }
            },
            "week_day": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1006
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "week_day",
                "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1007
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1008
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1009
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1010
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Week Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1357
                },
                "like_values": {
                  "py/id": 1011
                },
                "name": "week_day",
                "nullable": false,
                "representative_values": {
                  "py/id": 1012
                },
                "rule": "bool",
                "table": "dim_date",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1013
                }
              }
            },
            "week_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 966
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "week_number",
                "description": "Week of year (1 to 52)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 967
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 968
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 969
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 970
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Week Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1352
                },
                "like_values": {
                  "py/id": 971
                },
                "name": "week_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 972
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 973
                }
              }
            },
            "year": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 998
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "year",
                "description": "Year",
                "exclude_fields_in_where_if_false": {
                  "py/id": 999
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1000
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1001
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1002
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1356
                },
                "like_values": {
                  "py/id": 1003
                },
                "name": "year",
                "nullable": false,
                "representative_values": {
                  "py/id": 1004
                },
                "rule": "int_range",
                "table": "dim_date",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1005
                }
              }
            }
          },
          "dim_product": {
            "color": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1078
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "color",
                "description": "Color",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1079
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1080
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1081
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1082
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Color",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1367
                },
                "like_values": {
                  "py/id": 1083
                },
                "name": "color",
                "nullable": false,
                "representative_values": {
                  "py/id": 1084
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1085
                }
              }
            },
            "description": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1038
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "description",
                "description": "Description of product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1039
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1040
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1041
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1042
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Description",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1362
                },
                "like_values": {
                  "py/id": 1043
                },
                "name": "description",
                "nullable": false,
                "representative_values": {
                  "py/id": 1044
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1045
                }
              }
            },
            "name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1030
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "name",
                "description": "product name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1031
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1032
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1033
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1034
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1361
                },
                "like_values": {
                  "py/id": 1035
                },
                "name": "name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1036
                },
                "rule": "enum",
                "synonyms": {
                  "10GB": "10GB plan",
                  "iPads": "ipad"
                },
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1037
                }
              }
            },
            "product_category": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1054
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_category",
                "description": "product category",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1055
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1056
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1057
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1058
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Category",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1364
                },
                "like_values": {
                  "py/id": 1059
                },
                "name": "product_category",
                "nullable": false,
                "representative_values": {
                  "py/id": 1060
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1061
                }
              }
            },
            "product_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1022
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "description": "product key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1023
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1024
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1025
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1026
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1360
                },
                "like_values": {
                  "py/id": 1027
                },
                "name": "product_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1028
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1029
                }
              }
            },
            "product_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1046
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "product_type",
                "description": "type of product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1047
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1048
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1049
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1050
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1363
                },
                "like_values": {
                  "py/id": 1051
                },
                "name": "product_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1052
                },
                "rule": "enum",
                "table": "dim_product",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1053
                }
              }
            },
            "unit_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1070
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "description": "unit cost of the product",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1071
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1072
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1073
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1074
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1366
                },
                "like_values": {
                  "py/id": 1075
                },
                "name": "unit_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1076
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1077
                }
              }
            },
            "unit_price": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1062
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1063
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1064
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1065
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1066
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1365
                },
                "like_values": {
                  "py/id": 1067
                },
                "name": "unit_price",
                "nullable": false,
                "representative_values": {
                  "py/id": 1068
                },
                "rule": "int_range",
                "table": "dim_product",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1069
                }
              }
            }
          },
          "dim_promotion": {
            "ad_media_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1118
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_media_name",
                "description": "Ad Media Name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1119
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1120
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1121
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1122
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Ad Media Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1373
                },
                "like_values": {
                  "py/id": 1123
                },
                "name": "ad_media_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1124
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1125
                }
              }
            },
            "ad_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1110
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "ad_type",
                "description": "Ad Type",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1111
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1112
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1113
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1114
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Ad Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1372
                },
                "like_values": {
                  "py/id": 1115
                },
                "name": "ad_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1116
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1117
                }
              }
            },
            "promotion_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1086
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "description": "promotion key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1087
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1088
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1089
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1090
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1369
                },
                "like_values": {
                  "py/id": 1091
                },
                "name": "promotion_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1092
                },
                "rule": "int_range",
                "table": "dim_promotion",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1093
                }
              }
            },
            "promotion_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1094
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_name",
                "description": "name of the promotion",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1095
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1096
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1097
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1098
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1370
                },
                "like_values": {
                  "py/id": 1099
                },
                "name": "promotion_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1100
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1101
                }
              }
            },
            "promotion_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1102
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "promotion_type",
                "description": "Type of promotion",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1103
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1104
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1105
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1106
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1371
                },
                "like_values": {
                  "py/id": 1107
                },
                "name": "promotion_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1108
                },
                "rule": "enum",
                "table": "dim_promotion",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1109
                }
              }
            }
          },
          "dim_store": {
            "city": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1158
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "city",
                "description": "City where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1159
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1160
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1161
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1162
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1379
                },
                "like_values": {
                  "py/id": 1163
                },
                "name": "city",
                "nullable": false,
                "representative_values": {
                  "py/id": 1164
                },
                "rule": "enum",
                "system_entity": "@sys.geo-city",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1165
                }
              }
            },
            "country": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1174
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "country",
                "description": "Country where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1175
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1176
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1177
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1178
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1381
                },
                "like_values": {
                  "py/id": 1179
                },
                "name": "country",
                "nullable": false,
                "representative_values": {
                  "py/id": 1180
                },
                "rule": "enum",
                "system_entity": "@sys.geo-country",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1181
                }
              }
            },
            "region": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1182
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "region",
                "description": "Region where store is located (East, West, North, Central...)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1183
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1184
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1185
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1186
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Region",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1382
                },
                "like_values": {
                  "py/id": 1187
                },
                "name": "region",
                "nullable": false,
                "representative_values": {
                  "py/id": 1188
                },
                "rule": "enum",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1189
                }
              }
            },
            "state": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1166
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "state",
                "description": "State where store is located",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1167
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1168
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1169
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1170
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1380
                },
                "like_values": {
                  "py/id": 1171
                },
                "name": "state",
                "nullable": false,
                "representative_values": {
                  "py/id": 1172
                },
                "rule": "enum",
                "system_entity": "@sys.geo-state",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1173
                }
              }
            },
            "store_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1126
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "description": "store key",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1127
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1128
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1129
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1130
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1375
                },
                "like_values": {
                  "py/id": 1131
                },
                "name": "store_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1132
                },
                "rule": "int_range",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1133
                }
              }
            },
            "store_name": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1142
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_name",
                "description": "store name",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1143
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1144
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1145
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1146
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1377
                },
                "like_values": {
                  "py/id": 1147
                },
                "name": "store_name",
                "nullable": false,
                "representative_values": {
                  "py/id": 1148
                },
                "rule": "enum",
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1149
                }
              }
            },
            "store_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1134
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_number",
                "description": "store number",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1135
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1136
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1137
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1138
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Number",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": {
                  "py/id": 1376
                },
                "like_values": {
                  "py/id": 1139
                },
                "name": "store_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 1140
                },
                "rule": "int_range",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1141
                }
              }
            },
            "store_type": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1150
                },
                "allow_group_by": true,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "store_type",
                "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1151
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1152
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1153
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1154
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1378
                },
                "like_values": {
                  "py/id": 1155
                },
                "name": "store_type",
                "nullable": false,
                "representative_values": {
                  "py/id": 1156
                },
                "rule": "enum",
                "synonyms": {
                  "e-commerce": "online",
                  "store": "physical"
                },
                "table": "dim_store",
                "type": "STRING",
                "where_operators": {
                  "py/id": 1157
                }
              }
            },
            "zipcode": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1190
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "zipcode",
                "description": "Zipcode",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1191
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1192
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1193
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1194
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1383
                },
                "like_values": {
                  "py/id": 1195
                },
                "name": "zipcode",
                "nullable": true,
                "representative_values": {
                  "py/id": 1196
                },
                "rule": "int_rand",
                "system_entity": "@sys.zip-code",
                "table": "dim_store",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1197
                }
              }
            }
          },
          "fact_product_sales": {
            "clearance_pricing": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1310
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "clearance_pricing",
                "description": "Clearance Price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1311
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1312
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1313
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1314
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1399
                },
                "like_values": {
                  "py/id": 1315
                },
                "name": "clearance_pricing",
                "nullable": false,
                "representative_values": {
                  "py/id": 1316
                },
                "rule": "boolean",
                "table": "fact_product_sales",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1317
                }
              }
            },
            "customer_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1278
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "customer_key",
                "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1279
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1280
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1281
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1282
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1395
                },
                "like_values": {
                  "py/id": 1283
                },
                "name": "customer_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1284
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1285
                }
              }
            },
            "date_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1270
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "date_key",
                "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1271
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1272
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1273
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1274
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1394
                },
                "like_values": {
                  "py/id": 1275
                },
                "name": "date_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1276
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1277
                }
              }
            },
            "line_number": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1262
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "line_number",
                "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1263
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1264
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1265
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1266
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Line Item Number",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": {
                  "py/id": 1393
                },
                "like_values": {
                  "py/id": 1267
                },
                "name": "line_number",
                "nullable": false,
                "representative_values": {
                  "py/id": 1268
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1269
                }
              }
            },
            "margin": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1246
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "margin",
                "description": "margin = total sales - total cost",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1247
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1248
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1249
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1250
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Margin",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1391
                },
                "like_values": {
                  "py/id": 1251
                },
                "name": "margin",
                "nullable": false,
                "representative_values": {
                  "py/id": 1252
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1253
                }
              }
            },
            "order_id": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1198
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "order_id",
                "description": "Order Id",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1199
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1200
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1201
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1202
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Order ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1385
                },
                "like_values": {
                  "py/id": 1203
                },
                "name": "order_id",
                "nullable": false,
                "representative_values": {
                  "py/id": 1204
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1205
                }
              }
            },
            "product_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1286
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "product_key",
                "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1287
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1288
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1289
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1290
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1396
                },
                "like_values": {
                  "py/id": 1291
                },
                "name": "product_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1292
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1293
                }
              }
            },
            "promotion_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1302
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "promotion_key",
                "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1303
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1304
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1305
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1306
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1398
                },
                "like_values": {
                  "py/id": 1307
                },
                "name": "promotion_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1308
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1309
                }
              }
            },
            "quantity": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1206
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "quantity",
                "description": "number of items purchased",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1207
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1208
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1209
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1210
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Quantity",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1386
                },
                "like_values": {
                  "py/id": 1211
                },
                "name": "quantity",
                "nullable": false,
                "representative_values": {
                  "py/id": 1212
                },
                "rule": "int_range",
                "system_entity": "@sys.cardinal",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1213
                }
              }
            },
            "returning_customer": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1318
                },
                "allow_group_by": true,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "returning_customer",
                "description": "Clearance Price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1319
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1320
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1321
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1322
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1400
                },
                "like_values": {
                  "py/id": 1323
                },
                "name": "returning_customer",
                "nullable": false,
                "representative_values": {
                  "py/id": 1324
                },
                "rule": "boolean",
                "table": "fact_product_sales",
                "type": "BOOLEAN",
                "where_operators": {
                  "py/id": 1325
                }
              }
            },
            "sales_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1238
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_cost",
                "description": "total cost ($)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1239
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1240
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1241
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1242
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Total Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1390
                },
                "like_values": {
                  "py/id": 1243
                },
                "name": "sales_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1244
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1245
                }
              }
            },
            "sales_timestamp": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1254
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "sales_timestamp",
                "description": "time of sale/order",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1255
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1256
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1257
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1258
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Time",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1392
                },
                "like_values": {
                  "py/id": 1259
                },
                "name": "sales_timestamp",
                "nullable": false,
                "representative_values": {
                  "py/id": 1260
                },
                "rule": "datetime_range",
                "table": "fact_product_sales",
                "type": "TIMESTAMP",
                "where_operators": {
                  "py/id": 1261
                }
              }
            },
            "sales_value": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1230
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "sales_value",
                "description": "total sales ($)",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1231
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1232
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1233
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1234
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Total Sales",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1389
                },
                "like_values": {
                  "py/id": 1235
                },
                "name": "sales_value",
                "nullable": false,
                "representative_values": {
                  "py/id": 1236
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1237
                }
              }
            },
            "store_key": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1294
                },
                "allow_group_by": false,
                "allow_order_by": false,
                "always_appear_in_where": false,
                "appear_in_select": false,
                "column": "store_key",
                "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1295
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1296
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1297
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1298
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": {
                  "py/id": 1397
                },
                "like_values": {
                  "py/id": 1299
                },
                "name": "store_key",
                "nullable": false,
                "representative_values": {
                  "py/id": 1300
                },
                "rule": "int_range",
                "table": "fact_product_sales",
                "type": "INTEGER",
                "where_operators": {
                  "py/id": 1301
                }
              }
            },
            "unit_cost": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1222
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_cost",
                "description": "unit cost",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1223
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1224
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1225
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1226
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1388
                },
                "like_values": {
                  "py/id": 1227
                },
                "name": "unit_cost",
                "nullable": false,
                "representative_values": {
                  "py/id": 1228
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1229
                }
              }
            },
            "unit_price": {
              "py/object": "indie.gml.parser.ColumnSchema",
              "column_schema": {
                "aggregations": {
                  "py/id": 1214
                },
                "allow_group_by": false,
                "allow_order_by": true,
                "always_appear_in_where": false,
                "appear_in_select": true,
                "column": "unit_price",
                "description": "unit price",
                "exclude_fields_in_where_if_false": {
                  "py/id": 1215
                },
                "exclude_fields_in_where_if_true": {
                  "py/id": 1216
                },
                "exclude_joins_in_where_if_false": {
                  "py/id": 1217
                },
                "exclude_joins_in_where_if_true": {
                  "py/id": 1218
                },
                "exclude_other_fields_in_where": "",
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": {
                  "py/id": 1387
                },
                "like_values": {
                  "py/id": 1219
                },
                "name": "unit_price",
                "nullable": false,
                "representative_values": {
                  "py/id": 1220
                },
                "rule": "float_range",
                "table": "fact_product_sales",
                "type": "FLOAT",
                "where_operators": {
                  "py/id": 1221
                }
              }
            }
          },
          "default_factory": {
            "py/type": "builtins.dict"
          }
        }
      },
      "schema": {
        "id": "retail_63_with_joins",
        "name": "retail108_sandbox",
        "tables": [
          {
            "columns": [
              {
                "description": "Customer key",
                "entity_format_pipeline": {
                  "py/id": 394
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Customer Id",
                "entity_format_pipeline": {
                  "py/id": 400
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_id",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Account number of the customer",
                "entity_format_pipeline": {
                  "py/id": 406
                },
                "friendly_name": "Account Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Account Number"
                ],
                "name": "account_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "City",
                "entity_format_pipeline": {
                  "py/id": 412
                },
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "City"
                ],
                "name": "city",
                "nullable": false,
                "system_entity": "@sys.geo-city",
                "type": "STRING"
              },
              {
                "description": "State",
                "entity_format_pipeline": {
                  "py/id": 418
                },
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "State"
                ],
                "name": "state",
                "nullable": false,
                "synonyms": {
                  "Alabama": "AL",
                  "Alaska": "AK",
                  "Arizona": "AZ",
                  "Arkansas": "AR",
                  "CA": "CA",
                  "California": "CA",
                  "Colorado": "CO",
                  "Connecticut": "CT",
                  "Delaware": "DE",
                  "District of Columbia": "DC",
                  "FL": "FL",
                  "Florida": "FL",
                  "GA": "GA",
                  "Georgia": "GA",
                  "Hawaii": "HI",
                  "IL": "IL",
                  "Idaho": "ID",
                  "Illinois": "IL",
                  "Indiana": "IN",
                  "Iowa": "IA",
                  "Kansas": "KS",
                  "Kentucky": "KY",
                  "Louisiana": "LA",
                  "MA": "MA",
                  "MI": "MI",
                  "Maine": "ME",
                  "Maryland": "MD",
                  "Massachusetts": "MA",
                  "Michigan": "MI",
                  "Minnesota": "MN",
                  "Mississippi": "MS",
                  "Missouri": "MO",
                  "Montana": "MT",
                  "NV": "NV",
                  "NY": "NY",
                  "Nebraska": "NE",
                  "Nevada": "NV",
                  "New Hampshire": "NH",
                  "New Jersey": "NJ",
                  "New Mexico": "NM",
                  "New York": "NY",
                  "North Carolina": "NC",
                  "North Dakota": "ND",
                  "Ohio": "OH",
                  "Oklahoma": "OK",
                  "Oregon": "OR",
                  "Pennsylvania": "PA",
                  "Rhode Island": "RI",
                  "South Carolina": "SC",
                  "South Dakota": "SD",
                  "Tennessee": "TN",
                  "Texas": "TX",
                  "Utah": "UT",
                  "Vermont": "VT",
                  "Virginia": "VA",
                  "WA": "WA",
                  "Washington": "WA",
                  "West Virginia": "WV",
                  "Wisconsin": "WI",
                  "Wyoming": "WY"
                },
                "system_entity": "@sys.geo-state",
                "type": "STRING"
              },
              {
                "description": "Country",
                "entity_format_pipeline": {
                  "py/id": 424
                },
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Country"
                ],
                "name": "country",
                "nullable": false,
                "system_entity": "@sys.geo-country",
                "type": "STRING"
              },
              {
                "description": "date when the customer was registered",
                "entity_format_pipeline": {
                  "py/id": 430
                },
                "friendly_name": "Registered Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Registered Date"
                ],
                "name": "date_registered",
                "nullable": false,
                "type": "DATE"
              },
              {
                "description": "preferred channel of purchase for customer (STORE or ONLINE)",
                "entity_format_pipeline": {
                  "py/id": 436
                },
                "friendly_name": "Preferred Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Preferred Channel"
                ],
                "name": "preferred_channel1",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Interest of customer (this data is used to send promotions to customer based on their interest)",
                "entity_format_pipeline": {
                  "py/id": 442
                },
                "friendly_name": "Interest",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Interest"
                ],
                "name": "interest1",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Customer Name",
                "entity_format_pipeline": {
                  "py/id": 448
                },
                "friendly_name": "Customer Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Customer Name"
                ],
                "name": "name",
                "nullable": false,
                "system_entity": "@sys.person",
                "type": "STRING"
              },
              {
                "description": "Channel",
                "entity_format_pipeline": {
                  "py/id": 454
                },
                "friendly_name": "Channel",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Channel"
                ],
                "name": "channel",
                "nullable": true,
                "type": "STRING"
              },
              {
                "description": "Phone number",
                "entity_format_pipeline": {
                  "py/id": 460
                },
                "friendly_name": "Phone number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Phone number"
                ],
                "name": "phone_number",
                "nullable": true,
                "system_entity": "@sys.phone-number",
                "type": "INTEGER"
              },
              {
                "description": "Email",
                "entity_format_pipeline": {
                  "py/id": 466
                },
                "friendly_name": "Email",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Email"
                ],
                "name": "email_address",
                "nullable": true,
                "system_entity": "@sys.email",
                "type": "STRING"
              },
              {
                "description": "Address",
                "entity_format_pipeline": {
                  "py/id": 472
                },
                "friendly_name": "Address",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Address"
                ],
                "name": "Address1",
                "nullable": true,
                "system_entity": "@sys.address",
                "type": "STRING"
              },
              {
                "description": "Zipcode",
                "entity_format_pipeline": {
                  "py/id": 478
                },
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Zipcode"
                ],
                "name": "zipcode",
                "nullable": true,
                "system_entity": "@sys.zip-code",
                "type": "INTEGER"
              }
            ],
            "description": "",
            "name": "dim_customer"
          },
          {
            "columns": [
              {
                "description": "date key.",
                "entity_format_pipeline": {
                  "py/id": 484
                },
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Date ID"
                ],
                "name": "date_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "date (Example: 03/15/2019",
                "entity_format_pipeline": {
                  "py/id": 490
                },
                "friendly_name": "Date",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Date"
                ],
                "name": "date",
                "nullable": false,
                "type": "DATE"
              },
              {
                "description": "day part of the date (Example: 15 if the date is 03/15/2019)",
                "entity_format_pipeline": {
                  "py/id": 496
                },
                "friendly_name": "Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day"
                ],
                "name": "day",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "day of week (1 = Sunday, 7 = Saturday)",
                "entity_format_pipeline": {
                  "py/id": 502
                },
                "friendly_name": "Day Of The Week",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Of The Week"
                ],
                "name": "day_of_the_week",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Name of the week day (Sunday, Monday...)",
                "entity_format_pipeline": {
                  "py/id": 508
                },
                "friendly_name": "Day Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Name"
                ],
                "name": "day_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Day of year (Example: 33 for Feb 2)",
                "entity_format_pipeline": {
                  "py/id": 514
                },
                "friendly_name": "Day Of The Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Day Of The Year"
                ],
                "name": "day_of_the_year",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Week of year (1 to 52)",
                "entity_format_pipeline": {
                  "py/id": 520
                },
                "friendly_name": "Week Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Week Number"
                ],
                "name": "week_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Month number (5 = May)",
                "entity_format_pipeline": {
                  "py/id": 526
                },
                "friendly_name": "Month Number",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Month Number"
                ],
                "name": "month",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Month name (January, February)",
                "entity_format_pipeline": {
                  "py/id": 532
                },
                "friendly_name": "Month",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Month"
                ],
                "name": "month_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Quarter of year",
                "entity_format_pipeline": {
                  "py/id": 538
                },
                "friendly_name": "Quarter",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Quarter"
                ],
                "name": "quarter",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Year",
                "entity_format_pipeline": {
                  "py/id": 544
                },
                "friendly_name": "Year",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Year"
                ],
                "name": "year",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "TRUE if (Mon - Fri)\nFALSE if (Sat-Sun)",
                "entity_format_pipeline": {
                  "py/id": 550
                },
                "friendly_name": "Week Day",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Week Day"
                ],
                "name": "week_day",
                "nullable": false,
                "type": "BOOLEAN"
              },
              {
                "description": "TRUE if it is a US Holiday. Otherwise False",
                "entity_format_pipeline": {
                  "py/id": 556
                },
                "friendly_name": "US Holiday",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "US Holiday"
                ],
                "name": "us_holiday",
                "nullable": false,
                "type": "BOOLEAN"
              }
            ],
            "description": "",
            "name": "dim_date"
          },
          {
            "columns": [
              {
                "description": "product key",
                "entity_format_pipeline": {
                  "py/id": 562
                },
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product ID"
                ],
                "name": "product_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "product name",
                "entity_format_pipeline": {
                  "py/id": 568
                },
                "friendly_name": "Product Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Name"
                ],
                "name": "name",
                "nullable": false,
                "synonyms": {
                  "10GB": "10GB plan",
                  "10GB plan": "10GB plan",
                  "earphones": "earphones",
                  "family plan": "family plan",
                  "iPads": "ipad",
                  "ipad": "ipad",
                  "ipad pro": "ipad pro",
                  "iphone 11": "iphone 11",
                  "iphone 11 pro": "iphone 11 pro",
                  "iphone 7": "iphone 7",
                  "iphone 8": "iphone 8",
                  "iphone XS": "iphone XS",
                  "iphone cover": "iphone cover",
                  "screen protector": "screen protector",
                  "unlimited plan": "unlimited plan"
                },
                "type": "STRING"
              },
              {
                "description": "Description of product",
                "entity_format_pipeline": {
                  "py/id": 574
                },
                "friendly_name": "Description",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Description"
                ],
                "name": "description",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "type of product",
                "entity_format_pipeline": {
                  "py/id": 580
                },
                "friendly_name": "Product Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Type"
                ],
                "name": "product_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "product category",
                "entity_format_pipeline": {
                  "py/id": 586
                },
                "friendly_name": "Product Category",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Product Category"
                ],
                "name": "product_category",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "unit price (please note that the unit price in dim_product table can be different from the unit price in fact_product_sales as it does not include any discounts)",
                "entity_format_pipeline": {
                  "py/id": 592
                },
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Price"
                ],
                "name": "unit_price",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "unit cost of the product",
                "entity_format_pipeline": {
                  "py/id": 598
                },
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Cost"
                ],
                "name": "unit_cost",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Color",
                "entity_format_pipeline": {
                  "py/id": 604
                },
                "friendly_name": "Color",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Color"
                ],
                "name": "color",
                "nullable": false,
                "type": "STRING"
              }
            ],
            "description": "",
            "name": "dim_product"
          },
          {
            "columns": [
              {
                "description": "promotion key",
                "entity_format_pipeline": {
                  "py/id": 610
                },
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion ID"
                ],
                "name": "promotion_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "name of the promotion",
                "entity_format_pipeline": {
                  "py/id": 616
                },
                "friendly_name": "Promotion Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion Name"
                ],
                "name": "promotion_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Type of promotion",
                "entity_format_pipeline": {
                  "py/id": 622
                },
                "friendly_name": "Promotion Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Promotion Type"
                ],
                "name": "promotion_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Ad Type",
                "entity_format_pipeline": {
                  "py/id": 628
                },
                "friendly_name": "Ad Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Ad Type"
                ],
                "name": "ad_type",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Ad Media Name",
                "entity_format_pipeline": {
                  "py/id": 634
                },
                "friendly_name": "Ad Media Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Ad Media Name"
                ],
                "name": "ad_media_name",
                "nullable": false,
                "type": "STRING"
              }
            ],
            "description": "",
            "name": "dim_promotion"
          },
          {
            "columns": [
              {
                "description": "store key",
                "entity_format_pipeline": {
                  "py/id": 640
                },
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Store ID"
                ],
                "name": "store_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store number",
                "entity_format_pipeline": {
                  "py/id": 646
                },
                "friendly_name": "Store Number",
                "is_enum": false,
                "key_constraint": "unique",
                "labels": [
                  "Store Number"
                ],
                "name": "store_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store name",
                "entity_format_pipeline": {
                  "py/id": 652
                },
                "friendly_name": "Store Name",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Store Name"
                ],
                "name": "store_name",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "store type can be of three types: \n1) Regular \n2) Factory Outlet \n3) Online (or Ecommerce)",
                "entity_format_pipeline": {
                  "py/id": 658
                },
                "friendly_name": "Store Type",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Store Type"
                ],
                "name": "store_type",
                "nullable": false,
                "synonyms": {
                  "e-commerce": "online",
                  "online": "online",
                  "physical": "physical",
                  "store": "physical"
                },
                "type": "STRING"
              },
              {
                "description": "City where store is located",
                "entity_format_pipeline": {
                  "py/id": 664
                },
                "friendly_name": "City",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "City"
                ],
                "name": "city",
                "nullable": false,
                "system_entity": "@sys.geo-city",
                "type": "STRING"
              },
              {
                "description": "State where store is located",
                "entity_format_pipeline": {
                  "py/id": 670
                },
                "friendly_name": "State",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "State"
                ],
                "name": "state",
                "nullable": false,
                "system_entity": "@sys.geo-state",
                "type": "STRING"
              },
              {
                "description": "Country where store is located",
                "entity_format_pipeline": {
                  "py/id": 676
                },
                "friendly_name": "Country",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Country"
                ],
                "name": "country",
                "nullable": false,
                "system_entity": "@sys.geo-country",
                "type": "STRING"
              },
              {
                "description": "Region where store is located (East, West, North, Central...)",
                "entity_format_pipeline": {
                  "py/id": 682
                },
                "friendly_name": "Region",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Region"
                ],
                "name": "region",
                "nullable": false,
                "type": "STRING"
              },
              {
                "description": "Zipcode",
                "entity_format_pipeline": {
                  "py/id": 688
                },
                "friendly_name": "Zipcode",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Zipcode"
                ],
                "name": "zipcode",
                "nullable": true,
                "system_entity": "@sys.zip-code",
                "type": "INTEGER"
              }
            ],
            "description": "",
            "name": "dim_store"
          },
          {
            "columns": [
              {
                "description": "Order Id",
                "entity_format_pipeline": {
                  "py/id": 694
                },
                "friendly_name": "Order ID",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Order ID"
                ],
                "name": "order_id",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "number of items purchased",
                "entity_format_pipeline": {
                  "py/id": 700
                },
                "friendly_name": "Quantity",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Quantity"
                ],
                "name": "quantity",
                "nullable": false,
                "system_entity": "@sys.cardinal",
                "type": "INTEGER"
              },
              {
                "description": "unit price",
                "entity_format_pipeline": {
                  "py/id": 706
                },
                "friendly_name": "Unit Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Price"
                ],
                "name": "unit_price",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "unit cost",
                "entity_format_pipeline": {
                  "py/id": 712
                },
                "friendly_name": "Unit Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Unit Cost"
                ],
                "name": "unit_cost",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "total sales ($)",
                "entity_format_pipeline": {
                  "py/id": 718
                },
                "friendly_name": "Total Sales",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Total Sales"
                ],
                "name": "sales_value",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "total cost ($)",
                "entity_format_pipeline": {
                  "py/id": 724
                },
                "friendly_name": "Total Cost",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Total Cost"
                ],
                "name": "sales_cost",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "margin = total sales - total cost",
                "entity_format_pipeline": {
                  "py/id": 730
                },
                "friendly_name": "Margin",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Margin"
                ],
                "name": "margin",
                "nullable": false,
                "type": "FLOAT"
              },
              {
                "description": "time of sale/order",
                "entity_format_pipeline": {
                  "py/id": 736
                },
                "friendly_name": "Time",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Time"
                ],
                "name": "sales_timestamp",
                "nullable": false,
                "type": "TIMESTAMP"
              },
              {
                "description": "Line item number. This is the unique key in the table. Each row in the table lists a separate line item for each order/transaction made. For example, if a customer buys 3 different products in a single order, then 3 different rows will be added to this table with the same order id.",
                "entity_format_pipeline": {
                  "py/id": 742
                },
                "friendly_name": "Line Item Number",
                "is_enum": false,
                "key_constraint": "primary",
                "labels": [
                  "Line Item Number"
                ],
                "name": "line_number",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Date key. This field should be used to join the table with the date dimension. For example, if you are looking to calculate the sales generated on a certain date, then join the fact_product_sales with dim_date table using date_key field",
                "entity_format_pipeline": {
                  "py/id": 748
                },
                "friendly_name": "Date ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Date ID"
                ],
                "name": "date_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Customer key. This field should be used to join the table with the customer dimension. For example, if you are looking to calculate the sales generated by a specific customer, then join the fact_product_sales with dim_customer table using customer_key field",
                "entity_format_pipeline": {
                  "py/id": 754
                },
                "friendly_name": "Customer ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Customer ID"
                ],
                "name": "customer_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "product key. This field should be used to join the table with the product dimension. For example, if you are looking to calculate the sales by product category, then join the fact_product_sales with dim_productr table using product_key field",
                "entity_format_pipeline": {
                  "py/id": 760
                },
                "friendly_name": "Product ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Product ID"
                ],
                "name": "product_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "store key. This field should be used to join the table with the store dimension. For example, if you are looking to calculate the sales for a particular store or the region, then join the fact_product_sales with dim_store table using store_key field",
                "entity_format_pipeline": {
                  "py/id": 766
                },
                "friendly_name": "Store ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Store ID"
                ],
                "name": "store_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "promotion key. This field should be used to join the table with the promotion dimension. For example, if you are looking to understand which promotion is generating highest sales, then join the fact_product_sales with dim_promotion table using promotion_key field",
                "entity_format_pipeline": {
                  "py/id": 772
                },
                "friendly_name": "Promotion ID",
                "is_enum": false,
                "key_constraint": "foreign",
                "labels": [
                  "Promotion ID"
                ],
                "name": "promotion_key",
                "nullable": false,
                "type": "INTEGER"
              },
              {
                "description": "Clearance Price",
                "entity_format_pipeline": {
                  "py/id": 778
                },
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Clearance Price"
                ],
                "name": "clearance_pricing",
                "nullable": false,
                "type": "BOOLEAN"
              },
              {
                "description": "Clearance Price",
                "entity_format_pipeline": {
                  "py/id": 784
                },
                "friendly_name": "Clearance Price",
                "is_enum": false,
                "key_constraint": null,
                "labels": [
                  "Returning Customer"
                ],
                "name": "returning_customer",
                "nullable": false,
                "type": "BOOLEAN"
              }
            ],
            "description": "",
            "name": "fact_product_sales"
          }
        ]
      },
      "system_entity": {
        "py/object": "indie.lexicon.entities.system_entity.SystemEntity",
        "_SystemEntity__node_processor": {
          "py/object": "indie.lexicon.entities.node_processors.NodeProcessor",
          "dimension_to_processor": {
            "amount-of-money": {
              "py/object": "indie.lexicon.entities.node_processors.amount_of_money.AmountOfMoneyProcessor",
              "preprocessed_formats": [
                {
                  "expected_format": " less than ",
                  "pattern": " cheaper than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " more expensive than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " lower than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " higher than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " fewer than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " greater than "
                },
                {
                  "expected_format": " less than ",
                  "pattern": " smaller than "
                },
                {
                  "expected_format": " more than ",
                  "pattern": " bigger than "
                },
                {
                  "expected_format": " in ",
                  "pattern": "( in (?!(the year of )))"
                }
              ]
            },
            "number": {
              "py/object": "indie.lexicon.entities.node_processors.number.NumberProcessor",
              "preprocessed_formats": [
                {
                  "pattern": "((^| )(\"[^\"]+\")|(\"[^\"]+\")/\\b)",
                  "removed_characters": [
                    "\""
                  ]
                },
                {
                  "pattern": "((^| )('[^']+')|('[^']+')/\\b)",
                  "removed_characters": [
                    "'"
                  ]
                },
                {
                  "pattern": "(\\d+( ?)'s)",
                  "removed_characters": [
                    "'s"
                  ]
                }
              ]
            },
            "time": {
              "py/object": "indie.lexicon.entities.node_processors.datetime.DatetimeProcessor",
              "preprocessed_formats": [
                {
                  "datetime_format": "%d-%m-%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(-)(((0)?[1-9])|((1)[0-2]))(-)\\d{4})"
                },
                {
                  "datetime_format": "%d/%m/%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(/)(((0)?[1-9])|((1)[0-2]))(/)\\d{4})"
                },
                {
                  "datetime_format": "%m-%d-%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1])(-)\\d{4})"
                },
                {
                  "datetime_format": "%m/%d/%Y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1])(/)\\d{4})"
                },
                {
                  "datetime_format": "%Y-%d-%m",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(-)((1)[3-9]|(2)[0-9]|(3)[0-1])(-)((0?)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "%Y/%d/%m",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(/)((1)[3-9]|(2)[0-9]|(3)[0-1])(/)((0?)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "%Y-%m-%d",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(-)((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1]))"
                },
                {
                  "datetime_format": "%Y/%m/%d",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(\\d{4}(/)((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1]))"
                },
                {
                  "datetime_format": "%d-%m-%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(-)(((0)?[1-9])|((1)[0-2]))(-)\\d{2})"
                },
                {
                  "datetime_format": "%d/%m/%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((1)[3-9]|(2)[0-9]|(3)[0-1])(/)(((0)?[1-9])|((1)[0-2]))(/)\\d{2})"
                },
                {
                  "datetime_format": "%m-%d-%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(-)([0-2]?[0-9]|(3)[0-1])(-)\\d{2})"
                },
                {
                  "datetime_format": "%m/%d/%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(((0?)[1-9]|((1)[0-2]))(/)([0-2]?[0-9]|(3)[0-1])(/)\\d{2})"
                },
                {
                  "datetime_format": "%d %b,%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec),\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B,%y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember),\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %b %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec) \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember) \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %b, %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec), \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%d %B, %y",
                  "expected_format": "%d %b,%Y",
                  "pattern": "(([0-2]?[0-9]|(3)[0-1]) ([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember), \\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%b'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec)'\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%B'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember)'\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%b'%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]an|[Ff]eb|[Mm]ar|[Aa]pr|[Mm]ay|[Jj]un|[Jj]ul|[Aa]ug|[Ss]ep|[Oo]ct|[Nn]ov|[Dd]ec) '\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": "%B '%y",
                  "expected_format": "%b,%Y",
                  "pattern": "(([Jj]anuary|[Ff]ebruary|[Mm]arch|[A|a]pril|[Jj]une|[Jj]uly|[A|a]ugust|[Ss]eptember|[Oo]ctober|[Nn]ovember|[Dd]ecember) '\\d{2}(?![a-zA-Z0-9]))"
                },
                {
                  "datetime_format": " %m-%Y",
                  "expected_format": " %b %Y",
                  "pattern": "( ((0?)[1-9]|((1)[0-2]))(-)\\d{4})"
                },
                {
                  "datetime_format": " %m/%Y",
                  "expected_format": " %b %Y",
                  "pattern": "( ((0?)[1-9]|((1)[0-2]))(/)\\d{4})"
                },
                {
                  "datetime_format": " %Y-%m",
                  "expected_format": " %b %Y",
                  "pattern": "( \\d{4}(-)((0)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": " %Y/%m",
                  "expected_format": " %b %Y",
                  "pattern": "( \\d{4}(/)((0)[1-9]|((1)[0-2])))"
                },
                {
                  "datetime_format": "quarter %m",
                  "expected_format": "%mth quarter",
                  "pattern": "(quarter [1-4])"
                },
                {
                  "datetime_format": "Q%m",
                  "expected_format": "%mth quarter",
                  "pattern": "(Q[1-4])"
                },
                {
                  "expected_format": " at the ",
                  "pattern": "( at (?!(the )))"
                },
                {
                  "expected_format": "today",
                  "pattern": "the current date"
                },
                {
                  "expected_format": "today",
                  "pattern": "((C|c)urrent date)"
                },
                {
                  "expected_format": "from ",
                  "pattern": "((S|s)ince )"
                }
              ]
            }
          }
        },
        "duckling": {
          "py/id": 793
        }
      }
    }
  },
  "lexicon": {
    "py/id": 382
  },
  "slot_id_to_slot_index": {
    "InDiE.slot.dim_customer.channel.eq0001": 9,
    "InDiE.slot.dim_customer.state.eq0001": 8,
    "InDiE.slot.dim_date.date.between0001": 6,
    "InDiE.slot.dim_date.date.between0002": 7,
    "InDiE.slot.dim_date.date.gte0001": 2,
    "InDiE.slot.dim_product.color.eq0001": 3,
    "InDiE.slot.dim_product.name.eq0001": 4,
    "InDiE.slot.dim_product.unit_cost.gt0001": 1,
    "InDiE.slot.dim_store.store_type.eq0001": 5
  },
  "slot_index_to_slot_id": {
    "1": "InDiE.slot.dim_product.unit_cost.gt0001",
    "2": "InDiE.slot.dim_date.date.gte0001",
    "3": "InDiE.slot.dim_product.color.eq0001",
    "4": "InDiE.slot.dim_product.name.eq0001",
    "5": "InDiE.slot.dim_store.store_type.eq0001",
    "6": "InDiE.slot.dim_date.date.between0001",
    "7": "InDiE.slot.dim_date.date.between0002",
    "8": "InDiE.slot.dim_customer.state.eq0001",
    "9": "InDiE.slot.dim_customer.channel.eq0001"
  },
  "spelling_corrector": {
    "py/object": "indie.spelling_correction.corrector.SpellingCorrector",
    "ignore_list": {
      "py/set": [
        "store",
        "USA",
        "ND",
        "Delaware",
        "ipad",
        "DC",
        "OH",
        "SC",
        "Devon Beckmann \u00ca",
        "Texas",
        "Florida",
        "silver",
        "abc@gmail.com",
        "Google ads",
        "7",
        "Missouri",
        "Jerica Schwartzman \u00ca",
        "June",
        "2015-01-01 00:00:00",
        "Miami",
        "California",
        "NY",
        "PA",
        "Illinois",
        "Connecticut",
        "CA",
        "direct",
        "DE",
        "family plan",
        "July 4",
        "December",
        "Radio 92.3",
        "1000",
        "Nicholas Devera \u00ca",
        "Black Friday",
        "365",
        "Utah",
        "pamphlet",
        "Doyle Jury \u00ca",
        "Willy Paulos \u00ca",
        "phone",
        "Monday",
        "ID",
        "Keely Cheatam \u00ca",
        "Los Angeles",
        "October",
        "Georgia",
        "Stewart Foskey \u00ca",
        "black",
        "West",
        "iPads",
        "100000000",
        "VA",
        "2019-12-31 00:00:00",
        "Valentine",
        "Oregon",
        "Christmas",
        "Judi Manigo \u00ca",
        "Arizona",
        "AR",
        "Arkansas",
        "100",
        "ABC",
        "1000000",
        "Yee Mcdougall \u00ca",
        "TN",
        "KY",
        "Hawaii",
        "Tennessee",
        "9999999999",
        "Ohio",
        "January",
        "voice plans",
        "IA",
        "San Francisco",
        "Osvaldo Winzer \u00ca",
        "Idaho",
        "HBO",
        "New Hampshire",
        "Maryland",
        "e-commerce",
        "Boston",
        "Thursday",
        "white",
        "Pennsylvania",
        "12",
        "iphone XS",
        "3000000000",
        "Essie Fetterman \u00ca",
        "Iowa",
        "New York",
        "discount",
        "MI",
        "Washington",
        "NJ",
        "IL",
        "New Jersey",
        "SEM",
        "Tuesday",
        "South Carolina",
        "accessories",
        "buy_one_get_one",
        "Lindsey Sullen \u00ca",
        "2019-12-31 23:59:59",
        "North Dakota",
        "1",
        "Cambridge",
        "123 Primrose Rd",
        "CT",
        "WV",
        "Mississippi",
        "North Carolina",
        "November",
        "tv",
        "UT",
        "GA",
        "4",
        "Susanne Mickles \u00ca",
        "Weekend",
        "LA",
        "0.1",
        "Frederica Ross \u00ca",
        "TX",
        "Las Vegas",
        "MT",
        "Alaska",
        "Atlanta",
        "AZ",
        "iphone 11 pro",
        "ME",
        "April",
        "Chicago",
        "red",
        "23 5th Avenue",
        "WA",
        "Vermont",
        "MN",
        "Email",
        "radio",
        "MS",
        "District of Columbia",
        "unlimited plan",
        "SEO",
        "February",
        "Nebraska",
        "Facebook",
        "devices",
        "New York City",
        "MO",
        "March",
        "2019",
        "web",
        "Wisconsin",
        "SMS",
        "newspaper",
        "CBS",
        "10000",
        "345 4th Street",
        "Wednesday",
        "tablets",
        "Lucila Byrns \u00ca",
        "Elijah Laudenslager \u00ca",
        "gold",
        "Kansas",
        "ipad pro",
        "South Dakota",
        "Chante Aceves \u00ca",
        "Semi-annual",
        "Virginia",
        "Midwest",
        "WI",
        "HI",
        "West Virginia",
        "pqrs@hotmail.com",
        "10GB",
        "bundled plans",
        "multiples",
        "SD",
        "Indiana",
        "online",
        "South",
        "NY times",
        "Minnesota",
        "iphone 7",
        "52",
        "billboard",
        "NH",
        "IN",
        "RI",
        "xyz@yahoo.com",
        "5",
        "August",
        "NC",
        "NM",
        "30",
        "Northeast",
        "Maine",
        "internet",
        "Seattle",
        "NV",
        "July",
        "Nevada",
        "Wyoming",
        "Jarred Wiers \u00ca",
        "May",
        "OR",
        "AK",
        "Massachusetts",
        "iphone 11",
        "Michigan",
        "Oklahoma",
        "10GB plan",
        "Trudy Meldrum \u00ca",
        "Saturday",
        "MA",
        "AL",
        "CO",
        "iphone cover",
        "Louisiana",
        "iphone 8",
        "VT",
        "OK",
        "NE",
        "WY",
        "earphones",
        "Josephine Riggie \u00ca",
        "MD",
        "Sunday",
        "September",
        "screen protector",
        "Kentucky",
        "2017",
        "Rhode Island",
        "Friday",
        "Montana",
        "FL",
        "Colorado",
        "New Mexico",
        "1000000000",
        "LA time",
        "Alabama",
        "physical"
      ]
    },
    "language_tool": {
      "py/object": "indie.spelling_correction.language_tool.LanguageTool",
      "disable_rules": [
        "UPPERCASE_SENTENCE_START",
        "EN_SPECIFIC_CASE",
        "FROM_X_Y"
      ],
      "language": "en-US",
      "service_base_url": "http://127.0.0.1:8010/v2"
    }
  },
  "unknown_values": []
}